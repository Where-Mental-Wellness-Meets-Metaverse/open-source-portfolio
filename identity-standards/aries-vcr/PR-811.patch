From 14546be7cc872215abf4dbc7c5d0e34f82b16d52 Mon Sep 17 00:00:00 2001
From: megmontanez2000 <megmontanez2000@yahoo.com>
Date: Tue, 12 Aug 2025 18:58:26 -0400
Subject: [PATCH 01/11] feat(schema): add non-PHI healthcare VC examples and
 validation
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: megmontanez2000 <megmontanez2000@yahoo.com>
Signed-off-by: Dr. Meg Monta√±ez-Davenport <future.systems.lab@proton.me>
---
 docs/healthcare-vc-examples/README.md         |  14 +
 .../privacy_healthcare_credentials.md         |  20 +
 .../privacy_healthcare_credentials.md.save    |   7 +
 .../MentalWellnessSessionCredential.json      |  54 ++
 .../tests/node_modules/.package-lock.json     |  61 ++
 .../tests/node_modules/ajv/.runkit_example.js |  23 +
 .../tests/node_modules/ajv/LICENSE            |  22 +
 .../tests/node_modules/ajv/README.md          | 207 ++++
 .../tests/node_modules/ajv/package.json       | 126 +++
 .../node_modules/fast-deep-equal/LICENSE      |  21 +
 .../node_modules/fast-deep-equal/README.md    |  96 ++
 .../fast-deep-equal/es6/index.d.ts            |   2 +
 .../node_modules/fast-deep-equal/es6/index.js |  72 ++
 .../fast-deep-equal/es6/react.d.ts            |   2 +
 .../node_modules/fast-deep-equal/es6/react.js |  79 ++
 .../node_modules/fast-deep-equal/index.d.ts   |   4 +
 .../node_modules/fast-deep-equal/index.js     |  46 +
 .../node_modules/fast-deep-equal/package.json |  61 ++
 .../node_modules/fast-deep-equal/react.d.ts   |   2 +
 .../node_modules/fast-deep-equal/react.js     |  53 +
 .../node_modules/fast-uri/.gitattributes      |   2 +
 .../node_modules/fast-uri/.github/.stale.yml  |  21 +
 .../fast-uri/.github/dependabot.yml           |  13 +
 .../fast-uri/.github/tests_checker.yml        |   8 +
 .../fast-uri/.github/workflows/ci.yml         |  58 ++
 .../.github/workflows/package-manager-ci.yml  |  20 +
 .../tests/node_modules/fast-uri/LICENSE       |  30 +
 .../tests/node_modules/fast-uri/README.md     | 130 +++
 .../tests/node_modules/fast-uri/benchmark.js  | 105 ++
 .../node_modules/fast-uri/eslint.config.js    |   6 +
 .../tests/node_modules/fast-uri/index.js      | 303 ++++++
 .../tests/node_modules/fast-uri/package.json  |  68 ++
 .../tests/node_modules/fast-uri/test/.gitkeep |   0
 .../node_modules/fast-uri/test/ajv.test.js    |  39 +
 .../fast-uri/test/compatibility.test.js       | 131 +++
 .../node_modules/fast-uri/test/equal.test.js  | 103 ++
 .../node_modules/fast-uri/test/parse.test.js  | 318 ++++++
 .../fast-uri/test/resolve.test.js             |  75 ++
 .../fast-uri/test/serialize.test.js           | 143 +++
 .../node_modules/fast-uri/test/uri-js.test.js | 912 ++++++++++++++++++
 .../node_modules/fast-uri/test/util.test.js   |  23 +
 .../node_modules/fast-uri/types/index.d.ts    |  53 +
 .../fast-uri/types/index.test-d.ts            |  17 +
 .../json-schema-traverse/.eslintrc.yml        |  27 +
 .../json-schema-traverse/.github/FUNDING.yml  |   2 +
 .../.github/workflows/build.yml               |  28 +
 .../.github/workflows/publish.yml             |  27 +
 .../node_modules/json-schema-traverse/LICENSE |  21 +
 .../json-schema-traverse/README.md            |  95 ++
 .../json-schema-traverse/index.d.ts           |  40 +
 .../json-schema-traverse/index.js             |  93 ++
 .../json-schema-traverse/package.json         |  43 +
 .../json-schema-traverse/spec/.eslintrc.yml   |   6 +
 .../spec/fixtures/schema.js                   | 125 +++
 .../json-schema-traverse/spec/index.spec.js   | 171 ++++
 .../node_modules/require-from-string/index.js |  34 +
 .../node_modules/require-from-string/license  |  21 +
 .../require-from-string/package.json          |  28 +
 .../require-from-string/readme.md             |  56 ++
 .../tests/package-lock.json                   |  68 ++
 .../healthcare-vc-examples/tests/package.json |  12 +
 ...ample_MentalWellnessSessionCredential.json |   1 +
 .../sample_PractitionerAttestationCredential  |   1 +
 docs/healthcare-vc-examples/tests/validate.js |  32 +
 64 files changed, 4481 insertions(+)
 create mode 100644 docs/healthcare-vc-examples/README.md
 create mode 100644 docs/healthcare-vc-examples/privacy_healthcare_credentials.md
 create mode 100644 docs/healthcare-vc-examples/privacy_healthcare_credentials.md.save
 create mode 100644 docs/healthcare-vc-examples/schemas/MentalWellnessSessionCredential.json
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/.package-lock.json
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/ajv/.runkit_example.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/ajv/LICENSE
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/ajv/README.md
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/ajv/package.json
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/LICENSE
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/README.md
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.d.ts
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.d.ts
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.d.ts
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/package.json
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.d.ts
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.gitattributes
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/.stale.yml
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/dependabot.yml
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/tests_checker.yml
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/ci.yml
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/package-manager-ci.yml
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/LICENSE
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/README.md
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/benchmark.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/eslint.config.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/index.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/package.json
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/.gitkeep
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/ajv.test.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/compatibility.test.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/equal.test.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/parse.test.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/resolve.test.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/serialize.test.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/uri-js.test.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/util.test.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.d.ts
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.test-d.ts
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.eslintrc.yml
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/FUNDING.yml
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/build.yml
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/publish.yml
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/LICENSE
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/README.md
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.d.ts
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/package.json
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/.eslintrc.yml
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/fixtures/schema.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/index.spec.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/require-from-string/index.js
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/require-from-string/license
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/require-from-string/package.json
 create mode 100644 docs/healthcare-vc-examples/tests/node_modules/require-from-string/readme.md
 create mode 100644 docs/healthcare-vc-examples/tests/package-lock.json
 create mode 100644 docs/healthcare-vc-examples/tests/package.json
 create mode 100644 docs/healthcare-vc-examples/tests/sample_MentalWellnessSessionCredential.json
 create mode 100644 docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential
 create mode 100644 docs/healthcare-vc-examples/tests/validate.js

diff --git a/docs/healthcare-vc-examples/README.md b/docs/healthcare-vc-examples/README.md
new file mode 100644
index 000000000..aae100ede
--- /dev/null
+++ b/docs/healthcare-vc-examples/README.md
@@ -0,0 +1,14 @@
+# Healthcare Verifiable Credential Examples (Non-PHI)
+
+All rights reserved, unlicensed.
+
+Purpose: Provide minimal, privacy-preserving VC examples suitable for health-related use cases without handling Protected Health Information (PHI).
+
+Included:
+- MentalWellnessSessionCredential ‚Äî attendance proof without content details.
+- PractitionerAttestationCredential ‚Äî practitioner status attestation with revocation support.
+
+Design principles:
+- PHI minimization
+- Selective disclosure friendly attributes
+- Revocation and key rotation awareness
diff --git a/docs/healthcare-vc-examples/privacy_healthcare_credentials.md b/docs/healthcare-vc-examples/privacy_healthcare_credentials.md
new file mode 100644
index 000000000..c21533341
--- /dev/null
+++ b/docs/healthcare-vc-examples/privacy_healthcare_credentials.md
@@ -0,0 +1,20 @@
+# Privacy & Compliance Notes for Health Credentials (Non-PHI)
+
+All rights reserved, unlicensed.
+
+## PHI Minimization
+- Do not include diagnoses, notes, lab values, prescriptions, or free-text clinical content.
+- Use coarse enums and timestamps; omit narrative details.
+
+## Selective Disclosure
+- Prefer schemas compatible with ZK/AnonCreds-style selective disclosure.
+- Keep attributes simple and independently disclosable.
+
+## Revocation & Rotation
+- Support credential revocation lists.
+- Document issuer DID key rotation procedures.
+
+## Data Residency & Retention
+- Store PHI off-chain under appropriate legal frameworks (HIPAA/GDPR).
+- Place only minimal proofs or anonymized claims in credentials.
+
diff --git a/docs/healthcare-vc-examples/privacy_healthcare_credentials.md.save b/docs/healthcare-vc-examples/privacy_healthcare_credentials.md.save
new file mode 100644
index 000000000..94f3f56fe
--- /dev/null
+++ b/docs/healthcare-vc-examples/privacy_healthcare_credentials.md.save
@@ -0,0 +1,7 @@
+# Privacy & Compliance Notes for Health Credentials (Non-PHI)
+
+All rights reserved, unlicensed.
+
+## PHI Minimization
+- Do not include diagnoses, notes, lab values, prescriptions, or free-text clinical content.
+- Use coarse enums and timk
diff --git a/docs/healthcare-vc-examples/schemas/MentalWellnessSessionCredential.json b/docs/healthcare-vc-examples/schemas/MentalWellnessSessionCredential.json
new file mode 100644
index 000000000..c28ec7cf4
--- /dev/null
+++ b/docs/healthcare-vc-examples/schemas/MentalWellnessSessionCredential.json
@@ -0,0 +1,54 @@
+{
+  "$schema": "https://json-schema.org/draft/2020-12/schema",
+  "title": "MentalWellnessSessionCredential (Non-PHI)",
+  "description": "Attendance proof for a mental wellness session without PHI.",
+  "type": "object",
+  "properties": {
+    "@context": {
+      "type": "array",
+      "minItems": 1
+    },
+    "type": {
+      "type": "array",
+      "contains": {
+        "type": "string",
+        "pattern": "^VerifiableCredential$"
+      }
+    },
+    "issuer": {
+      "type": ["string", "object"]
+    },
+    "issuanceDate": {
+      "type": "string",
+      "format": "date-time"
+    },
+    "credentialSubject": {
+      "type": "object",
+      "properties": {
+        "subjectId": {
+          "type": "string",
+          "description": "Pseudonymous subject identifier (e.g., DID or UUID)."
+        },
+        "sessionDate": {
+          "type": "string",
+          "format": "date"
+        },
+        "sessionType": {
+          "type": "string",
+          "enum": ["education", "coaching", "group_support", "guided_relaxation"]
+        },
+        "sessionLevel": {
+          "type": "string",
+          "enum": ["L1", "L2", "L3"]
+        }
+      },
+      "required": ["subjectId", "sessionDate", "sessionType", "sessionLevel"],
+      "additionalProperties": false
+    },
+    "proof": {
+      "type": "object"
+    }
+  },
+  "required": ["@context", "type", "issuer", "issuanceDate", "credentialSubject", "proof"],
+  "additionalProperties": true
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/.package-lock.json b/docs/healthcare-vc-examples/tests/node_modules/.package-lock.json
new file mode 100644
index 000000000..b2360596d
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/.package-lock.json
@@ -0,0 +1,61 @@
+{
+  "name": "hc-vc-schema-tests",
+  "version": "0.1.0",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "node_modules/ajv": {
+      "version": "8.17.1",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
+      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
+      "license": "MIT",
+      "dependencies": {
+        "fast-deep-equal": "^3.1.3",
+        "fast-uri": "^3.0.1",
+        "json-schema-traverse": "^1.0.0",
+        "require-from-string": "^2.0.2"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/epoberezkin"
+      }
+    },
+    "node_modules/fast-deep-equal": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+      "license": "MIT"
+    },
+    "node_modules/fast-uri": {
+      "version": "3.0.6",
+      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.6.tgz",
+      "integrity": "sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/fastify"
+        },
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/fastify"
+        }
+      ],
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/json-schema-traverse": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
+      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
+      "license": "MIT"
+    },
+    "node_modules/require-from-string": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
+      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    }
+  }
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/ajv/.runkit_example.js b/docs/healthcare-vc-examples/tests/node_modules/ajv/.runkit_example.js
new file mode 100644
index 000000000..0d578d5d5
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/ajv/.runkit_example.js
@@ -0,0 +1,23 @@
+const Ajv = require("ajv")
+const ajv = new Ajv({allErrors: true})
+
+const schema = {
+  type: "object",
+  properties: {
+    foo: {type: "string"},
+    bar: {type: "number", maximum: 3},
+  },
+  required: ["foo", "bar"],
+  additionalProperties: false,
+}
+
+const validate = ajv.compile(schema)
+
+test({foo: "abc", bar: 2})
+test({foo: 2, bar: 4})
+
+function test(data) {
+  const valid = validate(data)
+  if (valid) console.log("Valid!")
+  else console.log("Invalid: " + ajv.errorsText(validate.errors))
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/ajv/LICENSE b/docs/healthcare-vc-examples/tests/node_modules/ajv/LICENSE
new file mode 100644
index 000000000..139162ad2
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/ajv/LICENSE
@@ -0,0 +1,22 @@
+The MIT License (MIT)
+
+Copyright (c) 2015-2021 Evgeny Poberezkin
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
+
diff --git a/docs/healthcare-vc-examples/tests/node_modules/ajv/README.md b/docs/healthcare-vc-examples/tests/node_modules/ajv/README.md
new file mode 100644
index 000000000..d8ee276ce
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/ajv/README.md
@@ -0,0 +1,207 @@
+<img align="right" alt="Ajv logo" width="160" src="https://ajv.js.org/img/ajv.svg">
+
+&nbsp;
+
+# Ajv JSON schema validator
+
+The fastest JSON validator for Node.js and browser.
+
+Supports JSON Schema draft-04/06/07/2019-09/2020-12 ([draft-04 support](https://ajv.js.org/json-schema.html#draft-04) requires ajv-draft-04 package) and JSON Type Definition [RFC8927](https://datatracker.ietf.org/doc/rfc8927/).
+
+[![build](https://github.com/ajv-validator/ajv/actions/workflows/build.yml/badge.svg)](https://github.com/ajv-validator/ajv/actions?query=workflow%3Abuild)
+[![npm](https://img.shields.io/npm/v/ajv.svg)](https://www.npmjs.com/package/ajv)
+[![npm downloads](https://img.shields.io/npm/dm/ajv.svg)](https://www.npmjs.com/package/ajv)
+[![Coverage Status](https://coveralls.io/repos/github/ajv-validator/ajv/badge.svg?branch=master)](https://coveralls.io/github/ajv-validator/ajv?branch=master)
+[![SimpleX](https://img.shields.io/badge/chat-on%20SimpleX-70F0F9)](https://simplex.chat/contact#/?v=1-2&smp=smp%3A%2F%2Fu2dS9sG8nMNURyZwqASV4yROM28Er0luVTx5X1CsMrU%3D%40smp4.simplex.im%2F8KvvURM6J38Gdq9dCuPswMOkMny0xCOJ%23%2F%3Fv%3D1-2%26dh%3DMCowBQYDK2VuAyEAr8rPVRuMOXv6kwF2yUAap-eoVg-9ssOFCi1fIrxTUw0%253D%26srv%3Do5vmywmrnaxalvz6wi3zicyftgio6psuvyniis6gco6bp6ekl4cqj4id.onion&data=%7B%22type%22%3A%22group%22%2C%22groupLinkId%22%3A%224pwLRgWHU9tlroMWHz0uOg%3D%3D%22%7D)
+[![Gitter](https://img.shields.io/gitter/room/ajv-validator/ajv.svg)](https://gitter.im/ajv-validator/ajv)
+[![GitHub Sponsors](https://img.shields.io/badge/$-sponsors-brightgreen)](https://github.com/sponsors/epoberezkin)
+
+## Ajv sponsors
+
+[<img src="https://ajv.js.org/img/mozilla.svg" width="45%" alt="Mozilla">](https://www.mozilla.org)<img src="https://ajv.js.org/img/gap.svg" width="9%">[<img src="https://ajv.js.org/img/reserved.svg" width="45%">](https://opencollective.com/ajv)
+
+[<img src="https://ajv.js.org/img/microsoft.png" width="31%" alt="Microsoft">](https://opensource.microsoft.com)<img src="https://ajv.js.org/img/gap.svg" width="3%">[<img src="https://ajv.js.org/img/reserved.svg" width="31%">](https://opencollective.com/ajv)<img src="https://ajv.js.org/img/gap.svg" width="3%">[<img src="https://ajv.js.org/img/reserved.svg" width="31%">](https://opencollective.com/ajv)
+
+[<img src="https://ajv.js.org/img/retool.svg" width="22.5%" alt="Retool">](https://retool.com/?utm_source=sponsor&utm_campaign=ajv)<img src="https://ajv.js.org/img/gap.svg" width="3%">[<img src="https://ajv.js.org/img/tidelift.svg" width="22.5%" alt="Tidelift">](https://tidelift.com/subscription/pkg/npm-ajv?utm_source=npm-ajv&utm_medium=referral&utm_campaign=enterprise)<img src="https://ajv.js.org/img/gap.svg" width="3%">[<img src="https://ajv.js.org/img/simplex.svg" width="22.5%" alt="SimpleX">](https://github.com/simplex-chat/simplex-chat)<img src="https://ajv.js.org/img/gap.svg" width="3%">[<img src="https://ajv.js.org/img/reserved.svg" width="22.5%">](https://opencollective.com/ajv)
+
+## Contributing
+
+More than 100 people contributed to Ajv, and we would love to have you join the development. We welcome implementing new features that will benefit many users and ideas to improve our documentation.
+
+Please review [Contributing guidelines](./CONTRIBUTING.md) and [Code components](https://ajv.js.org/components.html).
+
+## Documentation
+
+All documentation is available on the [Ajv website](https://ajv.js.org).
+
+Some useful site links:
+
+- [Getting started](https://ajv.js.org/guide/getting-started.html)
+- [JSON Schema vs JSON Type Definition](https://ajv.js.org/guide/schema-language.html)
+- [API reference](https://ajv.js.org/api.html)
+- [Strict mode](https://ajv.js.org/strict-mode.html)
+- [Standalone validation code](https://ajv.js.org/standalone.html)
+- [Security considerations](https://ajv.js.org/security.html)
+- [Command line interface](https://ajv.js.org/packages/ajv-cli.html)
+- [Frequently Asked Questions](https://ajv.js.org/faq.html)
+
+## <a name="sponsors"></a>Please [sponsor Ajv development](https://github.com/sponsors/epoberezkin)
+
+Since I asked to support Ajv development 40 people and 6 organizations contributed via GitHub and OpenCollective - this support helped receiving the MOSS grant!
+
+Your continuing support is very important - the funds will be used to develop and maintain Ajv once the next major version is released.
+
+Please sponsor Ajv via:
+
+- [GitHub sponsors page](https://github.com/sponsors/epoberezkin) (GitHub will match it)
+- [Ajv Open Collective](https://opencollective.com/ajv)
+
+Thank you.
+
+#### Open Collective sponsors
+
+<a href="https://opencollective.com/ajv"><img src="https://opencollective.com/ajv/individuals.svg?width=890"></a>
+
+<a href="https://opencollective.com/ajv/organization/0/website"><img src="https://opencollective.com/ajv/organization/0/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/1/website"><img src="https://opencollective.com/ajv/organization/1/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/2/website"><img src="https://opencollective.com/ajv/organization/2/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/3/website"><img src="https://opencollective.com/ajv/organization/3/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/4/website"><img src="https://opencollective.com/ajv/organization/4/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/5/website"><img src="https://opencollective.com/ajv/organization/5/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/6/website"><img src="https://opencollective.com/ajv/organization/6/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/7/website"><img src="https://opencollective.com/ajv/organization/7/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/8/website"><img src="https://opencollective.com/ajv/organization/8/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/9/website"><img src="https://opencollective.com/ajv/organization/9/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/10/website"><img src="https://opencollective.com/ajv/organization/10/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/11/website"><img src="https://opencollective.com/ajv/organization/11/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/12/website"><img src="https://opencollective.com/ajv/organization/12/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/13/website"><img src="https://opencollective.com/ajv/organization/13/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/14/website"><img src="https://opencollective.com/ajv/organization/14/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/15/website"><img src="https://opencollective.com/ajv/organization/15/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/16/website"><img src="https://opencollective.com/ajv/organization/16/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/17/website"><img src="https://opencollective.com/ajv/organization/17/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/18/website"><img src="https://opencollective.com/ajv/organization/18/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/19/website"><img src="https://opencollective.com/ajv/organization/19/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/20/website"><img src="https://opencollective.com/ajv/organization/20/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/21/website"><img src="https://opencollective.com/ajv/organization/21/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/22/website"><img src="https://opencollective.com/ajv/organization/22/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/23/website"><img src="https://opencollective.com/ajv/organization/23/avatar.svg"></a>
+<a href="https://opencollective.com/ajv/organization/24/website"><img src="https://opencollective.com/ajv/organization/24/avatar.svg"></a>
+
+## Performance
+
+Ajv generates code to turn JSON Schemas into super-fast validation functions that are efficient for v8 optimization.
+
+Currently Ajv is the fastest and the most standard compliant validator according to these benchmarks:
+
+- [json-schema-benchmark](https://github.com/ebdrup/json-schema-benchmark) - 50% faster than the second place
+- [jsck benchmark](https://github.com/pandastrike/jsck#benchmarks) - 20-190% faster
+- [z-schema benchmark](https://rawgit.com/zaggino/z-schema/master/benchmark/results.html)
+- [themis benchmark](https://cdn.rawgit.com/playlyfe/themis/master/benchmark/results.html)
+
+Performance of different validators by [json-schema-benchmark](https://github.com/ebdrup/json-schema-benchmark):
+
+[![performance](https://chart.googleapis.com/chart?chxt=x,y&cht=bhs&chco=76A4FB&chls=2.0&chbh=62,4,1&chs=600x416&chxl=-1:|ajv|@exodus/schemasafe|is-my-json-valid|djv|@cfworker/json-schema|jsonschema/=t:100,69.2,51.5,13.1,5.1,1.2)](https://github.com/ebdrup/json-schema-benchmark/blob/master/README.md#performance)
+
+## Features
+
+- Ajv implements JSON Schema [draft-06/07/2019-09/2020-12](http://json-schema.org/) standards (draft-04 is supported in v6):
+  - all validation keywords (see [JSON Schema validation keywords](https://ajv.js.org/json-schema.html))
+  - [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md) extensions:
+    - NEW: keyword [discriminator](https://ajv.js.org/json-schema.html#discriminator).
+    - keyword [nullable](https://ajv.js.org/json-schema.html#nullable).
+  - full support of remote references (remote schemas have to be added with `addSchema` or compiled to be available)
+  - support of recursive references between schemas
+  - correct string lengths for strings with unicode pairs
+  - JSON Schema [formats](https://ajv.js.org/guide/formats.html) (with [ajv-formats](https://github.com/ajv-validator/ajv-formats) plugin).
+  - [validates schemas against meta-schema](https://ajv.js.org/api.html#api-validateschema)
+- NEW: supports [JSON Type Definition](https://datatracker.ietf.org/doc/rfc8927/):
+  - all keywords (see [JSON Type Definition schema forms](https://ajv.js.org/json-type-definition.html))
+  - meta-schema for JTD schemas
+  - "union" keyword and user-defined keywords (can be used inside "metadata" member of the schema)
+- supports [browsers](https://ajv.js.org/guide/environments.html#browsers) and Node.js 10.x - current
+- [asynchronous loading](https://ajv.js.org/guide/managing-schemas.html#asynchronous-schema-loading) of referenced schemas during compilation
+- "All errors" validation mode with [option allErrors](https://ajv.js.org/options.html#allerrors)
+- [error messages with parameters](https://ajv.js.org/api.html#validation-errors) describing error reasons to allow error message generation
+- i18n error messages support with [ajv-i18n](https://github.com/ajv-validator/ajv-i18n) package
+- [removing-additional-properties](https://ajv.js.org/guide/modifying-data.html#removing-additional-properties)
+- [assigning defaults](https://ajv.js.org/guide/modifying-data.html#assigning-defaults) to missing properties and items
+- [coercing data](https://ajv.js.org/guide/modifying-data.html#coercing-data-types) to the types specified in `type` keywords
+- [user-defined keywords](https://ajv.js.org/guide/user-keywords.html)
+- additional extension keywords with [ajv-keywords](https://github.com/ajv-validator/ajv-keywords) package
+- [\$data reference](https://ajv.js.org/guide/combining-schemas.html#data-reference) to use values from the validated data as values for the schema keywords
+- [asynchronous validation](https://ajv.js.org/guide/async-validation.html) of user-defined formats and keywords
+
+## Install
+
+To install version 8:
+
+```
+npm install ajv
+```
+
+## <a name="usage"></a>Getting started
+
+Try it in the Node.js REPL: https://runkit.com/npm/ajv
+
+In JavaScript:
+
+```javascript
+// or ESM/TypeScript import
+import Ajv from "ajv"
+// Node.js require:
+const Ajv = require("ajv")
+
+const ajv = new Ajv() // options can be passed, e.g. {allErrors: true}
+
+const schema = {
+  type: "object",
+  properties: {
+    foo: {type: "integer"},
+    bar: {type: "string"},
+  },
+  required: ["foo"],
+  additionalProperties: false,
+}
+
+const data = {
+  foo: 1,
+  bar: "abc",
+}
+
+const validate = ajv.compile(schema)
+const valid = validate(data)
+if (!valid) console.log(validate.errors)
+```
+
+Learn how to use Ajv and see more examples in the [Guide: getting started](https://ajv.js.org/guide/getting-started.html)
+
+## Changes history
+
+See [https://github.com/ajv-validator/ajv/releases](https://github.com/ajv-validator/ajv/releases)
+
+**Please note**: [Changes in version 8.0.0](https://github.com/ajv-validator/ajv/releases/tag/v8.0.0)
+
+[Version 7.0.0](https://github.com/ajv-validator/ajv/releases/tag/v7.0.0)
+
+[Version 6.0.0](https://github.com/ajv-validator/ajv/releases/tag/v6.0.0).
+
+## Code of conduct
+
+Please review and follow the [Code of conduct](./CODE_OF_CONDUCT.md).
+
+Please report any unacceptable behaviour to ajv.validator@gmail.com - it will be reviewed by the project team.
+
+## Security contact
+
+To report a security vulnerability, please use the
+[Tidelift security contact](https://tidelift.com/security).
+Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerabilities via GitHub issues.
+
+## Open-source software support
+
+Ajv is a part of [Tidelift subscription](https://tidelift.com/subscription/pkg/npm-ajv?utm_source=npm-ajv&utm_medium=referral&utm_campaign=readme) - it provides a centralised support to open-source software users, in addition to the support provided by software maintainers.
+
+## License
+
+[MIT](./LICENSE)
diff --git a/docs/healthcare-vc-examples/tests/node_modules/ajv/package.json b/docs/healthcare-vc-examples/tests/node_modules/ajv/package.json
new file mode 100644
index 000000000..17df7b147
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/ajv/package.json
@@ -0,0 +1,126 @@
+{
+  "name": "ajv",
+  "version": "8.17.1",
+  "description": "Another JSON Schema Validator",
+  "main": "dist/ajv.js",
+  "types": "dist/ajv.d.ts",
+  "files": [
+    "lib/",
+    "dist/",
+    ".runkit_example.js"
+  ],
+  "scripts": {
+    "eslint": "eslint \"lib/**/*.ts\" \"spec/**/*.*s\" --ignore-pattern spec/JSON-Schema-Test-Suite",
+    "prettier:write": "prettier --write \"./**/*.{json,yaml,js,ts}\"",
+    "prettier:check": "prettier --list-different \"./**/*.{json,yaml,js,ts}\"",
+    "test-spec": "cross-env TS_NODE_PROJECT=spec/tsconfig.json mocha -r ts-node/register \"spec/**/*.spec.{ts,js}\" -R dot",
+    "test-codegen": "nyc cross-env TS_NODE_PROJECT=spec/tsconfig.json mocha -r ts-node/register 'spec/codegen.spec.ts' -R spec",
+    "test-debug": "npm run test-spec -- --inspect-brk",
+    "test-cov": "nyc npm run test-spec",
+    "rollup": "rm -rf bundle && rollup -c",
+    "bundle": "rm -rf bundle && node ./scripts/bundle.js ajv ajv7 ajv7 && node ./scripts/bundle.js 2019 ajv2019 ajv2019 && node ./scripts/bundle.js 2020 ajv2020 ajv2020 && node ./scripts/bundle.js jtd ajvJTD ajvJTD",
+    "build": "rm -rf dist && tsc && cp -r lib/refs dist && rm dist/refs/json-schema-2019-09/index.ts && rm dist/refs/json-schema-2020-12/index.ts && rm dist/refs/jtd-schema.ts",
+    "json-tests": "rm -rf spec/_json/*.js && node scripts/jsontests",
+    "test-karma": "karma start",
+    "test-browser": "rm -rf .browser && npm run bundle && scripts/prepare-tests && karma start",
+    "test-all": "npm run test-cov && if-node-version 12 npm run test-browser",
+    "test": "npm run json-tests && npm run prettier:check && npm run eslint && npm link && npm link --legacy-peer-deps ajv && npm run test-cov",
+    "test-ci": "AJV_FULL_TEST=true npm test",
+    "prepublish": "npm run build",
+    "benchmark": "npm i && npm run build && npm link && cd ./benchmark && npm link --legacy-peer-deps ajv && npm i && node ./jtd",
+    "docs:dev": "./scripts/prepare-site && vuepress dev docs",
+    "docs:build": "./scripts/prepare-site && vuepress build docs"
+  },
+  "nyc": {
+    "exclude": [
+      "**/spec/**",
+      "node_modules"
+    ],
+    "reporter": [
+      "lcov",
+      "text-summary"
+    ]
+  },
+  "repository": "ajv-validator/ajv",
+  "keywords": [
+    "JSON",
+    "schema",
+    "validator",
+    "validation",
+    "jsonschema",
+    "json-schema",
+    "json-schema-validator",
+    "json-schema-validation"
+  ],
+  "author": "Evgeny Poberezkin",
+  "license": "MIT",
+  "bugs": "https://github.com/ajv-validator/ajv/issues",
+  "homepage": "https://ajv.js.org",
+  "runkitExampleFilename": ".runkit_example.js",
+  "dependencies": {
+    "fast-deep-equal": "^3.1.3",
+    "fast-uri": "^3.0.1",
+    "json-schema-traverse": "^1.0.0",
+    "require-from-string": "^2.0.2"
+  },
+  "devDependencies": {
+    "@ajv-validator/config": "^0.5.0",
+    "@rollup/plugin-commonjs": "^25.0.7",
+    "@rollup/plugin-json": "^6.1.0",
+    "@rollup/plugin-node-resolve": "^15.2.3",
+    "@rollup/plugin-typescript": "^11.1.6",
+    "@types/chai": "^4.3.11",
+    "@types/mocha": "^10.0.6",
+    "@types/node": "^20.11.30",
+    "@types/require-from-string": "^1.2.3",
+    "@typescript-eslint/eslint-plugin": "^7.3.1",
+    "@typescript-eslint/parser": "^7.3.1",
+    "ajv-formats": "^3.0.1",
+    "browserify": "^17.0.0",
+    "chai": "^4.4.1",
+    "cross-env": "^7.0.3",
+    "dayjs": "^1.11.10",
+    "dayjs-plugin-utc": "^0.1.2",
+    "eslint": "^8.57.0",
+    "eslint-config-prettier": "^9.1.0",
+    "glob": "^10.3.10",
+    "husky": "^9.0.11",
+    "if-node-version": "^1.1.1",
+    "jimp": "^0.22.10",
+    "js-beautify": "^1.15.1",
+    "json-schema-test": "^2.0.0",
+    "karma": "^6.4.2",
+    "karma-chrome-launcher": "^3.2.0",
+    "karma-mocha": "^2.0.1",
+    "lint-staged": "^15.2.2",
+    "mocha": "^10.3.0",
+    "module-from-string": "^3.3.0",
+    "node-fetch": "^3.3.2",
+    "nyc": "^15.1.0",
+    "prettier": "3.0.3",
+    "re2": "^1.20.9",
+    "rollup": "^2.79.1",
+    "rollup-plugin-terser": "^7.0.2",
+    "ts-node": "^10.9.2",
+    "tsify": "^5.0.4",
+    "typescript": "5.3.3",
+    "uri-js": "^4.4.1"
+  },
+  "collective": {
+    "type": "opencollective",
+    "url": "https://opencollective.com/ajv"
+  },
+  "funding": {
+    "type": "github",
+    "url": "https://github.com/sponsors/epoberezkin"
+  },
+  "prettier": "@ajv-validator/config/prettierrc.json",
+  "husky": {
+    "hooks": {
+      "pre-commit": "lint-staged && npm test"
+    }
+  },
+  "lint-staged": {
+    "*.{json,yaml,js,ts}": "prettier --write"
+  }
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/LICENSE b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/LICENSE
new file mode 100644
index 000000000..7f1543566
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/LICENSE
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2017 Evgeny Poberezkin
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/README.md b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/README.md
new file mode 100644
index 000000000..d3f4ffcc3
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/README.md
@@ -0,0 +1,96 @@
+# fast-deep-equal
+The fastest deep equal with ES6 Map, Set and Typed arrays support.
+
+[![Build Status](https://travis-ci.org/epoberezkin/fast-deep-equal.svg?branch=master)](https://travis-ci.org/epoberezkin/fast-deep-equal)
+[![npm](https://img.shields.io/npm/v/fast-deep-equal.svg)](https://www.npmjs.com/package/fast-deep-equal)
+[![Coverage Status](https://coveralls.io/repos/github/epoberezkin/fast-deep-equal/badge.svg?branch=master)](https://coveralls.io/github/epoberezkin/fast-deep-equal?branch=master)
+
+
+## Install
+
+```bash
+npm install fast-deep-equal
+```
+
+
+## Features
+
+- ES5 compatible
+- works in node.js (8+) and browsers (IE9+)
+- checks equality of Date and RegExp objects by value.
+
+ES6 equal (`require('fast-deep-equal/es6')`) also supports:
+- Maps
+- Sets
+- Typed arrays
+
+
+## Usage
+
+```javascript
+var equal = require('fast-deep-equal');
+console.log(equal({foo: 'bar'}, {foo: 'bar'})); // true
+```
+
+To support ES6 Maps, Sets and Typed arrays equality use:
+
+```javascript
+var equal = require('fast-deep-equal/es6');
+console.log(equal(Int16Array([1, 2]), Int16Array([1, 2]))); // true
+```
+
+To use with React (avoiding the traversal of React elements' _owner
+property that contains circular references and is not needed when
+comparing the elements - borrowed from [react-fast-compare](https://github.com/FormidableLabs/react-fast-compare)):
+
+```javascript
+var equal = require('fast-deep-equal/react');
+var equal = require('fast-deep-equal/es6/react');
+```
+
+
+## Performance benchmark
+
+Node.js v12.6.0:
+
+```
+fast-deep-equal x 261,950 ops/sec ¬±0.52% (89 runs sampled)
+fast-deep-equal/es6 x 212,991 ops/sec ¬±0.34% (92 runs sampled)
+fast-equals x 230,957 ops/sec ¬±0.83% (85 runs sampled)
+nano-equal x 187,995 ops/sec ¬±0.53% (88 runs sampled)
+shallow-equal-fuzzy x 138,302 ops/sec ¬±0.49% (90 runs sampled)
+underscore.isEqual x 74,423 ops/sec ¬±0.38% (89 runs sampled)
+lodash.isEqual x 36,637 ops/sec ¬±0.72% (90 runs sampled)
+deep-equal x 2,310 ops/sec ¬±0.37% (90 runs sampled)
+deep-eql x 35,312 ops/sec ¬±0.67% (91 runs sampled)
+ramda.equals x 12,054 ops/sec ¬±0.40% (91 runs sampled)
+util.isDeepStrictEqual x 46,440 ops/sec ¬±0.43% (90 runs sampled)
+assert.deepStrictEqual x 456 ops/sec ¬±0.71% (88 runs sampled)
+
+The fastest is fast-deep-equal
+```
+
+To run benchmark (requires node.js 6+):
+
+```bash
+npm run benchmark
+```
+
+__Please note__: this benchmark runs against the available test cases. To choose the most performant library for your application, it is recommended to benchmark against your data and to NOT expect this benchmark to reflect the performance difference in your application.
+
+
+## Enterprise support
+
+fast-deep-equal package is a part of [Tidelift enterprise subscription](https://tidelift.com/subscription/pkg/npm-fast-deep-equal?utm_source=npm-fast-deep-equal&utm_medium=referral&utm_campaign=enterprise&utm_term=repo) - it provides a centralised commercial support to open-source software users, in addition to the support provided by software maintainers.
+
+
+## Security contact
+
+To report a security vulnerability, please use the
+[Tidelift security contact](https://tidelift.com/security).
+Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerability via GitHub issues.
+
+
+## License
+
+[MIT](https://github.com/epoberezkin/fast-deep-equal/blob/master/LICENSE)
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.d.ts
new file mode 100644
index 000000000..c7eb9c796
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.d.ts
@@ -0,0 +1,2 @@
+declare const equal: (a: any, b: any) => boolean;
+export = equal;
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.js b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.js
new file mode 100644
index 000000000..d980be257
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.js
@@ -0,0 +1,72 @@
+'use strict';
+
+// do not edit .js files directly - edit src/index.jst
+
+
+  var envHasBigInt64Array = typeof BigInt64Array !== 'undefined';
+
+
+module.exports = function equal(a, b) {
+  if (a === b) return true;
+
+  if (a && b && typeof a == 'object' && typeof b == 'object') {
+    if (a.constructor !== b.constructor) return false;
+
+    var length, i, keys;
+    if (Array.isArray(a)) {
+      length = a.length;
+      if (length != b.length) return false;
+      for (i = length; i-- !== 0;)
+        if (!equal(a[i], b[i])) return false;
+      return true;
+    }
+
+
+    if ((a instanceof Map) && (b instanceof Map)) {
+      if (a.size !== b.size) return false;
+      for (i of a.entries())
+        if (!b.has(i[0])) return false;
+      for (i of a.entries())
+        if (!equal(i[1], b.get(i[0]))) return false;
+      return true;
+    }
+
+    if ((a instanceof Set) && (b instanceof Set)) {
+      if (a.size !== b.size) return false;
+      for (i of a.entries())
+        if (!b.has(i[0])) return false;
+      return true;
+    }
+
+    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
+      length = a.length;
+      if (length != b.length) return false;
+      for (i = length; i-- !== 0;)
+        if (a[i] !== b[i]) return false;
+      return true;
+    }
+
+
+    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
+    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
+    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
+
+    keys = Object.keys(a);
+    length = keys.length;
+    if (length !== Object.keys(b).length) return false;
+
+    for (i = length; i-- !== 0;)
+      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
+
+    for (i = length; i-- !== 0;) {
+      var key = keys[i];
+
+      if (!equal(a[key], b[key])) return false;
+    }
+
+    return true;
+  }
+
+  // true if both NaN, false otherwise
+  return a!==a && b!==b;
+};
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.d.ts
new file mode 100644
index 000000000..c7eb9c796
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.d.ts
@@ -0,0 +1,2 @@
+declare const equal: (a: any, b: any) => boolean;
+export = equal;
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.js b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.js
new file mode 100644
index 000000000..98e2f9b71
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.js
@@ -0,0 +1,79 @@
+'use strict';
+
+// do not edit .js files directly - edit src/index.jst
+
+
+  var envHasBigInt64Array = typeof BigInt64Array !== 'undefined';
+
+
+module.exports = function equal(a, b) {
+  if (a === b) return true;
+
+  if (a && b && typeof a == 'object' && typeof b == 'object') {
+    if (a.constructor !== b.constructor) return false;
+
+    var length, i, keys;
+    if (Array.isArray(a)) {
+      length = a.length;
+      if (length != b.length) return false;
+      for (i = length; i-- !== 0;)
+        if (!equal(a[i], b[i])) return false;
+      return true;
+    }
+
+
+    if ((a instanceof Map) && (b instanceof Map)) {
+      if (a.size !== b.size) return false;
+      for (i of a.entries())
+        if (!b.has(i[0])) return false;
+      for (i of a.entries())
+        if (!equal(i[1], b.get(i[0]))) return false;
+      return true;
+    }
+
+    if ((a instanceof Set) && (b instanceof Set)) {
+      if (a.size !== b.size) return false;
+      for (i of a.entries())
+        if (!b.has(i[0])) return false;
+      return true;
+    }
+
+    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
+      length = a.length;
+      if (length != b.length) return false;
+      for (i = length; i-- !== 0;)
+        if (a[i] !== b[i]) return false;
+      return true;
+    }
+
+
+    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
+    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
+    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
+
+    keys = Object.keys(a);
+    length = keys.length;
+    if (length !== Object.keys(b).length) return false;
+
+    for (i = length; i-- !== 0;)
+      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
+
+    for (i = length; i-- !== 0;) {
+      var key = keys[i];
+
+      if (key === '_owner' && a.$$typeof) {
+        // React-specific: avoid traversing React elements' _owner.
+        //  _owner contains circular references
+        // and is not needed when comparing the actual elements (and not their owners)
+        continue;
+      }
+
+      if (!equal(a[key], b[key])) return false;
+    }
+
+    return true;
+  }
+
+  // true if both NaN, false otherwise
+  return a!==a && b!==b;
+};
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.d.ts
new file mode 100644
index 000000000..3c042caa7
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.d.ts
@@ -0,0 +1,4 @@
+declare module 'fast-deep-equal' {
+    const equal: (a: any, b: any) => boolean;
+    export = equal;
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.js b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.js
new file mode 100644
index 000000000..30dd1ba78
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.js
@@ -0,0 +1,46 @@
+'use strict';
+
+// do not edit .js files directly - edit src/index.jst
+
+
+
+module.exports = function equal(a, b) {
+  if (a === b) return true;
+
+  if (a && b && typeof a == 'object' && typeof b == 'object') {
+    if (a.constructor !== b.constructor) return false;
+
+    var length, i, keys;
+    if (Array.isArray(a)) {
+      length = a.length;
+      if (length != b.length) return false;
+      for (i = length; i-- !== 0;)
+        if (!equal(a[i], b[i])) return false;
+      return true;
+    }
+
+
+
+    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
+    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
+    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
+
+    keys = Object.keys(a);
+    length = keys.length;
+    if (length !== Object.keys(b).length) return false;
+
+    for (i = length; i-- !== 0;)
+      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
+
+    for (i = length; i-- !== 0;) {
+      var key = keys[i];
+
+      if (!equal(a[key], b[key])) return false;
+    }
+
+    return true;
+  }
+
+  // true if both NaN, false otherwise
+  return a!==a && b!==b;
+};
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/package.json b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/package.json
new file mode 100644
index 000000000..3cfe66c68
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/package.json
@@ -0,0 +1,61 @@
+{
+  "name": "fast-deep-equal",
+  "version": "3.1.3",
+  "description": "Fast deep equal",
+  "main": "index.js",
+  "scripts": {
+    "eslint": "eslint *.js benchmark/*.js spec/*.js",
+    "build": "node build",
+    "benchmark": "npm i && npm run build && cd ./benchmark && npm i && node ./",
+    "test-spec": "mocha spec/*.spec.js -R spec",
+    "test-cov": "nyc npm run test-spec",
+    "test-ts": "tsc --target ES5 --noImplicitAny index.d.ts",
+    "test": "npm run build && npm run eslint && npm run test-ts && npm run test-cov",
+    "prepublish": "npm run build"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/epoberezkin/fast-deep-equal.git"
+  },
+  "keywords": [
+    "fast",
+    "equal",
+    "deep-equal"
+  ],
+  "author": "Evgeny Poberezkin",
+  "license": "MIT",
+  "bugs": {
+    "url": "https://github.com/epoberezkin/fast-deep-equal/issues"
+  },
+  "homepage": "https://github.com/epoberezkin/fast-deep-equal#readme",
+  "devDependencies": {
+    "coveralls": "^3.1.0",
+    "dot": "^1.1.2",
+    "eslint": "^7.2.0",
+    "mocha": "^7.2.0",
+    "nyc": "^15.1.0",
+    "pre-commit": "^1.2.2",
+    "react": "^16.12.0",
+    "react-test-renderer": "^16.12.0",
+    "sinon": "^9.0.2",
+    "typescript": "^3.9.5"
+  },
+  "nyc": {
+    "exclude": [
+      "**/spec/**",
+      "node_modules"
+    ],
+    "reporter": [
+      "lcov",
+      "text-summary"
+    ]
+  },
+  "files": [
+    "index.js",
+    "index.d.ts",
+    "react.js",
+    "react.d.ts",
+    "es6/"
+  ],
+  "types": "index.d.ts"
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.d.ts
new file mode 100644
index 000000000..c7eb9c796
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.d.ts
@@ -0,0 +1,2 @@
+declare const equal: (a: any, b: any) => boolean;
+export = equal;
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.js b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.js
new file mode 100644
index 000000000..3489b9833
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.js
@@ -0,0 +1,53 @@
+'use strict';
+
+// do not edit .js files directly - edit src/index.jst
+
+
+
+module.exports = function equal(a, b) {
+  if (a === b) return true;
+
+  if (a && b && typeof a == 'object' && typeof b == 'object') {
+    if (a.constructor !== b.constructor) return false;
+
+    var length, i, keys;
+    if (Array.isArray(a)) {
+      length = a.length;
+      if (length != b.length) return false;
+      for (i = length; i-- !== 0;)
+        if (!equal(a[i], b[i])) return false;
+      return true;
+    }
+
+
+
+    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
+    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
+    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
+
+    keys = Object.keys(a);
+    length = keys.length;
+    if (length !== Object.keys(b).length) return false;
+
+    for (i = length; i-- !== 0;)
+      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
+
+    for (i = length; i-- !== 0;) {
+      var key = keys[i];
+
+      if (key === '_owner' && a.$$typeof) {
+        // React-specific: avoid traversing React elements' _owner.
+        //  _owner contains circular references
+        // and is not needed when comparing the actual elements (and not their owners)
+        continue;
+      }
+
+      if (!equal(a[key], b[key])) return false;
+    }
+
+    return true;
+  }
+
+  // true if both NaN, false otherwise
+  return a!==a && b!==b;
+};
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.gitattributes b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.gitattributes
new file mode 100644
index 000000000..a0e7df931
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.gitattributes
@@ -0,0 +1,2 @@
+# Set default behavior to automatically convert line endings
+* text=auto eol=lf
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/.stale.yml b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/.stale.yml
new file mode 100644
index 000000000..2ee12691a
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/.stale.yml
@@ -0,0 +1,21 @@
+# Number of days of inactivity before an issue becomes stale
+daysUntilStale: 15
+# Number of days of inactivity before a stale issue is closed
+daysUntilClose: 7
+# Issues with these labels will never be considered stale
+exemptLabels:
+  - "discussion"
+  - "feature request"
+  - "bug"
+  - "help wanted"
+  - "plugin suggestion"
+  - "good first issue"
+# Label to use when marking an issue as stale
+staleLabel: stale
+# Comment to post when marking an issue as stale. Set to `false` to disable
+markComment: >
+  This issue has been automatically marked as stale because it has not had
+  recent activity. It will be closed if no further activity occurs. Thank you
+  for your contributions.
+# Comment to post when closing a stale issue. Set to `false` to disable
+closeComment: false
\ No newline at end of file
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/dependabot.yml b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/dependabot.yml
new file mode 100644
index 000000000..35d66ca7a
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/dependabot.yml
@@ -0,0 +1,13 @@
+version: 2
+updates:
+  - package-ecosystem: "github-actions"
+    directory: "/"
+    schedule:
+      interval: "monthly"
+    open-pull-requests-limit: 10
+
+  - package-ecosystem: "npm"
+    directory: "/"
+    schedule:
+      interval: "monthly"
+    open-pull-requests-limit: 10
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/tests_checker.yml b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/tests_checker.yml
new file mode 100644
index 000000000..769469b2a
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/tests_checker.yml
@@ -0,0 +1,8 @@
+comment: |
+  Hello! Thank you for contributing!
+  It appears that you have changed the code, but the tests that verify your change are missing. Could you please add them?
+fileExtensions:
+  - '.ts'
+  - '.js'
+
+testDir: 'test'
\ No newline at end of file
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/ci.yml b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/ci.yml
new file mode 100644
index 000000000..588eca01c
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/ci.yml
@@ -0,0 +1,58 @@
+name: CI
+
+on:
+  push:
+    branches:
+     - main
+     - master
+     - next
+     - 'v*'
+    paths-ignore:
+      - 'docs/**'
+      - '*.md'
+  pull_request:
+    paths-ignore:
+      - 'docs/**'
+      - '*.md'
+
+jobs:
+  test-regression-check-node10:
+    name: Test compatibility with Node.js 10
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v4
+        with:
+          persist-credentials: false
+
+      - uses: actions/setup-node@v4
+        with:
+          node-version: '10'
+          cache: 'npm'
+          cache-dependency-path: package.json
+          check-latest: true
+
+      - name: Install
+        run: |
+          npm install --ignore-scripts
+
+      - name: Copy project as fast-uri to node_node_modules
+        run: |
+          rm -rf ./node_modules/fast-uri/lib &&
+          rm -rf ./node_modules/fast-uri/index.js &&
+          cp -r ./lib ./node_modules/fast-uri/lib &&
+          cp ./index.js ./node_modules/fast-uri/index.js
+
+      - name: Run tests
+        run: |
+          npm run test:unit
+        env:
+          NODE_OPTIONS: no-network-family-autoselection
+
+  test:
+    needs:
+      - test-regression-check-node10
+    uses: fastify/workflows/.github/workflows/plugins-ci.yml@v5
+    with:
+      license-check: true
+      lint: true
+      node-versions: '["16", "18", "20", "22"]'
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/package-manager-ci.yml b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/package-manager-ci.yml
new file mode 100644
index 000000000..1ea2c6d8e
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/package-manager-ci.yml
@@ -0,0 +1,20 @@
+name: package-manager-ci
+
+on:
+  push:
+    branches:
+     - main
+     - master
+     - next
+     - 'v*'
+    paths-ignore:
+      - 'docs/**'
+      - '*.md'
+  pull_request:
+    paths-ignore:
+      - 'docs/**'
+      - '*.md'
+
+jobs:
+  test:
+    uses: fastify/workflows/.github/workflows/plugins-ci-package-manager.yml@v5
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/LICENSE b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/LICENSE
new file mode 100644
index 000000000..a8d3465e3
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/LICENSE
@@ -0,0 +1,30 @@
+Copyright (c) 2021 The Fastify Team
+Copyright (c) 2011-2021, Gary Court until https://github.com/garycourt/uri-js/commit/a1acf730b4bba3f1097c9f52e7d9d3aba8cdcaae
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+    * The names of any contributors may not be used to endorse or promote
+      products derived from this software without specific prior written
+      permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY
+DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
+(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
+LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
+SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+
+                                  *   *   *
+
+The complete list of contributors can be found at:
+- https://github.com/garycourt/uri-js/graphs/contributors
\ No newline at end of file
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/README.md b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/README.md
new file mode 100644
index 000000000..ff429baa4
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/README.md
@@ -0,0 +1,130 @@
+# fast-uri
+
+<div align="center">
+
+[![NPM version](https://img.shields.io/npm/v/fast-uri.svg?style=flat)](https://www.npmjs.com/package/fast-uri)
+[![CI](https://github.com/fastify/fast-uri/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/fastify/fast-uri/actions/workflows/ci.yml)
+[![neostandard javascript style](https://img.shields.io/badge/code_style-neostandard-brightgreen?style=flat)](https://github.com/neostandard/neostandard)
+
+</div>
+
+Dependency-free RFC 3986 URI toolbox.
+
+## Usage
+
+## Options
+
+All of the above functions can accept an additional options argument that is an object that can contain one or more of the following properties:
+
+*	`scheme` (string)
+	Indicates the scheme that the URI should be treated as, overriding the URI's normal scheme parsing behavior.
+
+*	`reference` (string)
+	If set to `"suffix"`, it indicates that the URI is in the suffix format and the parser will use the option's `scheme` property to determine the URI's scheme.
+
+*	`tolerant` (boolean, false)
+	If set to `true`, the parser will relax URI resolving rules.
+
+*	`absolutePath` (boolean, false)
+	If set to `true`, the serializer will not resolve a relative `path` component.
+
+*	`unicodeSupport` (boolean, false)
+	If set to `true`, the parser will unescape non-ASCII characters in the parsed output as per [RFC 3987](http://www.ietf.org/rfc/rfc3987.txt).
+
+*	`domainHost` (boolean, false)
+	If set to `true`, the library will treat the `host` component as a domain name, and convert IDNs (International Domain Names) as per [RFC 5891](http://www.ietf.org/rfc/rfc5891.txt).
+
+### Parse
+
+```js
+const uri = require('fast-uri')
+uri.parse('uri://user:pass@example.com:123/one/two.three?q1=a1&q2=a2#body')
+// Output
+{
+  scheme: "uri",
+  userinfo: "user:pass",
+  host: "example.com",
+  port: 123,
+  path: "/one/two.three",
+  query: "q1=a1&q2=a2",
+  fragment: "body"
+}
+```
+
+### Serialize
+
+```js
+const uri = require('fast-uri')
+uri.serialize({scheme: "http", host: "example.com", fragment: "footer"})
+// Output
+"http://example.com/#footer"
+
+```
+
+### Resolve
+
+```js
+const uri = require('fast-uri')
+uri.resolve("uri://a/b/c/d?q", "../../g")
+// Output
+"uri://a/g"
+```
+
+### Equal
+
+```js
+const uri = require('fast-uri')
+uri.equal("example://a/b/c/%7Bfoo%7D", "eXAMPLE://a/./b/../b/%63/%7bfoo%7d")
+// Output
+true
+```
+
+## Scheme supports
+
+fast-uri supports inserting custom [scheme](http://en.wikipedia.org/wiki/URI_scheme)-dependent processing rules. Currently, fast-uri has built-in support for the following schemes:
+
+*	http \[[RFC 2616](http://www.ietf.org/rfc/rfc2616.txt)\]
+*	https \[[RFC 2818](http://www.ietf.org/rfc/rfc2818.txt)\]
+*	ws \[[RFC 6455](http://www.ietf.org/rfc/rfc6455.txt)\]
+*	wss \[[RFC 6455](http://www.ietf.org/rfc/rfc6455.txt)\]
+*	urn \[[RFC 2141](http://www.ietf.org/rfc/rfc2141.txt)\]
+*	urn:uuid \[[RFC 4122](http://www.ietf.org/rfc/rfc4122.txt)\]
+
+
+## Benchmarks
+
+```
+fast-uri: parse domain x 1,306,864 ops/sec ¬±0.31% (100 runs sampled)
+urijs: parse domain x 483,001 ops/sec ¬±0.09% (99 runs sampled)
+WHATWG URL: parse domain x 862,461 ops/sec ¬±0.18% (97 runs sampled)
+fast-uri: parse IPv4 x 2,381,452 ops/sec ¬±0.26% (96 runs sampled)
+urijs: parse IPv4 x 384,705 ops/sec ¬±0.34% (99 runs sampled)
+WHATWG URL: parse IPv4 NOT SUPPORTED
+fast-uri: parse IPv6 x 923,519 ops/sec ¬±0.09% (100 runs sampled)
+urijs: parse IPv6 x 289,070 ops/sec ¬±0.07% (95 runs sampled)
+WHATWG URL: parse IPv6 NOT SUPPORTED
+fast-uri: parse URN x 2,596,395 ops/sec ¬±0.42% (98 runs sampled)
+urijs: parse URN x 1,152,412 ops/sec ¬±0.09% (97 runs sampled)
+WHATWG URL: parse URN x 1,183,307 ops/sec ¬±0.38% (100 runs sampled)
+fast-uri: parse URN uuid x 1,666,861 ops/sec ¬±0.10% (98 runs sampled)
+urijs: parse URN uuid x 852,724 ops/sec ¬±0.17% (95 runs sampled)
+WHATWG URL: parse URN uuid NOT SUPPORTED
+fast-uri: serialize uri x 1,741,499 ops/sec ¬±0.57% (95 runs sampled)
+urijs: serialize uri x 389,014 ops/sec ¬±0.28% (93 runs sampled)
+fast-uri: serialize IPv6 x 441,095 ops/sec ¬±0.37% (97 runs sampled)
+urijs: serialize IPv6 x 255,443 ops/sec ¬±0.58% (94 runs sampled)
+fast-uri: serialize ws x 1,448,667 ops/sec ¬±0.25% (97 runs sampled)
+urijs: serialize ws x 352,884 ops/sec ¬±0.08% (96 runs sampled)
+fast-uri: resolve x 340,084 ops/sec ¬±0.98% (98 runs sampled)
+urijs: resolve x 225,759 ops/sec ¬±0.37% (95 runs sampled)
+```
+
+## TODO
+
+- [ ] Support MailTo
+- [ ] Be 100% iso compatible with uri-js
+- [ ] Add browser test stack
+
+## License
+
+Licensed under [BSD-3-Clause](./LICENSE).
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/benchmark.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/benchmark.js
new file mode 100644
index 000000000..5eed73e07
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/benchmark.js
@@ -0,0 +1,105 @@
+'use strict'
+
+const benchmark = require('benchmark')
+const suite = new benchmark.Suite()
+const fasturi = require('./')
+const urijs = require('uri-js')
+
+const base = 'uri://a/b/c/d;p?q'
+
+const domain = 'https://example.com/foo#bar$fiz'
+const ipv4 = '//10.10.10.10'
+const ipv6 = '//[2001:db8::7]'
+const urn = 'urn:foo:a123,456'
+const urnuuid = 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
+
+// Initialization as there is a lot to parse at first
+// eg: regexes
+fasturi.parse(domain)
+urijs.parse(domain)
+
+suite.add('fast-uri: parse domain', function () {
+  fasturi.parse(domain)
+})
+suite.add('urijs: parse domain', function () {
+  urijs.parse(domain)
+})
+suite.add('WHATWG URL: parse domain', function () {
+  // eslint-disable-next-line
+  new URL(domain)
+})
+suite.add('fast-uri: parse IPv4', function () {
+  fasturi.parse(ipv4)
+})
+suite.add('urijs: parse IPv4', function () {
+  urijs.parse(ipv4)
+})
+suite.add('fast-uri: parse IPv6', function () {
+  fasturi.parse(ipv6)
+})
+suite.add('urijs: parse IPv6', function () {
+  urijs.parse(ipv6)
+})
+suite.add('fast-uri: parse URN', function () {
+  fasturi.parse(urn)
+})
+suite.add('urijs: parse URN', function () {
+  urijs.parse(urn)
+})
+suite.add('WHATWG URL: parse URN', function () {
+  // eslint-disable-next-line
+  new URL(urn)
+})
+suite.add('fast-uri: parse URN uuid', function () {
+  fasturi.parse(urnuuid)
+})
+suite.add('urijs: parse URN uuid', function () {
+  urijs.parse(urnuuid)
+})
+suite.add('fast-uri: serialize uri', function () {
+  fasturi.serialize({
+    scheme: 'uri',
+    userinfo: 'foo:bar',
+    host: 'example.com',
+    port: 1,
+    path: 'path',
+    query: 'query',
+    fragment: 'fragment'
+  })
+})
+suite.add('urijs: serialize uri', function () {
+  urijs.serialize({
+    scheme: 'uri',
+    userinfo: 'foo:bar',
+    host: 'example.com',
+    port: 1,
+    path: 'path',
+    query: 'query',
+    fragment: 'fragment'
+  })
+})
+suite.add('fast-uri: serialize IPv6', function () {
+  fasturi.serialize({ host: '2606:2800:220:1:248:1893:25c8:1946' })
+})
+suite.add('urijs: serialize IPv6', function () {
+  urijs.serialize({ host: '2606:2800:220:1:248:1893:25c8:1946' })
+})
+suite.add('fast-uri: serialize ws', function () {
+  fasturi.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: true })
+})
+suite.add('urijs: serialize ws', function () {
+  urijs.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: true })
+})
+suite.add('fast-uri: resolve', function () {
+  fasturi.resolve(base, '../../../g')
+})
+suite.add('urijs: resolve', function () {
+  urijs.resolve(base, '../../../g')
+})
+suite.on('cycle', cycle)
+
+suite.run()
+
+function cycle (e) {
+  console.log(e.target.toString())
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/eslint.config.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/eslint.config.js
new file mode 100644
index 000000000..89fd678fe
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/eslint.config.js
@@ -0,0 +1,6 @@
+'use strict'
+
+module.exports = require('neostandard')({
+  ignores: require('neostandard').resolveIgnoresFromGitignore(),
+  ts: true
+})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/index.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/index.js
new file mode 100644
index 000000000..ab6c477c5
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/index.js
@@ -0,0 +1,303 @@
+'use strict'
+
+const { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = require('./lib/utils')
+const SCHEMES = require('./lib/schemes')
+
+function normalize (uri, options) {
+  if (typeof uri === 'string') {
+    uri = serialize(parse(uri, options), options)
+  } else if (typeof uri === 'object') {
+    uri = parse(serialize(uri, options), options)
+  }
+  return uri
+}
+
+function resolve (baseURI, relativeURI, options) {
+  const schemelessOptions = Object.assign({ scheme: 'null' }, options)
+  const resolved = resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true)
+  return serialize(resolved, { ...schemelessOptions, skipEscape: true })
+}
+
+function resolveComponents (base, relative, options, skipNormalization) {
+  const target = {}
+  if (!skipNormalization) {
+    base = parse(serialize(base, options), options) // normalize base components
+    relative = parse(serialize(relative, options), options) // normalize relative components
+  }
+  options = options || {}
+
+  if (!options.tolerant && relative.scheme) {
+    target.scheme = relative.scheme
+    // target.authority = relative.authority;
+    target.userinfo = relative.userinfo
+    target.host = relative.host
+    target.port = relative.port
+    target.path = removeDotSegments(relative.path || '')
+    target.query = relative.query
+  } else {
+    if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
+      // target.authority = relative.authority;
+      target.userinfo = relative.userinfo
+      target.host = relative.host
+      target.port = relative.port
+      target.path = removeDotSegments(relative.path || '')
+      target.query = relative.query
+    } else {
+      if (!relative.path) {
+        target.path = base.path
+        if (relative.query !== undefined) {
+          target.query = relative.query
+        } else {
+          target.query = base.query
+        }
+      } else {
+        if (relative.path.charAt(0) === '/') {
+          target.path = removeDotSegments(relative.path)
+        } else {
+          if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
+            target.path = '/' + relative.path
+          } else if (!base.path) {
+            target.path = relative.path
+          } else {
+            target.path = base.path.slice(0, base.path.lastIndexOf('/') + 1) + relative.path
+          }
+          target.path = removeDotSegments(target.path)
+        }
+        target.query = relative.query
+      }
+      // target.authority = base.authority;
+      target.userinfo = base.userinfo
+      target.host = base.host
+      target.port = base.port
+    }
+    target.scheme = base.scheme
+  }
+
+  target.fragment = relative.fragment
+
+  return target
+}
+
+function equal (uriA, uriB, options) {
+  if (typeof uriA === 'string') {
+    uriA = unescape(uriA)
+    uriA = serialize(normalizeComponentEncoding(parse(uriA, options), true), { ...options, skipEscape: true })
+  } else if (typeof uriA === 'object') {
+    uriA = serialize(normalizeComponentEncoding(uriA, true), { ...options, skipEscape: true })
+  }
+
+  if (typeof uriB === 'string') {
+    uriB = unescape(uriB)
+    uriB = serialize(normalizeComponentEncoding(parse(uriB, options), true), { ...options, skipEscape: true })
+  } else if (typeof uriB === 'object') {
+    uriB = serialize(normalizeComponentEncoding(uriB, true), { ...options, skipEscape: true })
+  }
+
+  return uriA.toLowerCase() === uriB.toLowerCase()
+}
+
+function serialize (cmpts, opts) {
+  const components = {
+    host: cmpts.host,
+    scheme: cmpts.scheme,
+    userinfo: cmpts.userinfo,
+    port: cmpts.port,
+    path: cmpts.path,
+    query: cmpts.query,
+    nid: cmpts.nid,
+    nss: cmpts.nss,
+    uuid: cmpts.uuid,
+    fragment: cmpts.fragment,
+    reference: cmpts.reference,
+    resourceName: cmpts.resourceName,
+    secure: cmpts.secure,
+    error: ''
+  }
+  const options = Object.assign({}, opts)
+  const uriTokens = []
+
+  // find scheme handler
+  const schemeHandler = SCHEMES[(options.scheme || components.scheme || '').toLowerCase()]
+
+  // perform scheme specific serialization
+  if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options)
+
+  if (components.path !== undefined) {
+    if (!options.skipEscape) {
+      components.path = escape(components.path)
+
+      if (components.scheme !== undefined) {
+        components.path = components.path.split('%3A').join(':')
+      }
+    } else {
+      components.path = unescape(components.path)
+    }
+  }
+
+  if (options.reference !== 'suffix' && components.scheme) {
+    uriTokens.push(components.scheme, ':')
+  }
+
+  const authority = recomposeAuthority(components)
+  if (authority !== undefined) {
+    if (options.reference !== 'suffix') {
+      uriTokens.push('//')
+    }
+
+    uriTokens.push(authority)
+
+    if (components.path && components.path.charAt(0) !== '/') {
+      uriTokens.push('/')
+    }
+  }
+  if (components.path !== undefined) {
+    let s = components.path
+
+    if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
+      s = removeDotSegments(s)
+    }
+
+    if (authority === undefined) {
+      s = s.replace(/^\/\//u, '/%2F') // don't allow the path to start with "//"
+    }
+
+    uriTokens.push(s)
+  }
+
+  if (components.query !== undefined) {
+    uriTokens.push('?', components.query)
+  }
+
+  if (components.fragment !== undefined) {
+    uriTokens.push('#', components.fragment)
+  }
+  return uriTokens.join('')
+}
+
+const hexLookUp = Array.from({ length: 127 }, (_v, k) => /[^!"$&'()*+,\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)))
+
+function nonSimpleDomain (value) {
+  let code = 0
+  for (let i = 0, len = value.length; i < len; ++i) {
+    code = value.charCodeAt(i)
+    if (code > 126 || hexLookUp[code]) {
+      return true
+    }
+  }
+  return false
+}
+
+const URI_PARSE = /^(?:([^#/:?]+):)?(?:\/\/((?:([^#/?@]*)@)?(\[[^#/?\]]+\]|[^#/:?]*)(?::(\d*))?))?([^#?]*)(?:\?([^#]*))?(?:#((?:.|[\n\r])*))?/u
+
+function parse (uri, opts) {
+  const options = Object.assign({}, opts)
+  const parsed = {
+    scheme: undefined,
+    userinfo: undefined,
+    host: '',
+    port: undefined,
+    path: '',
+    query: undefined,
+    fragment: undefined
+  }
+  const gotEncoding = uri.indexOf('%') !== -1
+  let isIP = false
+  if (options.reference === 'suffix') uri = (options.scheme ? options.scheme + ':' : '') + '//' + uri
+
+  const matches = uri.match(URI_PARSE)
+
+  if (matches) {
+    // store each component
+    parsed.scheme = matches[1]
+    parsed.userinfo = matches[3]
+    parsed.host = matches[4]
+    parsed.port = parseInt(matches[5], 10)
+    parsed.path = matches[6] || ''
+    parsed.query = matches[7]
+    parsed.fragment = matches[8]
+
+    // fix port number
+    if (isNaN(parsed.port)) {
+      parsed.port = matches[5]
+    }
+    if (parsed.host) {
+      const ipv4result = normalizeIPv4(parsed.host)
+      if (ipv4result.isIPV4 === false) {
+        const ipv6result = normalizeIPv6(ipv4result.host)
+        parsed.host = ipv6result.host.toLowerCase()
+        isIP = ipv6result.isIPV6
+      } else {
+        parsed.host = ipv4result.host
+        isIP = true
+      }
+    }
+    if (parsed.scheme === undefined && parsed.userinfo === undefined && parsed.host === undefined && parsed.port === undefined && parsed.query === undefined && !parsed.path) {
+      parsed.reference = 'same-document'
+    } else if (parsed.scheme === undefined) {
+      parsed.reference = 'relative'
+    } else if (parsed.fragment === undefined) {
+      parsed.reference = 'absolute'
+    } else {
+      parsed.reference = 'uri'
+    }
+
+    // check for reference errors
+    if (options.reference && options.reference !== 'suffix' && options.reference !== parsed.reference) {
+      parsed.error = parsed.error || 'URI is not a ' + options.reference + ' reference.'
+    }
+
+    // find scheme handler
+    const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || '').toLowerCase()]
+
+    // check if scheme can't handle IRIs
+    if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
+      // if host component is a domain name
+      if (parsed.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost)) && isIP === false && nonSimpleDomain(parsed.host)) {
+        // convert Unicode IDN -> ASCII IDN
+        try {
+          parsed.host = URL.domainToASCII(parsed.host.toLowerCase())
+        } catch (e) {
+          parsed.error = parsed.error || "Host's domain name can not be converted to ASCII: " + e
+        }
+      }
+      // convert IRI -> URI
+    }
+
+    if (!schemeHandler || (schemeHandler && !schemeHandler.skipNormalize)) {
+      if (gotEncoding && parsed.scheme !== undefined) {
+        parsed.scheme = unescape(parsed.scheme)
+      }
+      if (gotEncoding && parsed.host !== undefined) {
+        parsed.host = unescape(parsed.host)
+      }
+      if (parsed.path) {
+        parsed.path = escape(unescape(parsed.path))
+      }
+      if (parsed.fragment) {
+        parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment))
+      }
+    }
+
+    // perform scheme specific parsing
+    if (schemeHandler && schemeHandler.parse) {
+      schemeHandler.parse(parsed, options)
+    }
+  } else {
+    parsed.error = parsed.error || 'URI can not be parsed.'
+  }
+  return parsed
+}
+
+const fastUri = {
+  SCHEMES,
+  normalize,
+  resolve,
+  resolveComponents,
+  equal,
+  serialize,
+  parse
+}
+
+module.exports = fastUri
+module.exports.default = fastUri
+module.exports.fastUri = fastUri
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/package.json b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/package.json
new file mode 100644
index 000000000..7fc10990f
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/package.json
@@ -0,0 +1,68 @@
+{
+  "name": "fast-uri",
+  "description": "Dependency-free RFC 3986 URI toolbox",
+  "version": "3.0.6",
+  "main": "index.js",
+  "type": "commonjs",
+  "types": "types/index.d.ts",
+  "license": "BSD-3-Clause",
+  "author": "Vincent Le Goff <vince.legoff@gmail.com> (https://github.com/zekth)",
+  "contributors": [
+    {
+      "name": "Matteo Collina",
+      "email": "hello@matteocollina.com"
+    },
+    {
+      "name": "G√ºrg√ºn Dayƒ±oƒülu",
+      "email": "hey@gurgun.day",
+      "url": "https://heyhey.to/G"
+    },
+    {
+      "name": "Aras Abbasi",
+      "email": "aras.abbasi@gmail.com"
+    },
+    {
+      "name": "Frazer Smith",
+      "email": "frazer.dev@icloud.com",
+      "url": "https://github.com/fdawgs"
+    }
+  ],
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/fastify/fast-uri.git"
+  },
+  "bugs": {
+    "url": "https://github.com/fastify/fast-uri/issues"
+  },
+  "homepage": "https://github.com/fastify/fast-uri",
+  "funding": [
+    {
+      "type": "github",
+      "url": "https://github.com/sponsors/fastify"
+    },
+    {
+      "type": "opencollective",
+      "url": "https://opencollective.com/fastify"
+    }
+  ],
+  "scripts": {
+    "bench": "node benchmark.js",
+    "lint": "eslint",
+    "lint:fix": "eslint --fix",
+    "test": "npm run test:unit && npm run test:typescript",
+    "test:unit": "tape test/**/*.js",
+    "test:unit:dev": "npm run test:unit -- --coverage-report=html",
+    "test:typescript": "tsd"
+  },
+  "devDependencies": {
+    "@fastify/pre-commit": "^2.1.0",
+    "ajv": "^8.16.0",
+    "benchmark": "^2.1.4",
+    "coveralls": "^3.1.1",
+    "eslint": "^9.17.0",
+    "neostandard": "^0.12.0",
+    "tape": "^5.8.1",
+    "tsd": "^0.31.0",
+    "uri-js": "^4.4.1"
+  }
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/.gitkeep b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/.gitkeep
new file mode 100644
index 000000000..e69de29bb
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/ajv.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/ajv.test.js
new file mode 100644
index 000000000..e78c4d7f8
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/ajv.test.js
@@ -0,0 +1,39 @@
+const AJV = require('ajv')
+const fastUri = require('../')
+const ajv = new AJV({
+  uriResolver: fastUri // comment this line to see it works with uri-js
+})
+const test = require('tape')
+
+test('ajv', t => {
+  t.plan(1)
+  const schema = {
+    $ref: '#/definitions/Record%3Cstring%2CPerson%3E',
+    definitions: {
+      Person: {
+        type: 'object',
+        properties: {
+          firstName: {
+            type: 'string'
+          }
+        }
+      },
+      'Record<string,Person>': {
+        type: 'object',
+        additionalProperties: {
+          $ref: '#/definitions/Person'
+        }
+      }
+    }
+  }
+
+  const data = {
+    joe: {
+      firstName: 'Joe'
+    }
+
+  }
+
+  const validate = ajv.compile(schema)
+  t.ok(validate(data))
+})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/compatibility.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/compatibility.test.js
new file mode 100644
index 000000000..89886d17d
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/compatibility.test.js
@@ -0,0 +1,131 @@
+'use strict'
+
+const test = require('tape')
+const fastifyURI = require('../')
+const urijs = require('uri-js')
+
+test('compatibility Parse', (t) => {
+  const toParse = [
+    '//www.g.com/error\n/bleh/bleh',
+    'https://fastify.org',
+    '/definitions/Record%3Cstring%2CPerson%3E',
+    '//10.10.10.10',
+    // '//10.10.000.10', <-- not a valid URI per URI spec: https://datatracker.ietf.org/doc/html/rfc5954#section-4.1
+    '//[2001:db8::7%en0]',
+    '//[2001:dbZ::1]:80',
+    '//[2001:db8::1]:80',
+    '//[2001:db8::001]:80',
+    'uri://user:pass@example.com:123/one/two.three?q1=a1&q2=a2#body',
+    'http://user:pass@example.com:123/one/space in.url?q1=a1&q2=a2#body',
+    'http://User:Pass@example.com:123/one/space in.url?q1=a1&q2=a2#body',
+    'http://A%3AB@example.com:123/one/space',
+    '//[::ffff:129.144.52.38]',
+    'uri://10.10.10.10.example.com/en/process',
+    '//[2606:2800:220:1:248:1893:25c8:1946]/test',
+    'ws://example.com/chat',
+    'ws://example.com/foo?bar=baz',
+    'wss://example.com/?bar=baz',
+    'wss://example.com/chat',
+    'wss://example.com/foo?bar=baz',
+    'wss://example.com/?bar=baz',
+    'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6',
+    'urn:uuid:notauuid-7dec-11d0-a765-00a0c91e6bf6',
+    'urn:example:%D0%B0123,z456',
+    '//[2606:2800:220:1:248:1893:25c8:1946:43209]',
+    'http://foo.bar',
+    'http://',
+    '#/$defs/stringMap',
+    '#/$defs/string%20Map',
+    '#/$defs/string Map',
+    '//?json=%7B%22foo%22%3A%22bar%22%7D'
+    //  'mailto:chris@example.com'-203845,
+    //  'mailto:infobot@example.com?subject=current-issue',
+    //  'mailto:infobot@example.com?body=send%20current-issue',
+    //  'mailto:infobot@example.com?body=send%20current-issue%0D%0Asend%20index',
+    //  'mailto:list@example.org?In-Reply-To=%3C3469A91.D10AF4C@example.com%3E',
+    //  'mailto:majordomo@example.com?body=subscribe%20bamboo-l',
+    //  'mailto:joe@example.com?cc=bob@example.com&body=hello',
+    //  'mailto:gorby%25kremvax@example.com',
+    //  'mailto:unlikely%3Faddress@example.com?blat=foop',
+    //  'mailto:Mike%26family@example.org',
+    //  'mailto:%22not%40me%22@example.org',
+    //  'mailto:%22oh%5C%5Cno%22@example.org',
+    //  'mailto:%22%5C%5C%5C%22it\'s%5C%20ugly%5C%5C%5C%22%22@example.org',
+    //  'mailto:user@example.org?subject=caf%C3%A9',
+    //  'mailto:user@example.org?subject=%3D%3Futf-8%3FQ%3Fcaf%3DC3%3DA9%3F%3D',
+    //  'mailto:user@example.org?subject=%3D%3Fiso-8859-1%3FQ%3Fcaf%3DE9%3F%3D',
+    //  'mailto:user@example.org?subject=caf%C3%A9&body=caf%C3%A9',
+    //  'mailto:user@%E7%B4%8D%E8%B1%86.example.org?subject=Test&body=NATTO'
+  ]
+  toParse.forEach((x) => {
+    t.same(fastifyURI.parse(x), urijs.parse(x), 'Compatibility parse: ' + x)
+  })
+  t.end()
+})
+
+test('compatibility serialize', (t) => {
+  const toSerialize = [
+    { host: '10.10.10.10.example.com' },
+    { host: '2001:db8::7' },
+    { host: '::ffff:129.144.52.38' },
+    { host: '2606:2800:220:1:248:1893:25c8:1946' },
+    { host: '10.10.10.10.example.com' },
+    { host: '10.10.10.10' },
+    { path: '?query' },
+    { path: 'foo:bar' },
+    { path: '//path' },
+    {
+      scheme: 'uri',
+      host: 'example.com',
+      port: '9000'
+    },
+    {
+      scheme: 'uri',
+      userinfo: 'foo:bar',
+      host: 'example.com',
+      port: 1,
+      path: 'path',
+      query: 'query',
+      fragment: 'fragment'
+    },
+    {
+      scheme: '',
+      userinfo: '',
+      host: '',
+      port: 0,
+      path: '',
+      query: '',
+      fragment: ''
+    },
+    {
+      scheme: undefined,
+      userinfo: undefined,
+      host: undefined,
+      port: undefined,
+      path: undefined,
+      query: undefined,
+      fragment: undefined
+    },
+    { host: 'fe80::a%en1' },
+    { host: 'fe80::a%25en1' },
+    {
+      scheme: 'ws',
+      host: 'example.com',
+      resourceName: '/foo?bar',
+      secure: true
+    },
+    {
+      scheme: 'scheme',
+      path: 'with:colon'
+    }
+  ]
+  toSerialize.forEach((x) => {
+    const r = JSON.stringify(x)
+    t.same(
+      fastifyURI.serialize(x),
+      urijs.serialize(x),
+      'Compatibility serialize: ' + JSON.stringify(r)
+    )
+  })
+  t.end()
+})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/equal.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/equal.test.js
new file mode 100644
index 000000000..2773268b2
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/equal.test.js
@@ -0,0 +1,103 @@
+'use strict'
+
+const test = require('tape')
+const URI = require('../')
+
+const fn = URI.equal
+const runTest = (t, suite) => {
+  suite.forEach(s => {
+    const operator = s.result ? '==' : '!='
+    t.equal(fn(s.pair[0], s.pair[1]), s.result, `${s.pair[0]} ${operator} ${s.pair[1]}`)
+    t.equal(fn(s.pair[1], s.pair[0]), s.result, `${s.pair[1]} ${operator} ${s.pair[0]}`)
+  })
+}
+
+test('URI Equals', (t) => {
+  const suite = [
+    { pair: ['example://a/b/c/%7Bfoo%7D', 'eXAMPLE://a/./b/../b/%63/%7bfoo%7d'], result: true }, // test from RFC 3986
+    { pair: ['http://example.org/~user', 'http://example.org/%7euser'], result: true } // test from RFC 3987
+  ]
+  runTest(t, suite)
+  t.end()
+})
+
+//   test('IRI Equals', (t) => {
+//     // example from RFC 3987
+//     t.equal(URI.equal('example://a/b/c/%7Bfoo%7D/ros\xE9', 'eXAMPLE://a/./b/../b/%63/%7bfoo%7d/ros%C3%A9', IRI_OPTION), true)
+//     t.end()
+//   })
+
+test('HTTP Equals', (t) => {
+  const suite = [
+    // test from RFC 2616
+    { pair: ['http://abc.com:80/~smith/home.html', 'http://abc.com/~smith/home.html'], result: true },
+    { pair: [{ scheme: 'http', host: 'abc.com', port: 80, path: '/~smith/home.html' }, 'http://abc.com/~smith/home.html'], result: true },
+    { pair: ['http://ABC.com/%7Esmith/home.html', 'http://abc.com/~smith/home.html'], result: true },
+    { pair: ['http://ABC.com:/%7esmith/home.html', 'http://abc.com/~smith/home.html'], result: true },
+    { pair: ['HTTP://ABC.COM', 'http://abc.com/'], result: true },
+    // test from RFC 3986
+    { pair: ['http://example.com:/', 'http://example.com:80/'], result: true }
+  ]
+  runTest(t, suite)
+  t.end()
+})
+
+test('HTTPS Equals', (t) => {
+  const suite = [
+    { pair: ['https://example.com', 'https://example.com:443/'], result: true },
+    { pair: ['https://example.com:/', 'https://example.com:443/'], result: true }
+  ]
+  runTest(t, suite)
+  t.end()
+})
+
+test('URN Equals', (t) => {
+  const suite = [
+    // test from RFC 2141
+    { pair: ['urn:foo:a123,456', 'urn:foo:a123,456'], result: true },
+    { pair: ['urn:foo:a123,456', 'URN:foo:a123,456'], result: true },
+    { pair: ['urn:foo:a123,456', 'urn:FOO:a123,456'], result: true }
+  ]
+
+  // Disabling for now as the whole equal logic might need
+  // to be refactored
+  // t.equal(URI.equal('urn:foo:a123,456', 'urn:foo:A123,456'), false)
+  // t.equal(URI.equal('urn:foo:a123%2C456', 'URN:FOO:a123%2c456'), true)
+
+  runTest(t, suite)
+  t.end()
+})
+
+test('UUID Equals', (t) => {
+  const suite = [
+    { pair: ['URN:UUID:F81D4FAE-7DEC-11D0-A765-00A0C91E6BF6', 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'], result: true }
+  ]
+
+  runTest(t, suite)
+  t.end()
+})
+
+// test('Mailto Equals', (t) => {
+//   // tests from RFC 6068
+//   t.equal(URI.equal('mailto:addr1@an.example,addr2@an.example', 'mailto:?to=addr1@an.example,addr2@an.example'), true)
+//   t.equal(URI.equal('mailto:?to=addr1@an.example,addr2@an.example', 'mailto:addr1@an.example?to=addr2@an.example'), true)
+//   t.end()
+// })
+
+test('WS Equal', (t) => {
+  const suite = [
+    { pair: ['WS://ABC.COM:80/chat#one', 'ws://abc.com/chat'], result: true }
+  ]
+
+  runTest(t, suite)
+  t.end()
+})
+
+test('WSS Equal', (t) => {
+  const suite = [
+    { pair: ['WSS://ABC.COM:443/chat#one', 'wss://abc.com/chat'], result: true }
+  ]
+
+  runTest(t, suite)
+  t.end()
+})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/parse.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/parse.test.js
new file mode 100644
index 000000000..ed29cc0ff
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/parse.test.js
@@ -0,0 +1,318 @@
+'use strict'
+
+const test = require('tape')
+const URI = require('../')
+
+test('URI parse', (t) => {
+  let components
+
+  // scheme
+  components = URI.parse('uri:')
+  t.equal(components.error, undefined, 'scheme errors')
+  t.equal(components.scheme, 'uri', 'scheme')
+  // t.equal(components.authority, undefined, "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // userinfo
+  components = URI.parse('//@')
+  t.equal(components.error, undefined, 'userinfo errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  // t.equal(components.authority, "@", "authority");
+  t.equal(components.userinfo, '', 'userinfo')
+  t.equal(components.host, '', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // host
+  components = URI.parse('//')
+  t.equal(components.error, undefined, 'host errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  // t.equal(components.authority, "", "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // port
+  components = URI.parse('//:')
+  t.equal(components.error, undefined, 'port errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  // t.equal(components.authority, ":", "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '', 'host')
+  t.equal(components.port, '', 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // path
+  components = URI.parse('')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  // t.equal(components.authority, undefined, "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // query
+  components = URI.parse('?')
+  t.equal(components.error, undefined, 'query errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  // t.equal(components.authority, undefined, "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, '', 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // fragment
+  components = URI.parse('#')
+  t.equal(components.error, undefined, 'fragment errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  // t.equal(components.authority, undefined, "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '', 'fragment')
+
+  // fragment with character tabulation
+  components = URI.parse('#\t')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  // t.equal(components.authority, undefined, "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '%09', 'fragment')
+
+  // fragment with line feed
+  components = URI.parse('#\n')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  // t.equal(components.authority, undefined, "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '%0A', 'fragment')
+
+  // fragment with line tabulation
+  components = URI.parse('#\v')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  // t.equal(components.authority, undefined, "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '%0B', 'fragment')
+
+  // fragment with form feed
+  components = URI.parse('#\f')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  // t.equal(components.authority, undefined, "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '%0C', 'fragment')
+
+  // fragment with carriage return
+  components = URI.parse('#\r')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  // t.equal(components.authority, undefined, "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '%0D', 'fragment')
+
+  // all
+  components = URI.parse('uri://user:pass@example.com:123/one/two.three?q1=a1&q2=a2#body')
+  t.equal(components.error, undefined, 'all errors')
+  t.equal(components.scheme, 'uri', 'scheme')
+  // t.equal(components.authority, "user:pass@example.com:123", "authority");
+  t.equal(components.userinfo, 'user:pass', 'userinfo')
+  t.equal(components.host, 'example.com', 'host')
+  t.equal(components.port, 123, 'port')
+  t.equal(components.path, '/one/two.three', 'path')
+  t.equal(components.query, 'q1=a1&q2=a2', 'query')
+  t.equal(components.fragment, 'body', 'fragment')
+
+  // IPv4address
+  components = URI.parse('//10.10.10.10')
+  t.equal(components.error, undefined, 'IPv4address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '10.10.10.10', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // IPv4address with unformated 0 stay as-is
+  components = URI.parse('//10.10.000.10') // not valid as per https://datatracker.ietf.org/doc/html/rfc5954#section-4.1
+  t.equal(components.error, undefined, 'IPv4address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '10.10.000.10', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+  components = URI.parse('//01.01.01.01') // not valid in URIs: https://datatracker.ietf.org/doc/html/rfc3986#section-7.4
+  t.equal(components.error, undefined, 'IPv4address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '01.01.01.01', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // IPv6address
+  components = URI.parse('//[2001:db8::7]')
+  t.equal(components.error, undefined, 'IPv4address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '2001:db8::7', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // invalid IPv6
+  components = URI.parse('//[2001:dbZ::7]')
+  t.equal(components.host, '[2001:dbz::7]')
+
+  // mixed IPv4address & IPv6address
+  components = URI.parse('//[::ffff:129.144.52.38]')
+  t.equal(components.error, undefined, 'IPv4address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '::ffff:129.144.52.38', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // mixed IPv4address & reg-name, example from terion-name (https://github.com/garycourt/uri-js/issues/4)
+  components = URI.parse('uri://10.10.10.10.example.com/en/process')
+  t.equal(components.error, undefined, 'mixed errors')
+  t.equal(components.scheme, 'uri', 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '10.10.10.10.example.com', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '/en/process', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // IPv6address, example from bkw (https://github.com/garycourt/uri-js/pull/16)
+  components = URI.parse('//[2606:2800:220:1:248:1893:25c8:1946]/test')
+  t.equal(components.error, undefined, 'IPv6address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '2606:2800:220:1:248:1893:25c8:1946', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '/test', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // IPv6address, example from RFC 5952
+  components = URI.parse('//[2001:db8::1]:80')
+  t.equal(components.error, undefined, 'IPv6address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '2001:db8::1', 'host')
+  t.equal(components.port, 80, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // IPv6address with zone identifier, RFC 6874
+  components = URI.parse('//[fe80::a%25en1]')
+  t.equal(components.error, undefined, 'IPv4address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, 'fe80::a%en1', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // IPv6address with an unescaped interface specifier, example from pekkanikander (https://github.com/garycourt/uri-js/pull/22)
+  components = URI.parse('//[2001:db8::7%en0]')
+  t.equal(components.error, undefined, 'IPv6address interface errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '2001:db8::7%en0', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // UUID V1
+  components = URI.parse('urn:uuid:b571b0bc-4713-11ec-81d3-0242ac130003')
+  t.equal(components.error, undefined, 'errors')
+  t.equal(components.scheme, 'urn', 'scheme')
+  // t.equal(components.authority, undefined, "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, undefined, 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+  t.equal(components.nid, 'uuid', 'nid')
+  t.equal(components.nss, undefined, 'nss')
+  t.equal(components.uuid, 'b571b0bc-4713-11ec-81d3-0242ac130003', 'uuid')
+
+  // UUID v4
+  components = URI.parse('urn:uuid:97a32222-89b7-420e-8507-4360723e2c2a')
+  t.equal(components.uuid, '97a32222-89b7-420e-8507-4360723e2c2a', 'uuid')
+
+  components = URI.parse('urn:uuid:notauuid-7dec-11d0-a765-00a0c91e6bf6')
+  t.notSame(components.error, undefined, 'errors')
+
+  components = URI.parse('urn:foo:a123,456')
+  t.equal(components.error, undefined, 'errors')
+  t.equal(components.scheme, 'urn', 'scheme')
+  // t.equal(components.authority, undefined, "authority");
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, undefined, 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+  t.equal(components.nid, 'foo', 'nid')
+  t.equal(components.nss, 'a123,456', 'nss')
+
+  components = URI.parse('//[2606:2800:220:1:248:1893:25c8:1946:43209]')
+  t.equal(components.host, '[2606:2800:220:1:248:1893:25c8:1946:43209]')
+
+  components = URI.parse('urn:foo:|\\24fpl')
+  t.equal(components.error, 'URN can not be parsed.')
+  t.end()
+})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/resolve.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/resolve.test.js
new file mode 100644
index 000000000..69ac7b2cf
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/resolve.test.js
@@ -0,0 +1,75 @@
+'use strict'
+
+const test = require('tape')
+const URI = require('../')
+
+test('URI Resolving', (t) => {
+  // normal examples from RFC 3986
+  const base = 'uri://a/b/c/d;p?q'
+  t.equal(URI.resolve(base, 'g:h'), 'g:h', 'g:h')
+  t.equal(URI.resolve(base, 'g:h'), 'g:h', 'g:h')
+  t.equal(URI.resolve(base, 'g'), 'uri://a/b/c/g', 'g')
+  t.equal(URI.resolve(base, './g'), 'uri://a/b/c/g', './g')
+  t.equal(URI.resolve(base, 'g/'), 'uri://a/b/c/g/', 'g/')
+  t.equal(URI.resolve(base, '/g'), 'uri://a/g', '/g')
+  t.equal(URI.resolve(base, '//g'), 'uri://g', '//g')
+  t.equal(URI.resolve(base, '?y'), 'uri://a/b/c/d;p?y', '?y')
+  t.equal(URI.resolve(base, 'g?y'), 'uri://a/b/c/g?y', 'g?y')
+  t.equal(URI.resolve(base, '#s'), 'uri://a/b/c/d;p?q#s', '#s')
+  t.equal(URI.resolve(base, 'g#s'), 'uri://a/b/c/g#s', 'g#s')
+  t.equal(URI.resolve(base, 'g?y#s'), 'uri://a/b/c/g?y#s', 'g?y#s')
+  t.equal(URI.resolve(base, ';x'), 'uri://a/b/c/;x', ';x')
+  t.equal(URI.resolve(base, 'g;x'), 'uri://a/b/c/g;x', 'g;x')
+  t.equal(URI.resolve(base, 'g;x?y#s'), 'uri://a/b/c/g;x?y#s', 'g;x?y#s')
+  t.equal(URI.resolve(base, ''), 'uri://a/b/c/d;p?q', '')
+  t.equal(URI.resolve(base, '.'), 'uri://a/b/c/', '.')
+  t.equal(URI.resolve(base, './'), 'uri://a/b/c/', './')
+  t.equal(URI.resolve(base, '..'), 'uri://a/b/', '..')
+  t.equal(URI.resolve(base, '../'), 'uri://a/b/', '../')
+  t.equal(URI.resolve(base, '../g'), 'uri://a/b/g', '../g')
+  t.equal(URI.resolve(base, '../..'), 'uri://a/', '../..')
+  t.equal(URI.resolve(base, '../../'), 'uri://a/', '../../')
+  t.equal(URI.resolve(base, '../../g'), 'uri://a/g', '../../g')
+
+  // abnormal examples from RFC 3986
+  t.equal(URI.resolve(base, '../../../g'), 'uri://a/g', '../../../g')
+  t.equal(URI.resolve(base, '../../../../g'), 'uri://a/g', '../../../../g')
+
+  t.equal(URI.resolve(base, '/./g'), 'uri://a/g', '/./g')
+  t.equal(URI.resolve(base, '/../g'), 'uri://a/g', '/../g')
+  t.equal(URI.resolve(base, 'g.'), 'uri://a/b/c/g.', 'g.')
+  t.equal(URI.resolve(base, '.g'), 'uri://a/b/c/.g', '.g')
+  t.equal(URI.resolve(base, 'g..'), 'uri://a/b/c/g..', 'g..')
+  t.equal(URI.resolve(base, '..g'), 'uri://a/b/c/..g', '..g')
+
+  t.equal(URI.resolve(base, './../g'), 'uri://a/b/g', './../g')
+  t.equal(URI.resolve(base, './g/.'), 'uri://a/b/c/g/', './g/.')
+  t.equal(URI.resolve(base, 'g/./h'), 'uri://a/b/c/g/h', 'g/./h')
+  t.equal(URI.resolve(base, 'g/../h'), 'uri://a/b/c/h', 'g/../h')
+  t.equal(URI.resolve(base, 'g;x=1/./y'), 'uri://a/b/c/g;x=1/y', 'g;x=1/./y')
+  t.equal(URI.resolve(base, 'g;x=1/../y'), 'uri://a/b/c/y', 'g;x=1/../y')
+
+  t.equal(URI.resolve(base, 'g?y/./x'), 'uri://a/b/c/g?y/./x', 'g?y/./x')
+  t.equal(URI.resolve(base, 'g?y/../x'), 'uri://a/b/c/g?y/../x', 'g?y/../x')
+  t.equal(URI.resolve(base, 'g#s/./x'), 'uri://a/b/c/g#s/./x', 'g#s/./x')
+  t.equal(URI.resolve(base, 'g#s/../x'), 'uri://a/b/c/g#s/../x', 'g#s/../x')
+
+  t.equal(URI.resolve(base, 'uri:g'), 'uri:g', 'uri:g')
+  t.equal(URI.resolve(base, 'uri:g', { tolerant: true }), 'uri://a/b/c/g', 'uri:g')
+
+  // examples by PAEz
+  // example was provided to avoid infinite loop within regex
+  // this is not the case anymore
+  // t.equal(URI.resolve('//www.g.com/', '/adf\ngf'), '//www.g.com/adf%0Agf', '/adf\\ngf')
+  // t.equal(URI.resolve('//www.g.com/error\n/bleh/bleh', '..'), '//www.g.com/error%0A/', '//www.g.com/error\\n/bleh/bleh')
+  t.end()
+})
+
+test('URN Resolving', (t) => {
+  // example from epoberezkin
+  t.equal(URI.resolve('', 'urn:some:ip:prop'), 'urn:some:ip:prop', 'urn:some:ip:prop')
+  t.equal(URI.resolve('#', 'urn:some:ip:prop'), 'urn:some:ip:prop', 'urn:some:ip:prop')
+  t.equal(URI.resolve('urn:some:ip:prop', 'urn:some:ip:prop'), 'urn:some:ip:prop', 'urn:some:ip:prop')
+  t.equal(URI.resolve('urn:some:other:prop', 'urn:some:ip:prop'), 'urn:some:ip:prop', 'urn:some:ip:prop')
+  t.end()
+})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/serialize.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/serialize.test.js
new file mode 100644
index 000000000..8d9782550
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/serialize.test.js
@@ -0,0 +1,143 @@
+'use strict'
+
+const test = require('tape')
+const URI = require('../')
+
+test('URI Serialize', (t) => {
+  let components = {
+    scheme: undefined,
+    userinfo: undefined,
+    host: undefined,
+    port: undefined,
+    path: undefined,
+    query: undefined,
+    fragment: undefined
+  }
+  t.equal(URI.serialize(components), '', 'Undefined Components')
+
+  components = {
+    scheme: '',
+    userinfo: '',
+    host: '',
+    port: 0,
+    path: '',
+    query: '',
+    fragment: ''
+  }
+  t.equal(URI.serialize(components), '//@:0?#', 'Empty Components')
+
+  components = {
+    scheme: 'uri',
+    userinfo: 'foo:bar',
+    host: 'example.com',
+    port: 1,
+    path: 'path',
+    query: 'query',
+    fragment: 'fragment'
+  }
+  t.equal(URI.serialize(components), 'uri://foo:bar@example.com:1/path?query#fragment', 'All Components')
+
+  components = {
+    scheme: 'uri',
+    host: 'example.com',
+    port: '9000'
+  }
+  t.equal(URI.serialize(components), 'uri://example.com:9000', 'String port')
+
+  t.equal(URI.serialize({ path: '//path' }), '/%2Fpath', 'Double slash path')
+  t.equal(URI.serialize({ path: 'foo:bar' }), 'foo%3Abar', 'Colon path')
+  t.equal(URI.serialize({ path: '?query' }), '%3Fquery', 'Query path')
+
+  t.equal(URI.serialize({ host: '10.10.10.10' }), '//10.10.10.10', 'IPv4address')
+
+  // mixed IPv4address & reg-name, example from terion-name (https://github.com/garycourt/uri-js/issues/4)
+  t.equal(URI.serialize({ host: '10.10.10.10.example.com' }), '//10.10.10.10.example.com', 'Mixed IPv4address & reg-name')
+
+  // IPv6address
+  t.equal(URI.serialize({ host: '2001:db8::7' }), '//[2001:db8::7]', 'IPv6 Host')
+  t.equal(URI.serialize({ host: '::ffff:129.144.52.38' }), '//[::ffff:129.144.52.38]', 'IPv6 Mixed Host')
+  t.equal(URI.serialize({ host: '2606:2800:220:1:248:1893:25c8:1946' }), '//[2606:2800:220:1:248:1893:25c8:1946]', 'IPv6 Full Host')
+
+  // IPv6address with zone identifier, RFC 6874
+  t.equal(URI.serialize({ host: 'fe80::a%en1' }), '//[fe80::a%25en1]', 'IPv6 Zone Unescaped Host')
+  t.equal(URI.serialize({ host: 'fe80::a%25en1' }), '//[fe80::a%25en1]', 'IPv6 Zone Escaped Host')
+
+  t.end()
+})
+
+test('WS serialize', (t) => {
+  t.equal(URI.serialize({ scheme: 'ws' }), 'ws:')
+  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com' }), 'ws://example.com')
+  t.equal(URI.serialize({ scheme: 'ws', resourceName: '/' }), 'ws:')
+  t.equal(URI.serialize({ scheme: 'ws', resourceName: '/foo' }), 'ws:/foo')
+  t.equal(URI.serialize({ scheme: 'ws', resourceName: '/foo?bar' }), 'ws:/foo?bar')
+  t.equal(URI.serialize({ scheme: 'ws', secure: false }), 'ws:')
+  t.equal(URI.serialize({ scheme: 'ws', secure: true }), 'wss:')
+  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo' }), 'ws://example.com/foo')
+  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar' }), 'ws://example.com/foo?bar')
+  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', secure: false }), 'ws://example.com')
+  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', secure: true }), 'wss://example.com')
+  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: false }), 'ws://example.com/foo?bar')
+  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: true }), 'wss://example.com/foo?bar')
+  t.end()
+})
+
+test('WSS serialize', (t) => {
+  t.equal(URI.serialize({ scheme: 'wss' }), 'wss:')
+  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com' }), 'wss://example.com')
+  t.equal(URI.serialize({ scheme: 'wss', resourceName: '/' }), 'wss:')
+  t.equal(URI.serialize({ scheme: 'wss', resourceName: '/foo' }), 'wss:/foo')
+  t.equal(URI.serialize({ scheme: 'wss', resourceName: '/foo?bar' }), 'wss:/foo?bar')
+  t.equal(URI.serialize({ scheme: 'wss', secure: false }), 'ws:')
+  t.equal(URI.serialize({ scheme: 'wss', secure: true }), 'wss:')
+  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo' }), 'wss://example.com/foo')
+  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar' }), 'wss://example.com/foo?bar')
+  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', secure: false }), 'ws://example.com')
+  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', secure: true }), 'wss://example.com')
+  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar', secure: false }), 'ws://example.com/foo?bar')
+  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar', secure: true }), 'wss://example.com/foo?bar')
+
+  t.end()
+})
+
+test('URN serialize', (t) => {
+// example from RFC 2141
+  const components = {
+    scheme: 'urn',
+    nid: 'foo',
+    nss: 'a123,456'
+  }
+  t.equal(URI.serialize(components), 'urn:foo:a123,456')
+  // example from RFC 4122
+  let uuidcomponents = {
+    scheme: 'urn',
+    nid: 'uuid',
+    uuid: 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
+  }
+  t.equal(URI.serialize(uuidcomponents), 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6')
+
+  uuidcomponents = {
+    scheme: 'urn',
+    nid: 'uuid',
+    uuid: 'notauuid-7dec-11d0-a765-00a0c91e6bf6'
+  }
+  t.equal(URI.serialize(uuidcomponents), 'urn:uuid:notauuid-7dec-11d0-a765-00a0c91e6bf6')
+  t.end()
+})
+test('URN NID Override', (t) => {
+  let components = URI.parse('urn:foo:f81d4fae-7dec-11d0-a765-00a0c91e6bf6', { nid: 'uuid' })
+  t.equal(components.error, undefined, 'errors')
+  t.equal(components.scheme, 'urn', 'scheme')
+  t.equal(components.path, undefined, 'path')
+  t.equal(components.nid, 'foo', 'nid')
+  t.equal(components.nss, undefined, 'nss')
+  t.equal(components.uuid, 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6', 'uuid')
+
+  components = {
+    scheme: 'urn',
+    nid: 'foo',
+    uuid: 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
+  }
+  t.equal(URI.serialize(components, { nid: 'uuid' }), 'urn:foo:f81d4fae-7dec-11d0-a765-00a0c91e6bf6')
+  t.end()
+})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/uri-js.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/uri-js.test.js
new file mode 100644
index 000000000..67ac748bb
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/uri-js.test.js
@@ -0,0 +1,912 @@
+'use strict'
+
+const test = require('tape')
+const URI = require('../index')
+
+/**
+ * URI.js
+ *
+ * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/normalizing/resolving/serializing library for JavaScript.
+ * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
+ * @see http://github.com/garycourt/uri-js
+ */
+
+/**
+ * Copyright 2011 Gary Court. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification, are
+ * permitted provided that the following conditions are met:
+ *
+ *    1. Redistributions of source code must retain the above copyright notice, this list of
+ *       conditions and the following disclaimer.
+ *
+ *    2. Redistributions in binary form must reproduce the above copyright notice, this list
+ *       of conditions and the following disclaimer in the documentation and/or other materials
+ *       provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
+ * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * The views and conclusions contained in the software and documentation are those of the
+ * authors and should not be interpreted as representing official policies, either expressed
+ * or implied, of Gary Court.
+ */
+
+test('Acquire URI', (t) => {
+  t.ok(URI)
+  t.end()
+})
+
+test('URI Parsing', (t) => {
+  let components
+
+  // scheme
+  components = URI.parse('uri:')
+  t.equal(components.error, undefined, 'scheme errors')
+  t.equal(components.scheme, 'uri', 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // userinfo
+  components = URI.parse('//@')
+  t.equal(components.error, undefined, 'userinfo errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, '', 'userinfo')
+  t.equal(components.host, '', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // host
+  components = URI.parse('//')
+  t.equal(components.error, undefined, 'host errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // port
+  components = URI.parse('//:')
+  t.equal(components.error, undefined, 'port errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '', 'host')
+  t.equal(components.port, '', 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // path
+  components = URI.parse('')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // query
+  components = URI.parse('?')
+  t.equal(components.error, undefined, 'query errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, '', 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // fragment
+  components = URI.parse('#')
+  t.equal(components.error, undefined, 'fragment errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '', 'fragment')
+
+  // fragment with character tabulation
+  components = URI.parse('#\t')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '%09', 'fragment')
+
+  // fragment with line feed
+  components = URI.parse('#\n')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '%0A', 'fragment')
+
+  // fragment with line tabulation
+  components = URI.parse('#\v')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '%0B', 'fragment')
+
+  // fragment with form feed
+  components = URI.parse('#\f')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '%0C', 'fragment')
+
+  // fragment with carriage return
+  components = URI.parse('#\r')
+  t.equal(components.error, undefined, 'path errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, undefined, 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, '%0D', 'fragment')
+
+  // all
+  components = URI.parse('uri://user:pass@example.com:123/one/two.three?q1=a1&q2=a2#body')
+  t.equal(components.error, undefined, 'all errors')
+  t.equal(components.scheme, 'uri', 'scheme')
+  t.equal(components.userinfo, 'user:pass', 'userinfo')
+  t.equal(components.host, 'example.com', 'host')
+  t.equal(components.port, 123, 'port')
+  t.equal(components.path, '/one/two.three', 'path')
+  t.equal(components.query, 'q1=a1&q2=a2', 'query')
+  t.equal(components.fragment, 'body', 'fragment')
+
+  // IPv4address
+  components = URI.parse('//10.10.10.10')
+  t.equal(components.error, undefined, 'IPv4address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '10.10.10.10', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // IPv6address
+  components = URI.parse('//[2001:db8::7]')
+  t.equal(components.error, undefined, 'IPv4address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '2001:db8::7', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // mixed IPv4address & IPv6address
+  components = URI.parse('//[::ffff:129.144.52.38]')
+  t.equal(components.error, undefined, 'IPv4address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '::ffff:129.144.52.38', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // mixed IPv4address & reg-name, example from terion-name (https://github.com/garycourt/uri-js/issues/4)
+  components = URI.parse('uri://10.10.10.10.example.com/en/process')
+  t.equal(components.error, undefined, 'mixed errors')
+  t.equal(components.scheme, 'uri', 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '10.10.10.10.example.com', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '/en/process', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // IPv6address, example from bkw (https://github.com/garycourt/uri-js/pull/16)
+  components = URI.parse('//[2606:2800:220:1:248:1893:25c8:1946]/test')
+  t.equal(components.error, undefined, 'IPv6address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '2606:2800:220:1:248:1893:25c8:1946', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '/test', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // IPv6address, example from RFC 5952
+  components = URI.parse('//[2001:db8::1]:80')
+  t.equal(components.error, undefined, 'IPv6address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '2001:db8::1', 'host')
+  t.equal(components.port, 80, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // IPv6address with zone identifier, RFC 6874
+  components = URI.parse('//[fe80::a%25en1]')
+  t.equal(components.error, undefined, 'IPv4address errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, 'fe80::a%en1', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  // IPv6address with an unescaped interface specifier, example from pekkanikander (https://github.com/garycourt/uri-js/pull/22)
+  components = URI.parse('//[2001:db8::7%en0]')
+  t.equal(components.error, undefined, 'IPv6address interface errors')
+  t.equal(components.scheme, undefined, 'scheme')
+  t.equal(components.userinfo, undefined, 'userinfo')
+  t.equal(components.host, '2001:db8::7%en0', 'host')
+  t.equal(components.port, undefined, 'port')
+  t.equal(components.path, '', 'path')
+  t.equal(components.query, undefined, 'query')
+  t.equal(components.fragment, undefined, 'fragment')
+
+  t.end()
+})
+
+test('URI Serialization', (t) => {
+  let components = {
+    scheme: undefined,
+    userinfo: undefined,
+    host: undefined,
+    port: undefined,
+    path: undefined,
+    query: undefined,
+    fragment: undefined
+  }
+  t.equal(URI.serialize(components), '', 'Undefined Components')
+
+  components = {
+    scheme: '',
+    userinfo: '',
+    host: '',
+    port: 0,
+    path: '',
+    query: '',
+    fragment: ''
+  }
+  t.equal(URI.serialize(components), '//@:0?#', 'Empty Components')
+
+  components = {
+    scheme: 'uri',
+    userinfo: 'foo:bar',
+    host: 'example.com',
+    port: 1,
+    path: 'path',
+    query: 'query',
+    fragment: 'fragment'
+  }
+  t.equal(URI.serialize(components), 'uri://foo:bar@example.com:1/path?query#fragment', 'All Components')
+
+  components = {
+    scheme: 'uri',
+    host: 'example.com',
+    port: '9000'
+  }
+  t.equal(URI.serialize(components), 'uri://example.com:9000', 'String port')
+
+  t.equal(URI.serialize({ path: '//path' }), '/%2Fpath', 'Double slash path')
+  t.equal(URI.serialize({ path: 'foo:bar' }), 'foo%3Abar', 'Colon path')
+  t.equal(URI.serialize({ path: '?query' }), '%3Fquery', 'Query path')
+
+  // mixed IPv4address & reg-name, example from terion-name (https://github.com/garycourt/uri-js/issues/4)
+  t.equal(URI.serialize({ host: '10.10.10.10.example.com' }), '//10.10.10.10.example.com', 'Mixed IPv4address & reg-name')
+
+  // IPv6address
+  t.equal(URI.serialize({ host: '2001:db8::7' }), '//[2001:db8::7]', 'IPv6 Host')
+  t.equal(URI.serialize({ host: '::ffff:129.144.52.38' }), '//[::ffff:129.144.52.38]', 'IPv6 Mixed Host')
+  t.equal(URI.serialize({ host: '2606:2800:220:1:248:1893:25c8:1946' }), '//[2606:2800:220:1:248:1893:25c8:1946]', 'IPv6 Full Host')
+
+  // IPv6address with zone identifier, RFC 6874
+  t.equal(URI.serialize({ host: 'fe80::a%en1' }), '//[fe80::a%25en1]', 'IPv6 Zone Unescaped Host')
+  t.equal(URI.serialize({ host: 'fe80::a%25en1' }), '//[fe80::a%25en1]', 'IPv6 Zone Escaped Host')
+
+  t.end()
+})
+
+test('URI Resolving', { skip: true }, (t) => {
+  // normal examples from RFC 3986
+  const base = 'uri://a/b/c/d;p?q'
+  t.equal(URI.resolve(base, 'g:h'), 'g:h', 'g:h')
+  t.equal(URI.resolve(base, 'g'), 'uri://a/b/c/g', 'g')
+  t.equal(URI.resolve(base, './g'), 'uri://a/b/c/g', './g')
+  t.equal(URI.resolve(base, 'g/'), 'uri://a/b/c/g/', 'g/')
+  t.equal(URI.resolve(base, '/g'), 'uri://a/g', '/g')
+  t.equal(URI.resolve(base, '//g'), 'uri://g', '//g')
+  t.equal(URI.resolve(base, '?y'), 'uri://a/b/c/d;p?y', '?y')
+  t.equal(URI.resolve(base, 'g?y'), 'uri://a/b/c/g?y', 'g?y')
+  t.equal(URI.resolve(base, '#s'), 'uri://a/b/c/d;p?q#s', '#s')
+  t.equal(URI.resolve(base, 'g#s'), 'uri://a/b/c/g#s', 'g#s')
+  t.equal(URI.resolve(base, 'g?y#s'), 'uri://a/b/c/g?y#s', 'g?y#s')
+  t.equal(URI.resolve(base, ';x'), 'uri://a/b/c/;x', ';x')
+  t.equal(URI.resolve(base, 'g;x'), 'uri://a/b/c/g;x', 'g;x')
+  t.equal(URI.resolve(base, 'g;x?y#s'), 'uri://a/b/c/g;x?y#s', 'g;x?y#s')
+  t.equal(URI.resolve(base, ''), 'uri://a/b/c/d;p?q', '')
+  t.equal(URI.resolve(base, '.'), 'uri://a/b/c/', '.')
+  t.equal(URI.resolve(base, './'), 'uri://a/b/c/', './')
+  t.equal(URI.resolve(base, '..'), 'uri://a/b/', '..')
+  t.equal(URI.resolve(base, '../'), 'uri://a/b/', '../')
+  t.equal(URI.resolve(base, '../g'), 'uri://a/b/g', '../g')
+  t.equal(URI.resolve(base, '../..'), 'uri://a/', '../..')
+  t.equal(URI.resolve(base, '../../'), 'uri://a/', '../../')
+  t.equal(URI.resolve(base, '../../g'), 'uri://a/g', '../../g')
+
+  // abnormal examples from RFC 3986
+  t.equal(URI.resolve(base, '../../../g'), 'uri://a/g', '../../../g')
+  t.equal(URI.resolve(base, '../../../../g'), 'uri://a/g', '../../../../g')
+
+  t.equal(URI.resolve(base, '/./g'), 'uri://a/g', '/./g')
+  t.equal(URI.resolve(base, '/../g'), 'uri://a/g', '/../g')
+  t.equal(URI.resolve(base, 'g.'), 'uri://a/b/c/g.', 'g.')
+  t.equal(URI.resolve(base, '.g'), 'uri://a/b/c/.g', '.g')
+  t.equal(URI.resolve(base, 'g..'), 'uri://a/b/c/g..', 'g..')
+  t.equal(URI.resolve(base, '..g'), 'uri://a/b/c/..g', '..g')
+
+  t.equal(URI.resolve(base, './../g'), 'uri://a/b/g', './../g')
+  t.equal(URI.resolve(base, './g/.'), 'uri://a/b/c/g/', './g/.')
+  t.equal(URI.resolve(base, 'g/./h'), 'uri://a/b/c/g/h', 'g/./h')
+  t.equal(URI.resolve(base, 'g/../h'), 'uri://a/b/c/h', 'g/../h')
+  t.equal(URI.resolve(base, 'g;x=1/./y'), 'uri://a/b/c/g;x=1/y', 'g;x=1/./y')
+  t.equal(URI.resolve(base, 'g;x=1/../y'), 'uri://a/b/c/y', 'g;x=1/../y')
+
+  t.equal(URI.resolve(base, 'g?y/./x'), 'uri://a/b/c/g?y/./x', 'g?y/./x')
+  t.equal(URI.resolve(base, 'g?y/../x'), 'uri://a/b/c/g?y/../x', 'g?y/../x')
+  t.equal(URI.resolve(base, 'g#s/./x'), 'uri://a/b/c/g#s/./x', 'g#s/./x')
+  t.equal(URI.resolve(base, 'g#s/../x'), 'uri://a/b/c/g#s/../x', 'g#s/../x')
+
+  t.equal(URI.resolve(base, 'uri:g'), 'uri:g', 'uri:g')
+  t.equal(URI.resolve(base, 'uri:g', { tolerant: true }), 'uri://a/b/c/g', 'uri:g')
+
+  // examples by PAEz
+  t.equal(URI.resolve('//www.g.com/', '/adf\ngf'), '//www.g.com/adf%0Agf', '/adf\\ngf')
+  t.equal(URI.resolve('//www.g.com/error\n/bleh/bleh', '..'), '//www.g.com/error%0A/', '//www.g.com/error\\n/bleh/bleh')
+
+  t.end()
+})
+
+test('URI Normalizing', { skip: true }, (t) => {
+  // test from RFC 3987
+  t.equal(URI.normalize('uri://www.example.org/red%09ros\xE9#red'), 'uri://www.example.org/red%09ros%C3%A9#red')
+
+  // IPv4address
+  t.equal(URI.normalize('//192.068.001.000'), '//192.68.1.0')
+
+  // IPv6address, example from RFC 3513
+  t.equal(URI.normalize('http://[1080::8:800:200C:417A]/'), 'http://[1080::8:800:200c:417a]/')
+
+  // IPv6address, examples from RFC 5952
+  t.equal(URI.normalize('//[2001:0db8::0001]/'), '//[2001:db8::1]/')
+  t.equal(URI.normalize('//[2001:db8::1:0000:1]/'), '//[2001:db8::1:0:1]/')
+  t.equal(URI.normalize('//[2001:db8:0:0:0:0:2:1]/'), '//[2001:db8::2:1]/')
+  t.equal(URI.normalize('//[2001:db8:0:1:1:1:1:1]/'), '//[2001:db8:0:1:1:1:1:1]/')
+  t.equal(URI.normalize('//[2001:0:0:1:0:0:0:1]/'), '//[2001:0:0:1::1]/')
+  t.equal(URI.normalize('//[2001:db8:0:0:1:0:0:1]/'), '//[2001:db8::1:0:0:1]/')
+  t.equal(URI.normalize('//[2001:DB8::1]/'), '//[2001:db8::1]/')
+  t.equal(URI.normalize('//[0:0:0:0:0:ffff:192.0.2.1]/'), '//[::ffff:192.0.2.1]/')
+
+  // Mixed IPv4 and IPv6 address
+  t.equal(URI.normalize('//[1:2:3:4:5:6:192.0.2.1]/'), '//[1:2:3:4:5:6:192.0.2.1]/')
+  t.equal(URI.normalize('//[1:2:3:4:5:6:192.068.001.000]/'), '//[1:2:3:4:5:6:192.68.1.0]/')
+
+  t.end()
+})
+
+test('URI Equals', (t) => {
+  // test from RFC 3986
+  t.equal(URI.equal('example://a/b/c/%7Bfoo%7D', 'eXAMPLE://a/./b/../b/%63/%7bfoo%7d'), true)
+
+  // test from RFC 3987
+  t.equal(URI.equal('http://example.org/~user', 'http://example.org/%7euser'), true)
+
+  t.end()
+})
+
+test('Escape Component', { skip: true }, (t) => {
+  let chr
+  for (let d = 0; d <= 129; ++d) {
+    chr = String.fromCharCode(d)
+    if (!chr.match(/[$&+,;=]/)) {
+      t.equal(URI.escapeComponent(chr), encodeURIComponent(chr))
+    } else {
+      t.equal(URI.escapeComponent(chr), chr)
+    }
+  }
+  t.equal(URI.escapeComponent('\u00c0'), encodeURIComponent('\u00c0'))
+  t.equal(URI.escapeComponent('\u07ff'), encodeURIComponent('\u07ff'))
+  t.equal(URI.escapeComponent('\u0800'), encodeURIComponent('\u0800'))
+  t.equal(URI.escapeComponent('\u30a2'), encodeURIComponent('\u30a2'))
+  t.end()
+})
+
+test('Unescape Component', { skip: true }, (t) => {
+  let chr
+  for (let d = 0; d <= 129; ++d) {
+    chr = String.fromCharCode(d)
+    t.equal(URI.unescapeComponent(encodeURIComponent(chr)), chr)
+  }
+  t.equal(URI.unescapeComponent(encodeURIComponent('\u00c0')), '\u00c0')
+  t.equal(URI.unescapeComponent(encodeURIComponent('\u07ff')), '\u07ff')
+  t.equal(URI.unescapeComponent(encodeURIComponent('\u0800')), '\u0800')
+  t.equal(URI.unescapeComponent(encodeURIComponent('\u30a2')), '\u30a2')
+  t.end()
+})
+
+const IRI_OPTION = { iri: true, unicodeSupport: true }
+
+test('IRI Parsing', { skip: true }, (t) => {
+  const components = URI.parse('uri://us\xA0er:pa\uD7FFss@example.com:123/o\uF900ne/t\uFDCFwo.t\uFDF0hree?q1=a1\uF8FF\uE000&q2=a2#bo\uFFEFdy', IRI_OPTION)
+  t.equal(components.error, undefined, 'all errors')
+  t.equal(components.scheme, 'uri', 'scheme')
+  t.equal(components.userinfo, 'us\xA0er:pa\uD7FFss', 'userinfo')
+  t.equal(components.host, 'example.com', 'host')
+  t.equal(components.port, 123, 'port')
+  t.equal(components.path, '/o\uF900ne/t\uFDCFwo.t\uFDF0hree', 'path')
+  t.equal(components.query, 'q1=a1\uF8FF\uE000&q2=a2', 'query')
+  t.equal(components.fragment, 'bo\uFFEFdy', 'fragment')
+  t.end()
+})
+
+test('IRI Serialization', { skip: true }, (t) => {
+  const components = {
+    scheme: 'uri',
+    userinfo: 'us\xA0er:pa\uD7FFss',
+    host: 'example.com',
+    port: 123,
+    path: '/o\uF900ne/t\uFDCFwo.t\uFDF0hree',
+    query: 'q1=a1\uF8FF\uE000&q2=a2',
+    fragment: 'bo\uFFEFdy\uE001'
+  }
+  t.equal(URI.serialize(components, IRI_OPTION), 'uri://us\xA0er:pa\uD7FFss@example.com:123/o\uF900ne/t\uFDCFwo.t\uFDF0hree?q1=a1\uF8FF\uE000&q2=a2#bo\uFFEFdy%EE%80%81')
+  t.end()
+})
+
+test('IRI Normalizing', { skip: true }, (t) => {
+  t.equal(URI.normalize('uri://www.example.org/red%09ros\xE9#red', IRI_OPTION), 'uri://www.example.org/red%09ros\xE9#red')
+  t.end()
+})
+
+test('IRI Equals', { skip: true }, (t) => {
+  // example from RFC 3987
+  t.equal(URI.equal('example://a/b/c/%7Bfoo%7D/ros\xE9', 'eXAMPLE://a/./b/../b/%63/%7bfoo%7d/ros%C3%A9', IRI_OPTION), true)
+  t.end()
+})
+
+test('Convert IRI to URI', { skip: true }, (t) => {
+  // example from RFC 3987
+  t.equal(URI.serialize(URI.parse('uri://www.example.org/red%09ros\xE9#red', IRI_OPTION)), 'uri://www.example.org/red%09ros%C3%A9#red')
+
+  // Internationalized Domain Name conversion via punycode example from RFC 3987
+  t.equal(URI.serialize(URI.parse('uri://r\xE9sum\xE9.example.org', { iri: true, domainHost: true }), { domainHost: true }), 'uri://xn--rsum-bpad.example.org')
+  t.end()
+})
+
+test('Convert URI to IRI', { skip: true }, (t) => {
+  // examples from RFC 3987
+  t.equal(URI.serialize(URI.parse('uri://www.example.org/D%C3%BCrst'), IRI_OPTION), 'uri://www.example.org/D\xFCrst')
+  t.equal(URI.serialize(URI.parse('uri://www.example.org/D%FCrst'), IRI_OPTION), 'uri://www.example.org/D%FCrst')
+  t.equal(URI.serialize(URI.parse('uri://xn--99zt52a.example.org/%e2%80%ae'), IRI_OPTION), 'uri://xn--99zt52a.example.org/%E2%80%AE') // or uri://\u7D0D\u8C46.example.org/%E2%80%AE
+
+  // Internationalized Domain Name conversion via punycode example from RFC 3987
+  t.equal(URI.serialize(URI.parse('uri://xn--rsum-bpad.example.org', { domainHost: true }), { iri: true, domainHost: true }), 'uri://r\xE9sum\xE9.example.org')
+  t.end()
+})
+
+if (URI.SCHEMES.http) {
+  test('HTTP Equals', (t) => {
+    // test from RFC 2616
+    t.equal(URI.equal('http://abc.com:80/~smith/home.html', 'http://abc.com/~smith/home.html'), true)
+    t.equal(URI.equal('http://ABC.com/%7Esmith/home.html', 'http://abc.com/~smith/home.html'), true)
+    t.equal(URI.equal('http://ABC.com:/%7esmith/home.html', 'http://abc.com/~smith/home.html'), true)
+    t.equal(URI.equal('HTTP://ABC.COM', 'http://abc.com/'), true)
+    // test from RFC 3986
+    t.equal(URI.equal('http://example.com:/', 'http://example.com:80/'), true)
+    t.end()
+  })
+}
+
+if (URI.SCHEMES.https) {
+  test('HTTPS Equals', (t) => {
+    t.equal(URI.equal('https://example.com', 'https://example.com:443/'), true)
+    t.equal(URI.equal('https://example.com:/', 'https://example.com:443/'), true)
+    t.end()
+  })
+}
+
+if (URI.SCHEMES.urn) {
+  test('URN Parsing', (t) => {
+    // example from RFC 2141
+    const components = URI.parse('urn:foo:a123,456')
+    t.equal(components.error, undefined, 'errors')
+    t.equal(components.scheme, 'urn', 'scheme')
+    t.equal(components.userinfo, undefined, 'userinfo')
+    t.equal(components.host, undefined, 'host')
+    t.equal(components.port, undefined, 'port')
+    t.equal(components.path, undefined, 'path')
+    t.equal(components.query, undefined, 'query')
+    t.equal(components.fragment, undefined, 'fragment')
+    t.equal(components.nid, 'foo', 'nid')
+    t.equal(components.nss, 'a123,456', 'nss')
+    t.end()
+  })
+
+  test('URN Serialization', (t) => {
+    // example from RFC 2141
+    const components = {
+      scheme: 'urn',
+      nid: 'foo',
+      nss: 'a123,456'
+    }
+    t.equal(URI.serialize(components), 'urn:foo:a123,456')
+    t.end()
+  })
+
+  test('URN Equals', { skip: true }, (t) => {
+    // test from RFC 2141
+    t.equal(URI.equal('urn:foo:a123,456', 'urn:foo:a123,456'), true)
+    t.equal(URI.equal('urn:foo:a123,456', 'URN:foo:a123,456'), true)
+    t.equal(URI.equal('urn:foo:a123,456', 'urn:FOO:a123,456'), true)
+    t.equal(URI.equal('urn:foo:a123,456', 'urn:foo:A123,456'), false)
+    t.equal(URI.equal('urn:foo:a123%2C456', 'URN:FOO:a123%2c456'), true)
+    t.end()
+  })
+
+  test('URN Resolving', (t) => {
+    // example from epoberezkin
+    t.equal(URI.resolve('', 'urn:some:ip:prop'), 'urn:some:ip:prop')
+    t.equal(URI.resolve('#', 'urn:some:ip:prop'), 'urn:some:ip:prop')
+    t.equal(URI.resolve('urn:some:ip:prop', 'urn:some:ip:prop'), 'urn:some:ip:prop')
+    t.equal(URI.resolve('urn:some:other:prop', 'urn:some:ip:prop'), 'urn:some:ip:prop')
+    t.end()
+  })
+
+  test('UUID Parsing', (t) => {
+    // example from RFC 4122
+    let components = URI.parse('urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6')
+    t.equal(components.error, undefined, 'errors')
+    t.equal(components.scheme, 'urn', 'scheme')
+    t.equal(components.userinfo, undefined, 'userinfo')
+    t.equal(components.host, undefined, 'host')
+    t.equal(components.port, undefined, 'port')
+    t.equal(components.path, undefined, 'path')
+    t.equal(components.query, undefined, 'query')
+    t.equal(components.fragment, undefined, 'fragment')
+    t.equal(components.nid, 'uuid', 'nid')
+    t.equal(components.nss, undefined, 'nss')
+    t.equal(components.uuid, 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6', 'uuid')
+
+    components = URI.parse('urn:uuid:notauuid-7dec-11d0-a765-00a0c91e6bf6')
+    t.notEqual(components.error, undefined, 'errors')
+    t.end()
+  })
+
+  test('UUID Serialization', (t) => {
+    // example from RFC 4122
+    let components = {
+      scheme: 'urn',
+      nid: 'uuid',
+      uuid: 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
+    }
+    t.equal(URI.serialize(components), 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6')
+
+    components = {
+      scheme: 'urn',
+      nid: 'uuid',
+      uuid: 'notauuid-7dec-11d0-a765-00a0c91e6bf6'
+    }
+    t.equal(URI.serialize(components), 'urn:uuid:notauuid-7dec-11d0-a765-00a0c91e6bf6')
+    t.end()
+  })
+
+  test('UUID Equals', (t) => {
+    t.equal(URI.equal('URN:UUID:F81D4FAE-7DEC-11D0-A765-00A0C91E6BF6', 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'), true)
+    t.end()
+  })
+
+  test('URN NID Override', (t) => {
+    let components = URI.parse('urn:foo:f81d4fae-7dec-11d0-a765-00a0c91e6bf6', { nid: 'uuid' })
+    t.equal(components.error, undefined, 'errors')
+    t.equal(components.scheme, 'urn', 'scheme')
+    t.equal(components.path, undefined, 'path')
+    t.equal(components.nid, 'foo', 'nid')
+    t.equal(components.nss, undefined, 'nss')
+    t.equal(components.uuid, 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6', 'uuid')
+
+    components = {
+      scheme: 'urn',
+      nid: 'foo',
+      uuid: 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
+    }
+    t.equal(URI.serialize(components, { nid: 'uuid' }), 'urn:foo:f81d4fae-7dec-11d0-a765-00a0c91e6bf6')
+    t.end()
+  })
+}
+
+if (URI.SCHEMES.mailto) {
+  test('Mailto Parse', (t) => {
+    let components
+
+    // tests from RFC 6068
+
+    components = URI.parse('mailto:chris@example.com')
+    t.equal(components.error, undefined, 'error')
+    t.equal(components.scheme, 'mailto', 'scheme')
+    t.equal(components.userinfo, undefined, 'userinfo')
+    t.equal(components.host, undefined, 'host')
+    t.equal(components.port, undefined, 'port')
+    t.equal(components.path, undefined, 'path')
+    t.equal(components.query, undefined, 'query')
+    t.equal(components.fragment, undefined, 'fragment')
+    t.deepEqual(components.to, ['chris@example.com'], 'to')
+    t.equal(components.subject, undefined, 'subject')
+    t.equal(components.body, undefined, 'body')
+    t.equal(components.headers, undefined, 'headers')
+
+    components = URI.parse('mailto:infobot@example.com?subject=current-issue')
+    t.deepEqual(components.to, ['infobot@example.com'], 'to')
+    t.equal(components.subject, 'current-issue', 'subject')
+
+    components = URI.parse('mailto:infobot@example.com?body=send%20current-issue')
+    t.deepEqual(components.to, ['infobot@example.com'], 'to')
+    t.equal(components.body, 'send current-issue', 'body')
+
+    components = URI.parse('mailto:infobot@example.com?body=send%20current-issue%0D%0Asend%20index')
+    t.deepEqual(components.to, ['infobot@example.com'], 'to')
+    t.equal(components.body, 'send current-issue\x0D\x0Asend index', 'body')
+
+    components = URI.parse('mailto:list@example.org?In-Reply-To=%3C3469A91.D10AF4C@example.com%3E')
+    t.deepEqual(components.to, ['list@example.org'], 'to')
+    t.deepEqual(components.headers, { 'In-Reply-To': '<3469A91.D10AF4C@example.com>' }, 'headers')
+
+    components = URI.parse('mailto:majordomo@example.com?body=subscribe%20bamboo-l')
+    t.deepEqual(components.to, ['majordomo@example.com'], 'to')
+    t.equal(components.body, 'subscribe bamboo-l', 'body')
+
+    components = URI.parse('mailto:joe@example.com?cc=bob@example.com&body=hello')
+    t.deepEqual(components.to, ['joe@example.com'], 'to')
+    t.equal(components.body, 'hello', 'body')
+    t.deepEqual(components.headers, { cc: 'bob@example.com' }, 'headers')
+
+    components = URI.parse('mailto:joe@example.com?cc=bob@example.com?body=hello')
+    if (URI.VALIDATE_SUPPORT) t.ok(components.error, 'invalid header fields')
+
+    components = URI.parse('mailto:gorby%25kremvax@example.com')
+    t.deepEqual(components.to, ['gorby%kremvax@example.com'], 'to gorby%kremvax@example.com')
+
+    components = URI.parse('mailto:unlikely%3Faddress@example.com?blat=foop')
+    t.deepEqual(components.to, ['unlikely?address@example.com'], 'to unlikely?address@example.com')
+    t.deepEqual(components.headers, { blat: 'foop' }, 'headers')
+
+    components = URI.parse('mailto:Mike%26family@example.org')
+    t.deepEqual(components.to, ['Mike&family@example.org'], 'to Mike&family@example.org')
+
+    components = URI.parse('mailto:%22not%40me%22@example.org')
+    t.deepEqual(components.to, ['"not@me"@example.org'], 'to ' + '"not@me"@example.org')
+
+    components = URI.parse('mailto:%22oh%5C%5Cno%22@example.org')
+    t.deepEqual(components.to, ['"oh\\\\no"@example.org'], 'to ' + '"oh\\\\no"@example.org')
+
+    components = URI.parse("mailto:%22%5C%5C%5C%22it's%5C%20ugly%5C%5C%5C%22%22@example.org")
+    t.deepEqual(components.to, ['"\\\\\\"it\'s\\ ugly\\\\\\""@example.org'], 'to ' + '"\\\\\\"it\'s\\ ugly\\\\\\""@example.org')
+
+    components = URI.parse('mailto:user@example.org?subject=caf%C3%A9')
+    t.deepEqual(components.to, ['user@example.org'], 'to')
+    t.equal(components.subject, 'caf\xE9', 'subject')
+
+    components = URI.parse('mailto:user@example.org?subject=%3D%3Futf-8%3FQ%3Fcaf%3DC3%3DA9%3F%3D')
+    t.deepEqual(components.to, ['user@example.org'], 'to')
+    t.equal(components.subject, '=?utf-8?Q?caf=C3=A9?=', 'subject') // TODO: Verify this
+
+    components = URI.parse('mailto:user@example.org?subject=%3D%3Fiso-8859-1%3FQ%3Fcaf%3DE9%3F%3D')
+    t.deepEqual(components.to, ['user@example.org'], 'to')
+    t.equal(components.subject, '=?iso-8859-1?Q?caf=E9?=', 'subject') // TODO: Verify this
+
+    components = URI.parse('mailto:user@example.org?subject=caf%C3%A9&body=caf%C3%A9')
+    t.deepEqual(components.to, ['user@example.org'], 'to')
+    t.equal(components.subject, 'caf\xE9', 'subject')
+    t.equal(components.body, 'caf\xE9', 'body')
+
+    if (URI.IRI_SUPPORT) {
+      components = URI.parse('mailto:user@%E7%B4%8D%E8%B1%86.example.org?subject=Test&body=NATTO')
+      t.deepEqual(components.to, ['user@xn--99zt52a.example.org'], 'to')
+      t.equal(components.subject, 'Test', 'subject')
+      t.equal(components.body, 'NATTO', 'body')
+    }
+
+    t.end()
+  })
+
+  test('Mailto Serialize', (t) => {
+    // tests from RFC 6068
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['chris@example.com'] }), 'mailto:chris@example.com')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['infobot@example.com'], body: 'current-issue' }), 'mailto:infobot@example.com?body=current-issue')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['infobot@example.com'], body: 'send current-issue' }), 'mailto:infobot@example.com?body=send%20current-issue')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['infobot@example.com'], body: 'send current-issue\x0D\x0Asend index' }), 'mailto:infobot@example.com?body=send%20current-issue%0D%0Asend%20index')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['list@example.org'], headers: { 'In-Reply-To': '<3469A91.D10AF4C@example.com>' } }), 'mailto:list@example.org?In-Reply-To=%3C3469A91.D10AF4C@example.com%3E')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['majordomo@example.com'], body: 'subscribe bamboo-l' }), 'mailto:majordomo@example.com?body=subscribe%20bamboo-l')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['joe@example.com'], headers: { cc: 'bob@example.com', body: 'hello' } }), 'mailto:joe@example.com?cc=bob@example.com&body=hello')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['gorby%25kremvax@example.com'] }), 'mailto:gorby%25kremvax@example.com')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['unlikely%3Faddress@example.com'], headers: { blat: 'foop' } }), 'mailto:unlikely%3Faddress@example.com?blat=foop')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['Mike&family@example.org'] }), 'mailto:Mike%26family@example.org')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['"not@me"@example.org'] }), 'mailto:%22not%40me%22@example.org')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['"oh\\\\no"@example.org'] }), 'mailto:%22oh%5C%5Cno%22@example.org')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['"\\\\\\"it\'s\\ ugly\\\\\\""@example.org'] }), "mailto:%22%5C%5C%5C%22it's%5C%20ugly%5C%5C%5C%22%22@example.org")
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['user@example.org'], subject: 'caf\xE9' }), 'mailto:user@example.org?subject=caf%C3%A9')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['user@example.org'], subject: '=?utf-8?Q?caf=C3=A9?=' }), 'mailto:user@example.org?subject=%3D%3Futf-8%3FQ%3Fcaf%3DC3%3DA9%3F%3D')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['user@example.org'], subject: '=?iso-8859-1?Q?caf=E9?=' }), 'mailto:user@example.org?subject=%3D%3Fiso-8859-1%3FQ%3Fcaf%3DE9%3F%3D')
+    t.equal(URI.serialize({ scheme: 'mailto', to: ['user@example.org'], subject: 'caf\xE9', body: 'caf\xE9' }), 'mailto:user@example.org?subject=caf%C3%A9&body=caf%C3%A9')
+    if (URI.IRI_SUPPORT) {
+      t.equal(URI.serialize({ scheme: 'mailto', to: ['us\xE9r@\u7d0d\u8c46.example.org'], subject: 'Test', body: 'NATTO' }), 'mailto:us%C3%A9r@xn--99zt52a.example.org?subject=Test&body=NATTO')
+    }
+    t.end()
+  })
+
+  test('Mailto Equals', (t) => {
+    // tests from RFC 6068
+    t.equal(URI.equal('mailto:addr1@an.example,addr2@an.example', 'mailto:?to=addr1@an.example,addr2@an.example'), true)
+    t.equal(URI.equal('mailto:?to=addr1@an.example,addr2@an.example', 'mailto:addr1@an.example?to=addr2@an.example'), true)
+    t.end()
+  })
+}
+
+if (URI.SCHEMES.ws) {
+  test('WS Parse', (t) => {
+    let components
+
+    // example from RFC 6455, Sec 4.1
+    components = URI.parse('ws://example.com/chat')
+    t.equal(components.error, undefined, 'error')
+    t.equal(components.scheme, 'ws', 'scheme')
+    t.equal(components.userinfo, undefined, 'userinfo')
+    t.equal(components.host, 'example.com', 'host')
+    t.equal(components.port, undefined, 'port')
+    t.equal(components.path, undefined, 'path')
+    t.equal(components.query, undefined, 'query')
+    t.equal(components.fragment, undefined, 'fragment')
+    t.equal(components.resourceName, '/chat', 'resourceName')
+    t.equal(components.secure, false, 'secure')
+
+    components = URI.parse('ws://example.com/foo?bar=baz')
+    t.equal(components.error, undefined, 'error')
+    t.equal(components.scheme, 'ws', 'scheme')
+    t.equal(components.userinfo, undefined, 'userinfo')
+    t.equal(components.host, 'example.com', 'host')
+    t.equal(components.port, undefined, 'port')
+    t.equal(components.path, undefined, 'path')
+    t.equal(components.query, undefined, 'query')
+    t.equal(components.fragment, undefined, 'fragment')
+    t.equal(components.resourceName, '/foo?bar=baz', 'resourceName')
+    t.equal(components.secure, false, 'secure')
+
+    components = URI.parse('ws://example.com/?bar=baz')
+    t.equal(components.resourceName, '/?bar=baz', 'resourceName')
+
+    t.end()
+  })
+
+  test('WS Serialize', (t) => {
+    t.equal(URI.serialize({ scheme: 'ws' }), 'ws:')
+    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com' }), 'ws://example.com')
+    t.equal(URI.serialize({ scheme: 'ws', resourceName: '/' }), 'ws:')
+    t.equal(URI.serialize({ scheme: 'ws', resourceName: '/foo' }), 'ws:/foo')
+    t.equal(URI.serialize({ scheme: 'ws', resourceName: '/foo?bar' }), 'ws:/foo?bar')
+    t.equal(URI.serialize({ scheme: 'ws', secure: false }), 'ws:')
+    t.equal(URI.serialize({ scheme: 'ws', secure: true }), 'wss:')
+    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo' }), 'ws://example.com/foo')
+    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar' }), 'ws://example.com/foo?bar')
+    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', secure: false }), 'ws://example.com')
+    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', secure: true }), 'wss://example.com')
+    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: false }), 'ws://example.com/foo?bar')
+    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: true }), 'wss://example.com/foo?bar')
+    t.end()
+  })
+
+  test('WS Equal', (t) => {
+    t.equal(URI.equal('WS://ABC.COM:80/chat#one', 'ws://abc.com/chat'), true)
+    t.end()
+  })
+
+  test('WS Normalize', (t) => {
+    t.equal(URI.normalize('ws://example.com:80/foo#hash'), 'ws://example.com/foo')
+    t.end()
+  })
+}
+
+if (URI.SCHEMES.wss) {
+  test('WSS Parse', (t) => {
+    let components
+
+    // example from RFC 6455, Sec 4.1
+    components = URI.parse('wss://example.com/chat')
+    t.equal(components.error, undefined, 'error')
+    t.equal(components.scheme, 'wss', 'scheme')
+    t.equal(components.userinfo, undefined, 'userinfo')
+    t.equal(components.host, 'example.com', 'host')
+    t.equal(components.port, undefined, 'port')
+    t.equal(components.path, undefined, 'path')
+    t.equal(components.query, undefined, 'query')
+    t.equal(components.fragment, undefined, 'fragment')
+    t.equal(components.resourceName, '/chat', 'resourceName')
+    t.equal(components.secure, true, 'secure')
+
+    components = URI.parse('wss://example.com/foo?bar=baz')
+    t.equal(components.error, undefined, 'error')
+    t.equal(components.scheme, 'wss', 'scheme')
+    t.equal(components.userinfo, undefined, 'userinfo')
+    t.equal(components.host, 'example.com', 'host')
+    t.equal(components.port, undefined, 'port')
+    t.equal(components.path, undefined, 'path')
+    t.equal(components.query, undefined, 'query')
+    t.equal(components.fragment, undefined, 'fragment')
+    t.equal(components.resourceName, '/foo?bar=baz', 'resourceName')
+    t.equal(components.secure, true, 'secure')
+
+    components = URI.parse('wss://example.com/?bar=baz')
+    t.equal(components.resourceName, '/?bar=baz', 'resourceName')
+
+    t.end()
+  })
+
+  test('WSS Serialize', (t) => {
+    t.equal(URI.serialize({ scheme: 'wss' }), 'wss:')
+    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com' }), 'wss://example.com')
+    t.equal(URI.serialize({ scheme: 'wss', resourceName: '/' }), 'wss:')
+    t.equal(URI.serialize({ scheme: 'wss', resourceName: '/foo' }), 'wss:/foo')
+    t.equal(URI.serialize({ scheme: 'wss', resourceName: '/foo?bar' }), 'wss:/foo?bar')
+    t.equal(URI.serialize({ scheme: 'wss', secure: false }), 'ws:')
+    t.equal(URI.serialize({ scheme: 'wss', secure: true }), 'wss:')
+    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo' }), 'wss://example.com/foo')
+    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar' }), 'wss://example.com/foo?bar')
+    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', secure: false }), 'ws://example.com')
+    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', secure: true }), 'wss://example.com')
+    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar', secure: false }), 'ws://example.com/foo?bar')
+    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar', secure: true }), 'wss://example.com/foo?bar')
+    t.end()
+  })
+
+  test('WSS Equal', (t) => {
+    t.equal(URI.equal('WSS://ABC.COM:443/chat#one', 'wss://abc.com/chat'), true)
+    t.end()
+  })
+
+  test('WSS Normalize', (t) => {
+    t.equal(URI.normalize('wss://example.com:443/foo#hash'), 'wss://example.com/foo')
+    t.end()
+  })
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/util.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/util.test.js
new file mode 100644
index 000000000..66d515fab
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/util.test.js
@@ -0,0 +1,23 @@
+'use strict'
+
+const test = require('tape')
+const {
+  stringArrayToHexStripped
+} = require('../lib/utils')
+
+test('stringArrayToHexStripped', (t) => {
+  const testCases = [
+    [[['0', '0', '0', '0']], ''],
+    [[['0', '0', '0', '0'], false], ''],
+    [[['0', '0', '0', '0'], true], '0'],
+    [[['0', '1', '0', '0'], false], '100'],
+    [[['1', '0', '0', '0'], false], '1000'],
+    [[['1', '0', '0', '0'], true], '1000']
+  ]
+
+  t.plan(testCases.length)
+
+  testCases.forEach(([input, expected]) => {
+    t.same(stringArrayToHexStripped(input[0], input[1]), expected)
+  })
+})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.d.ts
new file mode 100644
index 000000000..ad0b45d6d
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.d.ts
@@ -0,0 +1,53 @@
+type FastUri = typeof fastUri
+
+declare namespace fastUri {
+  export interface URIComponent {
+    scheme?: string;
+    userinfo?: string;
+    host?: string;
+    port?: number | string;
+    path?: string;
+    query?: string;
+    fragment?: string;
+    reference?: string;
+    error?: string;
+  }
+  export interface Options {
+    scheme?: string;
+    reference?: string;
+    unicodeSupport?: boolean;
+    domainHost?: boolean;
+    absolutePath?: boolean;
+    tolerant?: boolean;
+  }
+
+  /**
+   * @deprecated Use Options instead
+   */
+  export type options = Options
+  /**
+   * @deprecated Use URIComponent instead
+   */
+  export type URIComponents = URIComponent
+
+  export function normalize (uri: string, opts?: Options): string
+  export function normalize (uri: URIComponent, opts?: Options): URIComponent
+  export function normalize (uri: any, opts?: Options): any
+
+  export function resolve (baseURI: string, relativeURI: string, options?: Options): string
+
+  export function resolveComponent (base: URIComponent, relative: URIComponent, options?: Options, skipNormalization?: boolean): URIComponent
+
+  export function parse (uri: string, opts?: Options): URIComponent
+
+  export function serialize (component: URIComponent, opts?: Options): string
+
+  export function equal (uriA: string, uriB: string): boolean
+
+  export function resolve (base: string, path: string): string
+
+  export const fastUri: FastUri
+  export { fastUri as default }
+}
+
+export = fastUri
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.test-d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.test-d.ts
new file mode 100644
index 000000000..02670ced8
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.test-d.ts
@@ -0,0 +1,17 @@
+import uri, { URIComponents, URIComponent, Options, options } from '..'
+import { expectDeprecated, expectType } from 'tsd'
+
+const parsed = uri.parse('foo')
+expectType<URIComponents>(parsed)
+const parsed2 = uri.parse('foo', {
+  domainHost: true,
+  scheme: 'https',
+  unicodeSupport: false
+})
+expectType<URIComponents>(parsed2)
+
+expectType<URIComponent>({} as URIComponents)
+expectDeprecated({} as URIComponents)
+
+expectType<Options>({} as options)
+expectDeprecated({} as options)
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.eslintrc.yml b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.eslintrc.yml
new file mode 100644
index 000000000..618559ab6
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.eslintrc.yml
@@ -0,0 +1,27 @@
+extends: eslint:recommended
+env:
+  node: true
+  browser: true
+rules:
+  block-scoped-var: 2
+  complexity: [2, 15]
+  curly: [2, multi-or-nest, consistent]
+  dot-location: [2, property]
+  dot-notation: 2
+  indent: [2, 2, SwitchCase: 1]
+  linebreak-style: [2, unix]
+  new-cap: 2
+  no-console: [2, allow: [warn, error]]
+  no-else-return: 2
+  no-eq-null: 2
+  no-fallthrough: 2
+  no-invalid-this: 2
+  no-return-assign: 2
+  no-shadow: 1
+  no-trailing-spaces: 2
+  no-use-before-define: [2, nofunc]
+  quotes: [2, single, avoid-escape]
+  semi: [2, always]
+  strict: [2, global]
+  valid-jsdoc: [2, requireReturn: false]
+  no-control-regex: 0
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/FUNDING.yml b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/FUNDING.yml
new file mode 100644
index 000000000..44f80f417
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/FUNDING.yml
@@ -0,0 +1,2 @@
+github: epoberezkin
+tidelift: "npm/json-schema-traverse"
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/build.yml b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/build.yml
new file mode 100644
index 000000000..f8ef5ba80
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/build.yml
@@ -0,0 +1,28 @@
+name: build
+
+on:
+  push:
+    branches: [master]
+  pull_request:
+    branches: ["*"]
+
+jobs:
+  build:
+    runs-on: ubuntu-latest
+
+    strategy:
+      matrix:
+        node-version: [10.x, 12.x, 14.x]
+
+    steps:
+      - uses: actions/checkout@v2
+      - name: Use Node.js ${{ matrix.node-version }}
+        uses: actions/setup-node@v1
+        with:
+          node-version: ${{ matrix.node-version }}
+      - run: npm install
+      - run: npm test
+      - name: Coveralls
+        uses: coverallsapp/github-action@master
+        with:
+          github-token: ${{ secrets.GITHUB_TOKEN }}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/publish.yml b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/publish.yml
new file mode 100644
index 000000000..924825b12
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/publish.yml
@@ -0,0 +1,27 @@
+name: publish
+
+on:
+  release:
+    types: [published]
+
+jobs:
+  publish-npm:
+    runs-on: ubuntu-latest
+    steps:
+      - uses: actions/checkout@v2
+      - uses: actions/setup-node@v1
+        with:
+          node-version: 14
+          registry-url: https://registry.npmjs.org/
+      - run: npm install
+      - run: npm test
+      - name: Publish beta version to npm
+        if: "github.event.release.prerelease"
+        run: npm publish --tag beta
+        env:
+          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
+      - name: Publish to npm
+        if: "!github.event.release.prerelease"
+        run: npm publish
+        env:
+          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/LICENSE b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/LICENSE
new file mode 100644
index 000000000..7f1543566
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/LICENSE
@@ -0,0 +1,21 @@
+MIT License
+
+Copyright (c) 2017 Evgeny Poberezkin
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/README.md b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/README.md
new file mode 100644
index 000000000..f3e60073a
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/README.md
@@ -0,0 +1,95 @@
+# json-schema-traverse
+Traverse JSON Schema passing each schema object to callback
+
+[![build](https://github.com/epoberezkin/json-schema-traverse/workflows/build/badge.svg)](https://github.com/epoberezkin/json-schema-traverse/actions?query=workflow%3Abuild)
+[![npm](https://img.shields.io/npm/v/json-schema-traverse)](https://www.npmjs.com/package/json-schema-traverse)
+[![coverage](https://coveralls.io/repos/github/epoberezkin/json-schema-traverse/badge.svg?branch=master)](https://coveralls.io/github/epoberezkin/json-schema-traverse?branch=master)
+
+
+## Install
+
+```
+npm install json-schema-traverse
+```
+
+
+## Usage
+
+```javascript
+const traverse = require('json-schema-traverse');
+const schema = {
+  properties: {
+    foo: {type: 'string'},
+    bar: {type: 'integer'}
+  }
+};
+
+traverse(schema, {cb});
+// cb is called 3 times with:
+// 1. root schema
+// 2. {type: 'string'}
+// 3. {type: 'integer'}
+
+// Or:
+
+traverse(schema, {cb: {pre, post}});
+// pre is called 3 times with:
+// 1. root schema
+// 2. {type: 'string'}
+// 3. {type: 'integer'}
+//
+// post is called 3 times with:
+// 1. {type: 'string'}
+// 2. {type: 'integer'}
+// 3. root schema
+
+```
+
+Callback function `cb` is called for each schema object (not including draft-06 boolean schemas), including the root schema, in pre-order traversal. Schema references ($ref) are not resolved, they are passed as is.  Alternatively, you can pass a `{pre, post}` object as `cb`, and then `pre` will be called before traversing child elements, and `post` will be called after all child elements have been traversed.
+
+Callback is passed these parameters:
+
+- _schema_: the current schema object
+- _JSON pointer_: from the root schema to the current schema object
+- _root schema_: the schema passed to `traverse` object
+- _parent JSON pointer_: from the root schema to the parent schema object (see below)
+- _parent keyword_: the keyword inside which this schema appears (e.g. `properties`, `anyOf`, etc.)
+- _parent schema_: not necessarily parent object/array; in the example above the parent schema for `{type: 'string'}` is the root schema
+- _index/property_: index or property name in the array/object containing multiple schemas; in the example above for `{type: 'string'}` the property name is `'foo'`
+
+
+## Traverse objects in all unknown keywords
+
+```javascript
+const traverse = require('json-schema-traverse');
+const schema = {
+  mySchema: {
+    minimum: 1,
+    maximum: 2
+  }
+};
+
+traverse(schema, {allKeys: true, cb});
+// cb is called 2 times with:
+// 1. root schema
+// 2. mySchema
+```
+
+Without option `allKeys: true` callback will be called only with root schema.
+
+
+## Enterprise support
+
+json-schema-traverse package is a part of [Tidelift enterprise subscription](https://tidelift.com/subscription/pkg/npm-json-schema-traverse?utm_source=npm-json-schema-traverse&utm_medium=referral&utm_campaign=enterprise&utm_term=repo) - it provides a centralised commercial support to open-source software users, in addition to the support provided by software maintainers.
+
+
+## Security contact
+
+To report a security vulnerability, please use the
+[Tidelift security contact](https://tidelift.com/security).
+Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerability via GitHub issues.
+
+
+## License
+
+[MIT](https://github.com/epoberezkin/json-schema-traverse/blob/master/LICENSE)
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.d.ts b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.d.ts
new file mode 100644
index 000000000..0772daedb
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.d.ts
@@ -0,0 +1,40 @@
+declare function traverse(
+  schema: traverse.SchemaObject,
+  opts: traverse.Options,
+  cb?: traverse.Callback
+): void;
+
+declare function traverse(
+  schema: traverse.SchemaObject,
+  cb: traverse.Callback
+): void;
+
+declare namespace traverse {
+  interface SchemaObject {
+    $id?: string;
+    $schema?: string;
+    [x: string]: any;
+  }
+
+  type Callback = (
+    schema: SchemaObject,
+    jsonPtr: string,
+    rootSchema: SchemaObject,
+    parentJsonPtr?: string,
+    parentKeyword?: string,
+    parentSchema?: SchemaObject,
+    keyIndex?: string | number
+  ) => void;
+
+  interface Options {
+    allKeys?: boolean;
+    cb?:
+      | Callback
+      | {
+          pre?: Callback;
+          post?: Callback;
+        };
+  }
+}
+
+export = traverse;
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.js b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.js
new file mode 100644
index 000000000..e521bfa85
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.js
@@ -0,0 +1,93 @@
+'use strict';
+
+var traverse = module.exports = function (schema, opts, cb) {
+  // Legacy support for v0.3.1 and earlier.
+  if (typeof opts == 'function') {
+    cb = opts;
+    opts = {};
+  }
+
+  cb = opts.cb || cb;
+  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
+  var post = cb.post || function() {};
+
+  _traverse(opts, pre, post, schema, '', schema);
+};
+
+
+traverse.keywords = {
+  additionalItems: true,
+  items: true,
+  contains: true,
+  additionalProperties: true,
+  propertyNames: true,
+  not: true,
+  if: true,
+  then: true,
+  else: true
+};
+
+traverse.arrayKeywords = {
+  items: true,
+  allOf: true,
+  anyOf: true,
+  oneOf: true
+};
+
+traverse.propsKeywords = {
+  $defs: true,
+  definitions: true,
+  properties: true,
+  patternProperties: true,
+  dependencies: true
+};
+
+traverse.skipKeywords = {
+  default: true,
+  enum: true,
+  const: true,
+  required: true,
+  maximum: true,
+  minimum: true,
+  exclusiveMaximum: true,
+  exclusiveMinimum: true,
+  multipleOf: true,
+  maxLength: true,
+  minLength: true,
+  pattern: true,
+  format: true,
+  maxItems: true,
+  minItems: true,
+  uniqueItems: true,
+  maxProperties: true,
+  minProperties: true
+};
+
+
+function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
+  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
+    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
+    for (var key in schema) {
+      var sch = schema[key];
+      if (Array.isArray(sch)) {
+        if (key in traverse.arrayKeywords) {
+          for (var i=0; i<sch.length; i++)
+            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
+        }
+      } else if (key in traverse.propsKeywords) {
+        if (sch && typeof sch == 'object') {
+          for (var prop in sch)
+            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
+        }
+      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
+        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
+      }
+    }
+    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
+  }
+}
+
+
+function escapeJsonPtr(str) {
+  return str.replace(/~/g, '~0').replace(/\//g, '~1');
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/package.json b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/package.json
new file mode 100644
index 000000000..e32dfbaee
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/package.json
@@ -0,0 +1,43 @@
+{
+  "name": "json-schema-traverse",
+  "version": "1.0.0",
+  "description": "Traverse JSON Schema passing each schema object to callback",
+  "main": "index.js",
+  "types": "index.d.ts",
+  "scripts": {
+    "eslint": "eslint index.js spec",
+    "test-spec": "mocha spec -R spec",
+    "test": "npm run eslint && nyc npm run test-spec"
+  },
+  "repository": {
+    "type": "git",
+    "url": "git+https://github.com/epoberezkin/json-schema-traverse.git"
+  },
+  "keywords": [
+    "JSON-Schema",
+    "traverse",
+    "iterate"
+  ],
+  "author": "Evgeny Poberezkin",
+  "license": "MIT",
+  "bugs": {
+    "url": "https://github.com/epoberezkin/json-schema-traverse/issues"
+  },
+  "homepage": "https://github.com/epoberezkin/json-schema-traverse#readme",
+  "devDependencies": {
+    "eslint": "^7.3.1",
+    "mocha": "^8.0.1",
+    "nyc": "^15.0.0",
+    "pre-commit": "^1.2.2"
+  },
+  "nyc": {
+    "exclude": [
+      "**/spec/**",
+      "node_modules"
+    ],
+    "reporter": [
+      "lcov",
+      "text-summary"
+    ]
+  }
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/.eslintrc.yml b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/.eslintrc.yml
new file mode 100644
index 000000000..3344da7eb
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/.eslintrc.yml
@@ -0,0 +1,6 @@
+parserOptions:
+  ecmaVersion: 6
+globals:
+  beforeEach: false
+  describe: false
+  it: false
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/fixtures/schema.js b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/fixtures/schema.js
new file mode 100644
index 000000000..c51430cdc
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/fixtures/schema.js
@@ -0,0 +1,125 @@
+'use strict';
+
+var schema = {
+  additionalItems: subschema('additionalItems'),
+  items: subschema('items'),
+  contains: subschema('contains'),
+  additionalProperties: subschema('additionalProperties'),
+  propertyNames: subschema('propertyNames'),
+  not: subschema('not'),
+  allOf: [
+    subschema('allOf_0'),
+    subschema('allOf_1'),
+    {
+      items: [
+        subschema('items_0'),
+        subschema('items_1'),
+      ]
+    }
+  ],
+  anyOf: [
+    subschema('anyOf_0'),
+    subschema('anyOf_1'),
+  ],
+  oneOf: [
+    subschema('oneOf_0'),
+    subschema('oneOf_1'),
+  ],
+  definitions: {
+    foo: subschema('definitions_foo'),
+    bar: subschema('definitions_bar'),
+  },
+  properties: {
+    foo: subschema('properties_foo'),
+    bar: subschema('properties_bar'),
+  },
+  patternProperties: {
+    foo: subschema('patternProperties_foo'),
+    bar: subschema('patternProperties_bar'),
+  },
+  dependencies: {
+    foo: subschema('dependencies_foo'),
+    bar: subschema('dependencies_bar'),
+  },
+  required: ['foo', 'bar']
+};
+
+
+function subschema(keyword) {
+  var sch = {
+    properties: {},
+    additionalProperties: false,
+    additionalItems: false,
+    anyOf: [
+      {format: 'email'},
+      {format: 'hostname'}
+    ]
+  };
+  sch.properties['foo_' + keyword] = {title: 'foo'};
+  sch.properties['bar_' + keyword] = {title: 'bar'};
+  return sch;
+}
+
+
+module.exports = {
+  schema: schema,
+
+  // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
+  expectedCalls: [[schema, '', schema, undefined, undefined, undefined, undefined]]
+    .concat(expectedCalls('additionalItems'))
+    .concat(expectedCalls('items'))
+    .concat(expectedCalls('contains'))
+    .concat(expectedCalls('additionalProperties'))
+    .concat(expectedCalls('propertyNames'))
+    .concat(expectedCalls('not'))
+    .concat(expectedCallsChild('allOf', 0))
+    .concat(expectedCallsChild('allOf', 1))
+    .concat([
+      [schema.allOf[2], '/allOf/2', schema, '', 'allOf', schema, 2],
+      [schema.allOf[2].items[0], '/allOf/2/items/0', schema, '/allOf/2', 'items', schema.allOf[2], 0],
+      [schema.allOf[2].items[0].properties.foo_items_0, '/allOf/2/items/0/properties/foo_items_0', schema, '/allOf/2/items/0', 'properties', schema.allOf[2].items[0], 'foo_items_0'],
+      [schema.allOf[2].items[0].properties.bar_items_0, '/allOf/2/items/0/properties/bar_items_0', schema, '/allOf/2/items/0', 'properties', schema.allOf[2].items[0], 'bar_items_0'],
+      [schema.allOf[2].items[0].anyOf[0], '/allOf/2/items/0/anyOf/0', schema, '/allOf/2/items/0', 'anyOf', schema.allOf[2].items[0], 0],
+      [schema.allOf[2].items[0].anyOf[1], '/allOf/2/items/0/anyOf/1', schema, '/allOf/2/items/0', 'anyOf', schema.allOf[2].items[0], 1],
+
+      [schema.allOf[2].items[1], '/allOf/2/items/1', schema, '/allOf/2', 'items', schema.allOf[2], 1],
+      [schema.allOf[2].items[1].properties.foo_items_1, '/allOf/2/items/1/properties/foo_items_1', schema, '/allOf/2/items/1', 'properties', schema.allOf[2].items[1], 'foo_items_1'],
+      [schema.allOf[2].items[1].properties.bar_items_1, '/allOf/2/items/1/properties/bar_items_1', schema, '/allOf/2/items/1', 'properties', schema.allOf[2].items[1], 'bar_items_1'],
+      [schema.allOf[2].items[1].anyOf[0], '/allOf/2/items/1/anyOf/0', schema, '/allOf/2/items/1', 'anyOf', schema.allOf[2].items[1], 0],
+      [schema.allOf[2].items[1].anyOf[1], '/allOf/2/items/1/anyOf/1', schema, '/allOf/2/items/1', 'anyOf', schema.allOf[2].items[1], 1]
+    ])
+    .concat(expectedCallsChild('anyOf', 0))
+    .concat(expectedCallsChild('anyOf', 1))
+    .concat(expectedCallsChild('oneOf', 0))
+    .concat(expectedCallsChild('oneOf', 1))
+    .concat(expectedCallsChild('definitions', 'foo'))
+    .concat(expectedCallsChild('definitions', 'bar'))
+    .concat(expectedCallsChild('properties', 'foo'))
+    .concat(expectedCallsChild('properties', 'bar'))
+    .concat(expectedCallsChild('patternProperties', 'foo'))
+    .concat(expectedCallsChild('patternProperties', 'bar'))
+    .concat(expectedCallsChild('dependencies', 'foo'))
+    .concat(expectedCallsChild('dependencies', 'bar'))
+};
+
+
+function expectedCalls(keyword) {
+  return [
+    [schema[keyword], `/${keyword}`, schema, '', keyword, schema, undefined],
+    [schema[keyword].properties[`foo_${keyword}`], `/${keyword}/properties/foo_${keyword}`, schema, `/${keyword}`, 'properties', schema[keyword], `foo_${keyword}`],
+    [schema[keyword].properties[`bar_${keyword}`], `/${keyword}/properties/bar_${keyword}`, schema, `/${keyword}`, 'properties', schema[keyword], `bar_${keyword}`],
+    [schema[keyword].anyOf[0], `/${keyword}/anyOf/0`, schema, `/${keyword}`, 'anyOf', schema[keyword], 0],
+    [schema[keyword].anyOf[1], `/${keyword}/anyOf/1`, schema, `/${keyword}`, 'anyOf', schema[keyword], 1]
+  ];
+}
+
+
+function expectedCallsChild(keyword, i) {
+  return [
+    [schema[keyword][i], `/${keyword}/${i}`, schema, '', keyword, schema, i],
+    [schema[keyword][i].properties[`foo_${keyword}_${i}`], `/${keyword}/${i}/properties/foo_${keyword}_${i}`, schema, `/${keyword}/${i}`, 'properties', schema[keyword][i], `foo_${keyword}_${i}`],
+    [schema[keyword][i].properties[`bar_${keyword}_${i}`], `/${keyword}/${i}/properties/bar_${keyword}_${i}`, schema, `/${keyword}/${i}`, 'properties', schema[keyword][i], `bar_${keyword}_${i}`],
+    [schema[keyword][i].anyOf[0], `/${keyword}/${i}/anyOf/0`, schema, `/${keyword}/${i}`, 'anyOf', schema[keyword][i], 0],
+    [schema[keyword][i].anyOf[1], `/${keyword}/${i}/anyOf/1`, schema, `/${keyword}/${i}`, 'anyOf', schema[keyword][i], 1]
+  ];
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/index.spec.js b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/index.spec.js
new file mode 100644
index 000000000..c76b64fc8
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/index.spec.js
@@ -0,0 +1,171 @@
+'use strict';
+
+var traverse = require('../index');
+var assert = require('assert');
+
+describe('json-schema-traverse', function() {
+  var calls;
+
+  beforeEach(function() {
+    calls = [];
+  });
+
+  it('should traverse all keywords containing schemas recursively', function() {
+    var schema = require('./fixtures/schema').schema;
+    var expectedCalls = require('./fixtures/schema').expectedCalls;
+
+    traverse(schema, {cb: callback});
+    assert.deepStrictEqual(calls, expectedCalls);
+  });
+
+  describe('Legacy v0.3.1 API', function() {
+    it('should traverse all keywords containing schemas recursively', function() {
+      var schema = require('./fixtures/schema').schema;
+      var expectedCalls = require('./fixtures/schema').expectedCalls;
+
+      traverse(schema, callback);
+      assert.deepStrictEqual(calls, expectedCalls);
+    });
+
+    it('should work when an options object is provided', function() {
+      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
+      var schema = require('./fixtures/schema').schema;
+      var expectedCalls = require('./fixtures/schema').expectedCalls;
+
+      traverse(schema, {}, callback);
+      assert.deepStrictEqual(calls, expectedCalls);
+    });
+  });
+
+
+  describe('allKeys option', function() {
+    var schema = {
+      someObject: {
+        minimum: 1,
+        maximum: 2
+      }
+    };
+
+    it('should traverse objects with allKeys: true option', function() {
+      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
+      var expectedCalls = [
+        [schema, '', schema, undefined, undefined, undefined, undefined],
+        [schema.someObject, '/someObject', schema, '', 'someObject', schema, undefined]
+      ];
+
+      traverse(schema, {allKeys: true, cb: callback});
+      assert.deepStrictEqual(calls, expectedCalls);
+    });
+
+
+    it('should NOT traverse objects with allKeys: false option', function() {
+      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
+      var expectedCalls = [
+        [schema, '', schema, undefined, undefined, undefined, undefined]
+      ];
+
+      traverse(schema, {allKeys: false, cb: callback});
+      assert.deepStrictEqual(calls, expectedCalls);
+    });
+
+
+    it('should NOT traverse objects without allKeys option', function() {
+      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
+      var expectedCalls = [
+        [schema, '', schema, undefined, undefined, undefined, undefined]
+      ];
+
+      traverse(schema, {cb: callback});
+      assert.deepStrictEqual(calls, expectedCalls);
+    });
+
+
+    it('should NOT travers objects in standard keywords which value is not a schema', function() {
+      var schema2 = {
+        const: {foo: 'bar'},
+        enum: ['a', 'b'],
+        required: ['foo'],
+        another: {
+
+        },
+        patternProperties: {}, // will not traverse - no properties
+        dependencies: true, // will not traverse - invalid
+        properties: {
+          smaller: {
+            type: 'number'
+          },
+          larger: {
+            type: 'number',
+            minimum: {$data: '1/smaller'}
+          }
+        }
+      };
+
+      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
+      var expectedCalls = [
+        [schema2, '', schema2, undefined, undefined, undefined, undefined],
+        [schema2.another, '/another', schema2, '', 'another', schema2, undefined],
+        [schema2.properties.smaller, '/properties/smaller', schema2, '', 'properties', schema2, 'smaller'],
+        [schema2.properties.larger, '/properties/larger', schema2, '', 'properties', schema2, 'larger'],
+      ];
+
+      traverse(schema2, {allKeys: true, cb: callback});
+      assert.deepStrictEqual(calls, expectedCalls);
+    });
+  });
+
+  describe('pre and post', function() {
+    var schema = {
+      type: 'object',
+      properties: {
+        name: {type: 'string'},
+        age: {type: 'number'}
+      }
+    };
+
+    it('should traverse schema in pre-order', function() {
+      traverse(schema, {cb: {pre}});
+      var expectedCalls = [
+        ['pre', schema, '', schema, undefined, undefined, undefined, undefined],
+        ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
+        ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
+      ];
+      assert.deepStrictEqual(calls, expectedCalls);
+    });
+
+    it('should traverse schema in post-order', function() {
+      traverse(schema, {cb: {post}});
+      var expectedCalls = [
+        ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
+        ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
+        ['post', schema, '', schema, undefined, undefined, undefined, undefined],
+      ];
+      assert.deepStrictEqual(calls, expectedCalls);
+    });
+
+    it('should traverse schema in pre- and post-order at the same time', function() {
+      traverse(schema, {cb: {pre, post}});
+      var expectedCalls = [
+        ['pre', schema, '', schema, undefined, undefined, undefined, undefined],
+        ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
+        ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
+        ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
+        ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
+        ['post', schema, '', schema, undefined, undefined, undefined, undefined],
+      ];
+      assert.deepStrictEqual(calls, expectedCalls);
+    });
+  });
+
+  function callback() {
+    calls.push(Array.prototype.slice.call(arguments));
+  }
+
+  function pre() {
+    calls.push(['pre'].concat(Array.prototype.slice.call(arguments)));
+  }
+
+  function post() {
+    calls.push(['post'].concat(Array.prototype.slice.call(arguments)));
+  }
+});
diff --git a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/index.js b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/index.js
new file mode 100644
index 000000000..cb5595fde
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/index.js
@@ -0,0 +1,34 @@
+'use strict';
+
+var Module = require('module');
+var path = require('path');
+
+module.exports = function requireFromString(code, filename, opts) {
+	if (typeof filename === 'object') {
+		opts = filename;
+		filename = undefined;
+	}
+
+	opts = opts || {};
+	filename = filename || '';
+
+	opts.appendPaths = opts.appendPaths || [];
+	opts.prependPaths = opts.prependPaths || [];
+
+	if (typeof code !== 'string') {
+		throw new Error('code must be a string, not ' + typeof code);
+	}
+
+	var paths = Module._nodeModulePaths(path.dirname(filename));
+
+	var parent = module.parent;
+	var m = new Module(filename, parent);
+	m.filename = filename;
+	m.paths = [].concat(opts.prependPaths).concat(paths).concat(opts.appendPaths);
+	m._compile(code, filename);
+
+	var exports = m.exports;
+	parent && parent.children && parent.children.splice(parent.children.indexOf(m), 1);
+
+	return exports;
+};
diff --git a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/license b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/license
new file mode 100644
index 000000000..1aeb74fd2
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/license
@@ -0,0 +1,21 @@
+The MIT License (MIT)
+
+Copyright (c) Vsevolod Strukchinsky <floatdrop@gmail.com> (github.com/floatdrop)
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
diff --git a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/package.json b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/package.json
new file mode 100644
index 000000000..800d46efc
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/package.json
@@ -0,0 +1,28 @@
+{
+  "name": "require-from-string",
+  "version": "2.0.2",
+  "description": "Require module from string",
+  "license": "MIT",
+  "repository": "floatdrop/require-from-string",
+  "author": {
+    "name": "Vsevolod Strukchinsky",
+    "email": "floatdrop@gmail.com",
+    "url": "github.com/floatdrop"
+  },
+  "engines": {
+    "node": ">=0.10.0"
+  },
+  "scripts": {
+    "test": "mocha"
+  },
+  "files": [
+    "index.js"
+  ],
+  "keywords": [
+    ""
+  ],
+  "dependencies": {},
+  "devDependencies": {
+    "mocha": "*"
+  }
+}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/readme.md b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/readme.md
new file mode 100644
index 000000000..88b3236f8
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/readme.md
@@ -0,0 +1,56 @@
+# require-from-string [![Build Status](https://travis-ci.org/floatdrop/require-from-string.svg?branch=master)](https://travis-ci.org/floatdrop/require-from-string)
+
+Load module from string in Node.
+
+## Install
+
+```
+$ npm install --save require-from-string
+```
+
+
+## Usage
+
+```js
+var requireFromString = require('require-from-string');
+
+requireFromString('module.exports = 1');
+//=> 1
+```
+
+
+## API
+
+### requireFromString(code, [filename], [options])
+
+#### code
+
+*Required*  
+Type: `string`
+
+Module code.
+
+#### filename
+Type: `string`  
+Default: `''`
+
+Optional filename.
+
+
+#### options
+Type: `object`
+
+##### appendPaths
+Type: `Array`
+
+List of `paths`, that will be appended to module `paths`. Useful, when you want
+to be able require modules from these paths.
+
+##### prependPaths
+Type: `Array`
+
+Same as `appendPaths`, but paths will be prepended.
+
+## License
+
+MIT ¬© [Vsevolod Strukchinsky](http://github.com/floatdrop)
diff --git a/docs/healthcare-vc-examples/tests/package-lock.json b/docs/healthcare-vc-examples/tests/package-lock.json
new file mode 100644
index 000000000..0035481f0
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/package-lock.json
@@ -0,0 +1,68 @@
+{
+  "name": "hc-vc-schema-tests",
+  "version": "0.1.0",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "hc-vc-schema-tests",
+      "version": "0.1.0",
+      "dependencies": {
+        "ajv": "^8.17.1"
+      }
+    },
+    "node_modules/ajv": {
+      "version": "8.17.1",
+      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
+      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
+      "license": "MIT",
+      "dependencies": {
+        "fast-deep-equal": "^3.1.3",
+        "fast-uri": "^3.0.1",
+        "json-schema-traverse": "^1.0.0",
+        "require-from-string": "^2.0.2"
+      },
+      "funding": {
+        "type": "github",
+        "url": "https://github.com/sponsors/epoberezkin"
+      }
+    },
+    "node_modules/fast-deep-equal": {
+      "version": "3.1.3",
+      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
+      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
+      "license": "MIT"
+    },
+    "node_modules/fast-uri": {
+      "version": "3.0.6",
+      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.6.tgz",
+      "integrity": "sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==",
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/fastify"
+        },
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/fastify"
+        }
+      ],
+      "license": "BSD-3-Clause"
+    },
+    "node_modules/json-schema-traverse": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
+      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
+      "license": "MIT"
+    },
+    "node_modules/require-from-string": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
+      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
+      "license": "MIT",
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    }
+  }
+}
diff --git a/docs/healthcare-vc-examples/tests/package.json b/docs/healthcare-vc-examples/tests/package.json
new file mode 100644
index 000000000..68e31e467
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/package.json
@@ -0,0 +1,12 @@
+{
+  "name": "hc-vc-schema-tests",
+  "version": "0.1.0",
+  "private": true,
+  "type": "module",
+  "scripts": {
+    "test": "node validate.js"
+  },
+  "dependencies": {
+    "ajv": "^8.17.1"
+  }
+}
diff --git a/docs/healthcare-vc-examples/tests/sample_MentalWellnessSessionCredential.json b/docs/healthcare-vc-examples/tests/sample_MentalWellnessSessionCredential.json
new file mode 100644
index 000000000..4a11fbdbc
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/sample_MentalWellnessSessionCredential.json
@@ -0,0 +1 @@
+{"@context":["https://www.w3.org/2018/credentials/v1"],"type":["VerifiableCredential","MentalWellnessSessionCredential"],"issuer":"did:example:issuer123","issuanceDate":"2025-08-12T00:00:00Z","credentialSubject":{"subjectId":"did:example:person789","sessionDate":"2025-08-01","sessionType":"guided_relaxation","sessionLevel":"L1"},"proof":{"type":"Ed25519Signature2020","created":"2025-08-12T00:00:00Z","verificationMethod":"did:example:issuer123#keys-1","proofPurpose":"assertionMethod","jws":"eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9..."}}
diff --git a/docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential b/docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential
new file mode 100644
index 000000000..9a83a042c
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential
@@ -0,0 +1 @@
+{"@context":["https://www.w3.org/2018/credentials/v1"],"type":["VerifiableCredential","PractitionerAttestationCredential"],"issuer":"did:example:verifier456","issuanceDate":"2025-08-12T00:00:00Z","credentialSubject":{"practitionerDid":"did:example:practitioner555","licenseType":"BoardCertification","licenseHash":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","specialty":"Behavioral Health","attestationLevel":"org_verified"},"credentialStatus":{"id":"https://example.org/status/series/12345","type":"RevocationList2020Status"},"proof":{"type":"Ed25519Signature2020","created":"2025-08-12T00:00:00Z","verificationMethod":"did:example:verifier456#keys-1","proofPurpose":"assertionMethod","jws":"eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9..."}}
diff --git a/docs/healthcare-vc-examples/tests/validate.js b/docs/healthcare-vc-examples/tests/validate.js
new file mode 100644
index 000000000..d45b7ca40
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/validate.js
@@ -0,0 +1,32 @@
+/* All rights reserved, unlicensed. */
+const fs = require('fs');
+const path = require('path');
+const Ajv = require('ajv');
+
+const ajv = new Ajv({ allErrors: true, strict: false });
+
+function load(p) {
+  return JSON.parse(fs.readFileSync(p, 'utf8'));
+}
+
+const base = path.join(__dirname, '..');
+const schema1 = load(path.join(base, 'schemas', 'MentalWellnessSessionCredential.json'));
+const schema2 = load(path.join(base, 'schemas', 'PractitionerAttestationCredential.json'));
+
+const sample1 = load(path.join(__dirname, 'sample_MentalWellnessSessionCredential.json'));
+const sample2 = load(path.join(__dirname, 'sample_PractitionerAttestationCredential.json'));
+
+const v1 = ajv.compile(schema1);
+const v2 = ajv.compile(schema2);
+
+if (!v1(sample1)) {
+  console.error('MentalWellnessSessionCredential validation failed:', v1.errors);
+  process.exit(1);
+}
+
+if (!v2(sample2)) {
+  console.error('PractitionerAttestationCredential validation failed:', v2.errors);
+  process.exit(1);
+}
+
+console.log('All healthcare VC samples passed schema validation.');

From 90c521e113b4331871ca1d629aee4eed64f45002 Mon Sep 17 00:00:00 2001
From: megmontanez2000 <megmontanez2000@yahoo.com>
Date: Wed, 13 Aug 2025 06:09:46 -0400
Subject: [PATCH 02/11] fix(tests): remove ESM flag to match CJS validate.js;
 rename practitioner sample to .json; drop stray .save file
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Dr. Meg Monta√±ez-Davenport <future.systems.lab@proton.me>
---
 .../privacy_healthcare_credentials.md.save                 | 7 -------
 docs/healthcare-vc-examples/tests/package.json             | 1 -
 .../tests/sample_PractitionerAttestationCredential.json    | 1 +
 3 files changed, 1 insertion(+), 8 deletions(-)
 delete mode 100644 docs/healthcare-vc-examples/privacy_healthcare_credentials.md.save
 create mode 100644 docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential.json

diff --git a/docs/healthcare-vc-examples/privacy_healthcare_credentials.md.save b/docs/healthcare-vc-examples/privacy_healthcare_credentials.md.save
deleted file mode 100644
index 94f3f56fe..000000000
--- a/docs/healthcare-vc-examples/privacy_healthcare_credentials.md.save
+++ /dev/null
@@ -1,7 +0,0 @@
-# Privacy & Compliance Notes for Health Credentials (Non-PHI)
-
-All rights reserved, unlicensed.
-
-## PHI Minimization
-- Do not include diagnoses, notes, lab values, prescriptions, or free-text clinical content.
-- Use coarse enums and timk
diff --git a/docs/healthcare-vc-examples/tests/package.json b/docs/healthcare-vc-examples/tests/package.json
index 68e31e467..7d60997e2 100644
--- a/docs/healthcare-vc-examples/tests/package.json
+++ b/docs/healthcare-vc-examples/tests/package.json
@@ -2,7 +2,6 @@
   "name": "hc-vc-schema-tests",
   "version": "0.1.0",
   "private": true,
-  "type": "module",
   "scripts": {
     "test": "node validate.js"
   },
diff --git a/docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential.json b/docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential.json
new file mode 100644
index 000000000..9a83a042c
--- /dev/null
+++ b/docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential.json
@@ -0,0 +1 @@
+{"@context":["https://www.w3.org/2018/credentials/v1"],"type":["VerifiableCredential","PractitionerAttestationCredential"],"issuer":"did:example:verifier456","issuanceDate":"2025-08-12T00:00:00Z","credentialSubject":{"practitionerDid":"did:example:practitioner555","licenseType":"BoardCertification","licenseHash":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","specialty":"Behavioral Health","attestationLevel":"org_verified"},"credentialStatus":{"id":"https://example.org/status/series/12345","type":"RevocationList2020Status"},"proof":{"type":"Ed25519Signature2020","created":"2025-08-12T00:00:00Z","verificationMethod":"did:example:verifier456#keys-1","proofPurpose":"assertionMethod","jws":"eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9..."}}

From 5ec9e08a95bdbcdae4c03246386c7d21f8e79cfc Mon Sep 17 00:00:00 2001
From: megmontanez2000 <megmontanez2000@yahoo.com>
Date: Wed, 13 Aug 2025 06:40:43 -0400
Subject: [PATCH 03/11] fix(schema): add PractitionerAttestationCredential
 schema; align type names
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Dr. Meg Monta√±ez-Davenport <future.systems.lab@proton.me>
---
 .../PractitionerAttestationCredential.json    | 54 +++++++++++++++++++
 1 file changed, 54 insertions(+)
 create mode 100644 docs/healthcare-vc-examples/schemas/PractitionerAttestationCredential.json

diff --git a/docs/healthcare-vc-examples/schemas/PractitionerAttestationCredential.json b/docs/healthcare-vc-examples/schemas/PractitionerAttestationCredential.json
new file mode 100644
index 000000000..434e7b92b
--- /dev/null
+++ b/docs/healthcare-vc-examples/schemas/PractitionerAttestationCredential.json
@@ -0,0 +1,54 @@
+{
+  "$schema": "https://json-schema.org/draft/2020-12/schema",
+  "title": "PractitionerAttestationCredential (Non-PHI)",
+  "description": "Attendance proof for a mental wellness session without PHI.",
+  "type": "object",
+  "properties": {
+    "@context": {
+      "type": "array",
+      "minItems": 1
+    },
+    "type": {
+      "type": "array",
+      "contains": {
+        "type": "string",
+        "pattern": "^VerifiableCredential$"
+      }
+    },
+    "issuer": {
+      "type": ["string", "object"]
+    },
+    "issuanceDate": {
+      "type": "string",
+      "format": "date-time"
+    },
+    "credentialSubject": {
+      "type": "object",
+      "properties": {
+        "subjectId": {
+          "type": "string",
+          "description": "Pseudonymous subject identifier (e.g., DID or UUID)."
+        },
+        "sessionDate": {
+          "type": "string",
+          "format": "date"
+        },
+        "sessionType": {
+          "type": "string",
+          "enum": ["education", "coaching", "group_support", "guided_relaxation"]
+        },
+        "sessionLevel": {
+          "type": "string",
+          "enum": ["L1", "L2", "L3"]
+        }
+      },
+      "required": ["subjectId", "sessionDate", "sessionType", "sessionLevel"],
+      "additionalProperties": false
+    },
+    "proof": {
+      "type": "object"
+    }
+  },
+  "required": ["@context", "type", "issuer", "issuanceDate", "credentialSubject", "proof"],
+  "additionalProperties": true
+}

From 1edb5879c54a986b62bbd95eab4a78c6677249b1 Mon Sep 17 00:00:00 2001
From: megmontanez2000 <megmontanez2000@yahoo.com>
Date: Wed, 13 Aug 2025 06:46:14 -0400
Subject: [PATCH 04/11] chore: clean up pending changes
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Dr. Meg Monta√±ez-Davenport <future.systems.lab@proton.me>
---
 .../tests/sample_PractitionerAttestationCredential               | 1 -
 1 file changed, 1 deletion(-)
 delete mode 100644 docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential

diff --git a/docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential b/docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential
deleted file mode 100644
index 9a83a042c..000000000
--- a/docs/healthcare-vc-examples/tests/sample_PractitionerAttestationCredential
+++ /dev/null
@@ -1 +0,0 @@
-{"@context":["https://www.w3.org/2018/credentials/v1"],"type":["VerifiableCredential","PractitionerAttestationCredential"],"issuer":"did:example:verifier456","issuanceDate":"2025-08-12T00:00:00Z","credentialSubject":{"practitionerDid":"did:example:practitioner555","licenseType":"BoardCertification","licenseHash":"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","specialty":"Behavioral Health","attestationLevel":"org_verified"},"credentialStatus":{"id":"https://example.org/status/series/12345","type":"RevocationList2020Status"},"proof":{"type":"Ed25519Signature2020","created":"2025-08-12T00:00:00Z","verificationMethod":"did:example:verifier456#keys-1","proofPurpose":"assertionMethod","jws":"eyJhbGciOiJFZERTQSIsInR5cCI6IkpXVCJ9..."}}

From 7a98ee9c5190c5c88ec275184a170b8278506a7a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dr=2E=20Meg=20Monta=C3=B1ez-Davenport?=
 <future.systems.lab@proton.me>
Date: Sun, 17 Aug 2025 17:01:34 -0400
Subject: [PATCH 05/11] chore: remove node_modules and add .gitignore
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Dr. Meg Monta√±ez-Davenport <future.systems.lab@proton.me>
---
 .gitignore | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/.gitignore b/.gitignore
index 6b274b525..9b97d1681 100644
--- a/.gitignore
+++ b/.gitignore
@@ -187,4 +187,5 @@ $RECYCLE.BIN/
 _build/
 
 # Aries VCR Client
-client/
\ No newline at end of file
+client/node_modules
+node_modules/

From f55c9a7ce6ce18d943fa7d2efbd601934dc066c6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dr=2E=20Meg=20Monta=C3=B1ez-Davenport?=
 <future.systems.lab@proton.me>
Date: Sun, 17 Aug 2025 17:04:35 -0400
Subject: [PATCH 06/11] docs: update healthcare VC examples and README
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Dr. Meg Monta√±ez-Davenport <future.systems.lab@proton.me>
---
 README.md                                                 | 8 ++++++++
 docs/healthcare-vc-examples/README.md                     | 3 ---
 .../privacy_healthcare_credentials.md                     | 3 ---
 3 files changed, 8 insertions(+), 6 deletions(-)

diff --git a/README.md b/README.md
index df7f88478..b038b108e 100644
--- a/README.md
+++ b/README.md
@@ -81,3 +81,11 @@ We also welcome issues submitted about problems you encounter in using Aries VCR
 ## License
 
 [Apache License Version 2.0](https://github.com/bcgov/aries-vcr/blob/main/LICENSE)
+
+### Testing
+
+```bash
+npm install
+npm run test
+```
+
diff --git a/docs/healthcare-vc-examples/README.md b/docs/healthcare-vc-examples/README.md
index aae100ede..3e26b2f30 100644
--- a/docs/healthcare-vc-examples/README.md
+++ b/docs/healthcare-vc-examples/README.md
@@ -1,7 +1,4 @@
 # Healthcare Verifiable Credential Examples (Non-PHI)
-
-All rights reserved, unlicensed.
-
 Purpose: Provide minimal, privacy-preserving VC examples suitable for health-related use cases without handling Protected Health Information (PHI).
 
 Included:
diff --git a/docs/healthcare-vc-examples/privacy_healthcare_credentials.md b/docs/healthcare-vc-examples/privacy_healthcare_credentials.md
index c21533341..4cc340cd6 100644
--- a/docs/healthcare-vc-examples/privacy_healthcare_credentials.md
+++ b/docs/healthcare-vc-examples/privacy_healthcare_credentials.md
@@ -1,7 +1,4 @@
 # Privacy & Compliance Notes for Health Credentials (Non-PHI)
-
-All rights reserved, unlicensed.
-
 ## PHI Minimization
 - Do not include diagnoses, notes, lab values, prescriptions, or free-text clinical content.
 - Use coarse enums and timestamps; omit narrative details.

From 8d3e37d1affa93115a309bc8f998d12b1b3a95d7 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dr=2E=20Meg=20Monta=C3=B1ez-Davenport?=
 <future.systems.lab@proton.me>
Date: Sun, 17 Aug 2025 17:09:18 -0400
Subject: [PATCH 07/11] chore: purge test node_modules and update .gitignore
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Dr. Meg Monta√±ez-Davenport <future.systems.lab@proton.me>
---
 .gitignore                                    |   1 +
 .../tests/node_modules/.package-lock.json     |  61 --
 .../tests/node_modules/ajv/.runkit_example.js |  23 -
 .../tests/node_modules/ajv/LICENSE            |  22 -
 .../tests/node_modules/ajv/README.md          | 207 ----
 .../tests/node_modules/ajv/package.json       | 126 ---
 .../node_modules/fast-deep-equal/LICENSE      |  21 -
 .../node_modules/fast-deep-equal/README.md    |  96 --
 .../fast-deep-equal/es6/index.d.ts            |   2 -
 .../node_modules/fast-deep-equal/es6/index.js |  72 --
 .../fast-deep-equal/es6/react.d.ts            |   2 -
 .../node_modules/fast-deep-equal/es6/react.js |  79 --
 .../node_modules/fast-deep-equal/index.d.ts   |   4 -
 .../node_modules/fast-deep-equal/index.js     |  46 -
 .../node_modules/fast-deep-equal/package.json |  61 --
 .../node_modules/fast-deep-equal/react.d.ts   |   2 -
 .../node_modules/fast-deep-equal/react.js     |  53 -
 .../node_modules/fast-uri/.gitattributes      |   2 -
 .../node_modules/fast-uri/.github/.stale.yml  |  21 -
 .../fast-uri/.github/dependabot.yml           |  13 -
 .../fast-uri/.github/tests_checker.yml        |   8 -
 .../fast-uri/.github/workflows/ci.yml         |  58 --
 .../.github/workflows/package-manager-ci.yml  |  20 -
 .../tests/node_modules/fast-uri/LICENSE       |  30 -
 .../tests/node_modules/fast-uri/README.md     | 130 ---
 .../tests/node_modules/fast-uri/benchmark.js  | 105 --
 .../node_modules/fast-uri/eslint.config.js    |   6 -
 .../tests/node_modules/fast-uri/index.js      | 303 ------
 .../tests/node_modules/fast-uri/package.json  |  68 --
 .../tests/node_modules/fast-uri/test/.gitkeep |   0
 .../node_modules/fast-uri/test/ajv.test.js    |  39 -
 .../fast-uri/test/compatibility.test.js       | 131 ---
 .../node_modules/fast-uri/test/equal.test.js  | 103 --
 .../node_modules/fast-uri/test/parse.test.js  | 318 ------
 .../fast-uri/test/resolve.test.js             |  75 --
 .../fast-uri/test/serialize.test.js           | 143 ---
 .../node_modules/fast-uri/test/uri-js.test.js | 912 ------------------
 .../node_modules/fast-uri/test/util.test.js   |  23 -
 .../node_modules/fast-uri/types/index.d.ts    |  53 -
 .../fast-uri/types/index.test-d.ts            |  17 -
 .../json-schema-traverse/.eslintrc.yml        |  27 -
 .../json-schema-traverse/.github/FUNDING.yml  |   2 -
 .../.github/workflows/build.yml               |  28 -
 .../.github/workflows/publish.yml             |  27 -
 .../node_modules/json-schema-traverse/LICENSE |  21 -
 .../json-schema-traverse/README.md            |  95 --
 .../json-schema-traverse/index.d.ts           |  40 -
 .../json-schema-traverse/index.js             |  93 --
 .../json-schema-traverse/package.json         |  43 -
 .../json-schema-traverse/spec/.eslintrc.yml   |   6 -
 .../spec/fixtures/schema.js                   | 125 ---
 .../json-schema-traverse/spec/index.spec.js   | 171 ----
 .../node_modules/require-from-string/index.js |  34 -
 .../node_modules/require-from-string/license  |  21 -
 .../require-from-string/package.json          |  28 -
 .../require-from-string/readme.md             |  56 --
 56 files changed, 1 insertion(+), 4272 deletions(-)
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/.package-lock.json
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/ajv/.runkit_example.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/ajv/LICENSE
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/ajv/README.md
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/ajv/package.json
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/LICENSE
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/README.md
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.d.ts
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.d.ts
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.d.ts
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/package.json
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.d.ts
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.gitattributes
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/.stale.yml
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/dependabot.yml
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/tests_checker.yml
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/ci.yml
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/package-manager-ci.yml
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/LICENSE
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/README.md
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/benchmark.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/eslint.config.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/index.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/package.json
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/.gitkeep
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/ajv.test.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/compatibility.test.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/equal.test.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/parse.test.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/resolve.test.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/serialize.test.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/uri-js.test.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/util.test.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.d.ts
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.test-d.ts
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.eslintrc.yml
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/FUNDING.yml
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/build.yml
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/publish.yml
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/LICENSE
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/README.md
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.d.ts
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/package.json
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/.eslintrc.yml
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/fixtures/schema.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/index.spec.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/require-from-string/index.js
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/require-from-string/license
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/require-from-string/package.json
 delete mode 100644 docs/healthcare-vc-examples/tests/node_modules/require-from-string/readme.md

diff --git a/.gitignore b/.gitignore
index 9b97d1681..6373ef957 100644
--- a/.gitignore
+++ b/.gitignore
@@ -189,3 +189,4 @@ _build/
 # Aries VCR Client
 client/node_modules
 node_modules/
+**/node_modules/
diff --git a/docs/healthcare-vc-examples/tests/node_modules/.package-lock.json b/docs/healthcare-vc-examples/tests/node_modules/.package-lock.json
deleted file mode 100644
index b2360596d..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/.package-lock.json
+++ /dev/null
@@ -1,61 +0,0 @@
-{
-  "name": "hc-vc-schema-tests",
-  "version": "0.1.0",
-  "lockfileVersion": 3,
-  "requires": true,
-  "packages": {
-    "node_modules/ajv": {
-      "version": "8.17.1",
-      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.17.1.tgz",
-      "integrity": "sha512-B/gBuNg5SiMTrPkC+A2+cW0RszwxYmn6VYxB/inlBStS5nx6xHIt/ehKRhIMhqusl7a8LjQoZnjCs5vhwxOQ1g==",
-      "license": "MIT",
-      "dependencies": {
-        "fast-deep-equal": "^3.1.3",
-        "fast-uri": "^3.0.1",
-        "json-schema-traverse": "^1.0.0",
-        "require-from-string": "^2.0.2"
-      },
-      "funding": {
-        "type": "github",
-        "url": "https://github.com/sponsors/epoberezkin"
-      }
-    },
-    "node_modules/fast-deep-equal": {
-      "version": "3.1.3",
-      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
-      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
-      "license": "MIT"
-    },
-    "node_modules/fast-uri": {
-      "version": "3.0.6",
-      "resolved": "https://registry.npmjs.org/fast-uri/-/fast-uri-3.0.6.tgz",
-      "integrity": "sha512-Atfo14OibSv5wAp4VWNsFYE1AchQRTv9cBGWET4pZWHzYshFSS9NQI6I57rdKn9croWVMbYFbLhJ+yJvmZIIHw==",
-      "funding": [
-        {
-          "type": "github",
-          "url": "https://github.com/sponsors/fastify"
-        },
-        {
-          "type": "opencollective",
-          "url": "https://opencollective.com/fastify"
-        }
-      ],
-      "license": "BSD-3-Clause"
-    },
-    "node_modules/json-schema-traverse": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
-      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
-      "license": "MIT"
-    },
-    "node_modules/require-from-string": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
-      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
-      "license": "MIT",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    }
-  }
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/ajv/.runkit_example.js b/docs/healthcare-vc-examples/tests/node_modules/ajv/.runkit_example.js
deleted file mode 100644
index 0d578d5d5..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/ajv/.runkit_example.js
+++ /dev/null
@@ -1,23 +0,0 @@
-const Ajv = require("ajv")
-const ajv = new Ajv({allErrors: true})
-
-const schema = {
-  type: "object",
-  properties: {
-    foo: {type: "string"},
-    bar: {type: "number", maximum: 3},
-  },
-  required: ["foo", "bar"],
-  additionalProperties: false,
-}
-
-const validate = ajv.compile(schema)
-
-test({foo: "abc", bar: 2})
-test({foo: 2, bar: 4})
-
-function test(data) {
-  const valid = validate(data)
-  if (valid) console.log("Valid!")
-  else console.log("Invalid: " + ajv.errorsText(validate.errors))
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/ajv/LICENSE b/docs/healthcare-vc-examples/tests/node_modules/ajv/LICENSE
deleted file mode 100644
index 139162ad2..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/ajv/LICENSE
+++ /dev/null
@@ -1,22 +0,0 @@
-The MIT License (MIT)
-
-Copyright (c) 2015-2021 Evgeny Poberezkin
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
-
diff --git a/docs/healthcare-vc-examples/tests/node_modules/ajv/README.md b/docs/healthcare-vc-examples/tests/node_modules/ajv/README.md
deleted file mode 100644
index d8ee276ce..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/ajv/README.md
+++ /dev/null
@@ -1,207 +0,0 @@
-<img align="right" alt="Ajv logo" width="160" src="https://ajv.js.org/img/ajv.svg">
-
-&nbsp;
-
-# Ajv JSON schema validator
-
-The fastest JSON validator for Node.js and browser.
-
-Supports JSON Schema draft-04/06/07/2019-09/2020-12 ([draft-04 support](https://ajv.js.org/json-schema.html#draft-04) requires ajv-draft-04 package) and JSON Type Definition [RFC8927](https://datatracker.ietf.org/doc/rfc8927/).
-
-[![build](https://github.com/ajv-validator/ajv/actions/workflows/build.yml/badge.svg)](https://github.com/ajv-validator/ajv/actions?query=workflow%3Abuild)
-[![npm](https://img.shields.io/npm/v/ajv.svg)](https://www.npmjs.com/package/ajv)
-[![npm downloads](https://img.shields.io/npm/dm/ajv.svg)](https://www.npmjs.com/package/ajv)
-[![Coverage Status](https://coveralls.io/repos/github/ajv-validator/ajv/badge.svg?branch=master)](https://coveralls.io/github/ajv-validator/ajv?branch=master)
-[![SimpleX](https://img.shields.io/badge/chat-on%20SimpleX-70F0F9)](https://simplex.chat/contact#/?v=1-2&smp=smp%3A%2F%2Fu2dS9sG8nMNURyZwqASV4yROM28Er0luVTx5X1CsMrU%3D%40smp4.simplex.im%2F8KvvURM6J38Gdq9dCuPswMOkMny0xCOJ%23%2F%3Fv%3D1-2%26dh%3DMCowBQYDK2VuAyEAr8rPVRuMOXv6kwF2yUAap-eoVg-9ssOFCi1fIrxTUw0%253D%26srv%3Do5vmywmrnaxalvz6wi3zicyftgio6psuvyniis6gco6bp6ekl4cqj4id.onion&data=%7B%22type%22%3A%22group%22%2C%22groupLinkId%22%3A%224pwLRgWHU9tlroMWHz0uOg%3D%3D%22%7D)
-[![Gitter](https://img.shields.io/gitter/room/ajv-validator/ajv.svg)](https://gitter.im/ajv-validator/ajv)
-[![GitHub Sponsors](https://img.shields.io/badge/$-sponsors-brightgreen)](https://github.com/sponsors/epoberezkin)
-
-## Ajv sponsors
-
-[<img src="https://ajv.js.org/img/mozilla.svg" width="45%" alt="Mozilla">](https://www.mozilla.org)<img src="https://ajv.js.org/img/gap.svg" width="9%">[<img src="https://ajv.js.org/img/reserved.svg" width="45%">](https://opencollective.com/ajv)
-
-[<img src="https://ajv.js.org/img/microsoft.png" width="31%" alt="Microsoft">](https://opensource.microsoft.com)<img src="https://ajv.js.org/img/gap.svg" width="3%">[<img src="https://ajv.js.org/img/reserved.svg" width="31%">](https://opencollective.com/ajv)<img src="https://ajv.js.org/img/gap.svg" width="3%">[<img src="https://ajv.js.org/img/reserved.svg" width="31%">](https://opencollective.com/ajv)
-
-[<img src="https://ajv.js.org/img/retool.svg" width="22.5%" alt="Retool">](https://retool.com/?utm_source=sponsor&utm_campaign=ajv)<img src="https://ajv.js.org/img/gap.svg" width="3%">[<img src="https://ajv.js.org/img/tidelift.svg" width="22.5%" alt="Tidelift">](https://tidelift.com/subscription/pkg/npm-ajv?utm_source=npm-ajv&utm_medium=referral&utm_campaign=enterprise)<img src="https://ajv.js.org/img/gap.svg" width="3%">[<img src="https://ajv.js.org/img/simplex.svg" width="22.5%" alt="SimpleX">](https://github.com/simplex-chat/simplex-chat)<img src="https://ajv.js.org/img/gap.svg" width="3%">[<img src="https://ajv.js.org/img/reserved.svg" width="22.5%">](https://opencollective.com/ajv)
-
-## Contributing
-
-More than 100 people contributed to Ajv, and we would love to have you join the development. We welcome implementing new features that will benefit many users and ideas to improve our documentation.
-
-Please review [Contributing guidelines](./CONTRIBUTING.md) and [Code components](https://ajv.js.org/components.html).
-
-## Documentation
-
-All documentation is available on the [Ajv website](https://ajv.js.org).
-
-Some useful site links:
-
-- [Getting started](https://ajv.js.org/guide/getting-started.html)
-- [JSON Schema vs JSON Type Definition](https://ajv.js.org/guide/schema-language.html)
-- [API reference](https://ajv.js.org/api.html)
-- [Strict mode](https://ajv.js.org/strict-mode.html)
-- [Standalone validation code](https://ajv.js.org/standalone.html)
-- [Security considerations](https://ajv.js.org/security.html)
-- [Command line interface](https://ajv.js.org/packages/ajv-cli.html)
-- [Frequently Asked Questions](https://ajv.js.org/faq.html)
-
-## <a name="sponsors"></a>Please [sponsor Ajv development](https://github.com/sponsors/epoberezkin)
-
-Since I asked to support Ajv development 40 people and 6 organizations contributed via GitHub and OpenCollective - this support helped receiving the MOSS grant!
-
-Your continuing support is very important - the funds will be used to develop and maintain Ajv once the next major version is released.
-
-Please sponsor Ajv via:
-
-- [GitHub sponsors page](https://github.com/sponsors/epoberezkin) (GitHub will match it)
-- [Ajv Open Collective](https://opencollective.com/ajv)
-
-Thank you.
-
-#### Open Collective sponsors
-
-<a href="https://opencollective.com/ajv"><img src="https://opencollective.com/ajv/individuals.svg?width=890"></a>
-
-<a href="https://opencollective.com/ajv/organization/0/website"><img src="https://opencollective.com/ajv/organization/0/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/1/website"><img src="https://opencollective.com/ajv/organization/1/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/2/website"><img src="https://opencollective.com/ajv/organization/2/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/3/website"><img src="https://opencollective.com/ajv/organization/3/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/4/website"><img src="https://opencollective.com/ajv/organization/4/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/5/website"><img src="https://opencollective.com/ajv/organization/5/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/6/website"><img src="https://opencollective.com/ajv/organization/6/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/7/website"><img src="https://opencollective.com/ajv/organization/7/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/8/website"><img src="https://opencollective.com/ajv/organization/8/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/9/website"><img src="https://opencollective.com/ajv/organization/9/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/10/website"><img src="https://opencollective.com/ajv/organization/10/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/11/website"><img src="https://opencollective.com/ajv/organization/11/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/12/website"><img src="https://opencollective.com/ajv/organization/12/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/13/website"><img src="https://opencollective.com/ajv/organization/13/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/14/website"><img src="https://opencollective.com/ajv/organization/14/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/15/website"><img src="https://opencollective.com/ajv/organization/15/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/16/website"><img src="https://opencollective.com/ajv/organization/16/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/17/website"><img src="https://opencollective.com/ajv/organization/17/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/18/website"><img src="https://opencollective.com/ajv/organization/18/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/19/website"><img src="https://opencollective.com/ajv/organization/19/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/20/website"><img src="https://opencollective.com/ajv/organization/20/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/21/website"><img src="https://opencollective.com/ajv/organization/21/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/22/website"><img src="https://opencollective.com/ajv/organization/22/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/23/website"><img src="https://opencollective.com/ajv/organization/23/avatar.svg"></a>
-<a href="https://opencollective.com/ajv/organization/24/website"><img src="https://opencollective.com/ajv/organization/24/avatar.svg"></a>
-
-## Performance
-
-Ajv generates code to turn JSON Schemas into super-fast validation functions that are efficient for v8 optimization.
-
-Currently Ajv is the fastest and the most standard compliant validator according to these benchmarks:
-
-- [json-schema-benchmark](https://github.com/ebdrup/json-schema-benchmark) - 50% faster than the second place
-- [jsck benchmark](https://github.com/pandastrike/jsck#benchmarks) - 20-190% faster
-- [z-schema benchmark](https://rawgit.com/zaggino/z-schema/master/benchmark/results.html)
-- [themis benchmark](https://cdn.rawgit.com/playlyfe/themis/master/benchmark/results.html)
-
-Performance of different validators by [json-schema-benchmark](https://github.com/ebdrup/json-schema-benchmark):
-
-[![performance](https://chart.googleapis.com/chart?chxt=x,y&cht=bhs&chco=76A4FB&chls=2.0&chbh=62,4,1&chs=600x416&chxl=-1:|ajv|@exodus/schemasafe|is-my-json-valid|djv|@cfworker/json-schema|jsonschema/=t:100,69.2,51.5,13.1,5.1,1.2)](https://github.com/ebdrup/json-schema-benchmark/blob/master/README.md#performance)
-
-## Features
-
-- Ajv implements JSON Schema [draft-06/07/2019-09/2020-12](http://json-schema.org/) standards (draft-04 is supported in v6):
-  - all validation keywords (see [JSON Schema validation keywords](https://ajv.js.org/json-schema.html))
-  - [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md) extensions:
-    - NEW: keyword [discriminator](https://ajv.js.org/json-schema.html#discriminator).
-    - keyword [nullable](https://ajv.js.org/json-schema.html#nullable).
-  - full support of remote references (remote schemas have to be added with `addSchema` or compiled to be available)
-  - support of recursive references between schemas
-  - correct string lengths for strings with unicode pairs
-  - JSON Schema [formats](https://ajv.js.org/guide/formats.html) (with [ajv-formats](https://github.com/ajv-validator/ajv-formats) plugin).
-  - [validates schemas against meta-schema](https://ajv.js.org/api.html#api-validateschema)
-- NEW: supports [JSON Type Definition](https://datatracker.ietf.org/doc/rfc8927/):
-  - all keywords (see [JSON Type Definition schema forms](https://ajv.js.org/json-type-definition.html))
-  - meta-schema for JTD schemas
-  - "union" keyword and user-defined keywords (can be used inside "metadata" member of the schema)
-- supports [browsers](https://ajv.js.org/guide/environments.html#browsers) and Node.js 10.x - current
-- [asynchronous loading](https://ajv.js.org/guide/managing-schemas.html#asynchronous-schema-loading) of referenced schemas during compilation
-- "All errors" validation mode with [option allErrors](https://ajv.js.org/options.html#allerrors)
-- [error messages with parameters](https://ajv.js.org/api.html#validation-errors) describing error reasons to allow error message generation
-- i18n error messages support with [ajv-i18n](https://github.com/ajv-validator/ajv-i18n) package
-- [removing-additional-properties](https://ajv.js.org/guide/modifying-data.html#removing-additional-properties)
-- [assigning defaults](https://ajv.js.org/guide/modifying-data.html#assigning-defaults) to missing properties and items
-- [coercing data](https://ajv.js.org/guide/modifying-data.html#coercing-data-types) to the types specified in `type` keywords
-- [user-defined keywords](https://ajv.js.org/guide/user-keywords.html)
-- additional extension keywords with [ajv-keywords](https://github.com/ajv-validator/ajv-keywords) package
-- [\$data reference](https://ajv.js.org/guide/combining-schemas.html#data-reference) to use values from the validated data as values for the schema keywords
-- [asynchronous validation](https://ajv.js.org/guide/async-validation.html) of user-defined formats and keywords
-
-## Install
-
-To install version 8:
-
-```
-npm install ajv
-```
-
-## <a name="usage"></a>Getting started
-
-Try it in the Node.js REPL: https://runkit.com/npm/ajv
-
-In JavaScript:
-
-```javascript
-// or ESM/TypeScript import
-import Ajv from "ajv"
-// Node.js require:
-const Ajv = require("ajv")
-
-const ajv = new Ajv() // options can be passed, e.g. {allErrors: true}
-
-const schema = {
-  type: "object",
-  properties: {
-    foo: {type: "integer"},
-    bar: {type: "string"},
-  },
-  required: ["foo"],
-  additionalProperties: false,
-}
-
-const data = {
-  foo: 1,
-  bar: "abc",
-}
-
-const validate = ajv.compile(schema)
-const valid = validate(data)
-if (!valid) console.log(validate.errors)
-```
-
-Learn how to use Ajv and see more examples in the [Guide: getting started](https://ajv.js.org/guide/getting-started.html)
-
-## Changes history
-
-See [https://github.com/ajv-validator/ajv/releases](https://github.com/ajv-validator/ajv/releases)
-
-**Please note**: [Changes in version 8.0.0](https://github.com/ajv-validator/ajv/releases/tag/v8.0.0)
-
-[Version 7.0.0](https://github.com/ajv-validator/ajv/releases/tag/v7.0.0)
-
-[Version 6.0.0](https://github.com/ajv-validator/ajv/releases/tag/v6.0.0).
-
-## Code of conduct
-
-Please review and follow the [Code of conduct](./CODE_OF_CONDUCT.md).
-
-Please report any unacceptable behaviour to ajv.validator@gmail.com - it will be reviewed by the project team.
-
-## Security contact
-
-To report a security vulnerability, please use the
-[Tidelift security contact](https://tidelift.com/security).
-Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerabilities via GitHub issues.
-
-## Open-source software support
-
-Ajv is a part of [Tidelift subscription](https://tidelift.com/subscription/pkg/npm-ajv?utm_source=npm-ajv&utm_medium=referral&utm_campaign=readme) - it provides a centralised support to open-source software users, in addition to the support provided by software maintainers.
-
-## License
-
-[MIT](./LICENSE)
diff --git a/docs/healthcare-vc-examples/tests/node_modules/ajv/package.json b/docs/healthcare-vc-examples/tests/node_modules/ajv/package.json
deleted file mode 100644
index 17df7b147..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/ajv/package.json
+++ /dev/null
@@ -1,126 +0,0 @@
-{
-  "name": "ajv",
-  "version": "8.17.1",
-  "description": "Another JSON Schema Validator",
-  "main": "dist/ajv.js",
-  "types": "dist/ajv.d.ts",
-  "files": [
-    "lib/",
-    "dist/",
-    ".runkit_example.js"
-  ],
-  "scripts": {
-    "eslint": "eslint \"lib/**/*.ts\" \"spec/**/*.*s\" --ignore-pattern spec/JSON-Schema-Test-Suite",
-    "prettier:write": "prettier --write \"./**/*.{json,yaml,js,ts}\"",
-    "prettier:check": "prettier --list-different \"./**/*.{json,yaml,js,ts}\"",
-    "test-spec": "cross-env TS_NODE_PROJECT=spec/tsconfig.json mocha -r ts-node/register \"spec/**/*.spec.{ts,js}\" -R dot",
-    "test-codegen": "nyc cross-env TS_NODE_PROJECT=spec/tsconfig.json mocha -r ts-node/register 'spec/codegen.spec.ts' -R spec",
-    "test-debug": "npm run test-spec -- --inspect-brk",
-    "test-cov": "nyc npm run test-spec",
-    "rollup": "rm -rf bundle && rollup -c",
-    "bundle": "rm -rf bundle && node ./scripts/bundle.js ajv ajv7 ajv7 && node ./scripts/bundle.js 2019 ajv2019 ajv2019 && node ./scripts/bundle.js 2020 ajv2020 ajv2020 && node ./scripts/bundle.js jtd ajvJTD ajvJTD",
-    "build": "rm -rf dist && tsc && cp -r lib/refs dist && rm dist/refs/json-schema-2019-09/index.ts && rm dist/refs/json-schema-2020-12/index.ts && rm dist/refs/jtd-schema.ts",
-    "json-tests": "rm -rf spec/_json/*.js && node scripts/jsontests",
-    "test-karma": "karma start",
-    "test-browser": "rm -rf .browser && npm run bundle && scripts/prepare-tests && karma start",
-    "test-all": "npm run test-cov && if-node-version 12 npm run test-browser",
-    "test": "npm run json-tests && npm run prettier:check && npm run eslint && npm link && npm link --legacy-peer-deps ajv && npm run test-cov",
-    "test-ci": "AJV_FULL_TEST=true npm test",
-    "prepublish": "npm run build",
-    "benchmark": "npm i && npm run build && npm link && cd ./benchmark && npm link --legacy-peer-deps ajv && npm i && node ./jtd",
-    "docs:dev": "./scripts/prepare-site && vuepress dev docs",
-    "docs:build": "./scripts/prepare-site && vuepress build docs"
-  },
-  "nyc": {
-    "exclude": [
-      "**/spec/**",
-      "node_modules"
-    ],
-    "reporter": [
-      "lcov",
-      "text-summary"
-    ]
-  },
-  "repository": "ajv-validator/ajv",
-  "keywords": [
-    "JSON",
-    "schema",
-    "validator",
-    "validation",
-    "jsonschema",
-    "json-schema",
-    "json-schema-validator",
-    "json-schema-validation"
-  ],
-  "author": "Evgeny Poberezkin",
-  "license": "MIT",
-  "bugs": "https://github.com/ajv-validator/ajv/issues",
-  "homepage": "https://ajv.js.org",
-  "runkitExampleFilename": ".runkit_example.js",
-  "dependencies": {
-    "fast-deep-equal": "^3.1.3",
-    "fast-uri": "^3.0.1",
-    "json-schema-traverse": "^1.0.0",
-    "require-from-string": "^2.0.2"
-  },
-  "devDependencies": {
-    "@ajv-validator/config": "^0.5.0",
-    "@rollup/plugin-commonjs": "^25.0.7",
-    "@rollup/plugin-json": "^6.1.0",
-    "@rollup/plugin-node-resolve": "^15.2.3",
-    "@rollup/plugin-typescript": "^11.1.6",
-    "@types/chai": "^4.3.11",
-    "@types/mocha": "^10.0.6",
-    "@types/node": "^20.11.30",
-    "@types/require-from-string": "^1.2.3",
-    "@typescript-eslint/eslint-plugin": "^7.3.1",
-    "@typescript-eslint/parser": "^7.3.1",
-    "ajv-formats": "^3.0.1",
-    "browserify": "^17.0.0",
-    "chai": "^4.4.1",
-    "cross-env": "^7.0.3",
-    "dayjs": "^1.11.10",
-    "dayjs-plugin-utc": "^0.1.2",
-    "eslint": "^8.57.0",
-    "eslint-config-prettier": "^9.1.0",
-    "glob": "^10.3.10",
-    "husky": "^9.0.11",
-    "if-node-version": "^1.1.1",
-    "jimp": "^0.22.10",
-    "js-beautify": "^1.15.1",
-    "json-schema-test": "^2.0.0",
-    "karma": "^6.4.2",
-    "karma-chrome-launcher": "^3.2.0",
-    "karma-mocha": "^2.0.1",
-    "lint-staged": "^15.2.2",
-    "mocha": "^10.3.0",
-    "module-from-string": "^3.3.0",
-    "node-fetch": "^3.3.2",
-    "nyc": "^15.1.0",
-    "prettier": "3.0.3",
-    "re2": "^1.20.9",
-    "rollup": "^2.79.1",
-    "rollup-plugin-terser": "^7.0.2",
-    "ts-node": "^10.9.2",
-    "tsify": "^5.0.4",
-    "typescript": "5.3.3",
-    "uri-js": "^4.4.1"
-  },
-  "collective": {
-    "type": "opencollective",
-    "url": "https://opencollective.com/ajv"
-  },
-  "funding": {
-    "type": "github",
-    "url": "https://github.com/sponsors/epoberezkin"
-  },
-  "prettier": "@ajv-validator/config/prettierrc.json",
-  "husky": {
-    "hooks": {
-      "pre-commit": "lint-staged && npm test"
-    }
-  },
-  "lint-staged": {
-    "*.{json,yaml,js,ts}": "prettier --write"
-  }
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/LICENSE b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/LICENSE
deleted file mode 100644
index 7f1543566..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/LICENSE
+++ /dev/null
@@ -1,21 +0,0 @@
-MIT License
-
-Copyright (c) 2017 Evgeny Poberezkin
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/README.md b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/README.md
deleted file mode 100644
index d3f4ffcc3..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/README.md
+++ /dev/null
@@ -1,96 +0,0 @@
-# fast-deep-equal
-The fastest deep equal with ES6 Map, Set and Typed arrays support.
-
-[![Build Status](https://travis-ci.org/epoberezkin/fast-deep-equal.svg?branch=master)](https://travis-ci.org/epoberezkin/fast-deep-equal)
-[![npm](https://img.shields.io/npm/v/fast-deep-equal.svg)](https://www.npmjs.com/package/fast-deep-equal)
-[![Coverage Status](https://coveralls.io/repos/github/epoberezkin/fast-deep-equal/badge.svg?branch=master)](https://coveralls.io/github/epoberezkin/fast-deep-equal?branch=master)
-
-
-## Install
-
-```bash
-npm install fast-deep-equal
-```
-
-
-## Features
-
-- ES5 compatible
-- works in node.js (8+) and browsers (IE9+)
-- checks equality of Date and RegExp objects by value.
-
-ES6 equal (`require('fast-deep-equal/es6')`) also supports:
-- Maps
-- Sets
-- Typed arrays
-
-
-## Usage
-
-```javascript
-var equal = require('fast-deep-equal');
-console.log(equal({foo: 'bar'}, {foo: 'bar'})); // true
-```
-
-To support ES6 Maps, Sets and Typed arrays equality use:
-
-```javascript
-var equal = require('fast-deep-equal/es6');
-console.log(equal(Int16Array([1, 2]), Int16Array([1, 2]))); // true
-```
-
-To use with React (avoiding the traversal of React elements' _owner
-property that contains circular references and is not needed when
-comparing the elements - borrowed from [react-fast-compare](https://github.com/FormidableLabs/react-fast-compare)):
-
-```javascript
-var equal = require('fast-deep-equal/react');
-var equal = require('fast-deep-equal/es6/react');
-```
-
-
-## Performance benchmark
-
-Node.js v12.6.0:
-
-```
-fast-deep-equal x 261,950 ops/sec ¬±0.52% (89 runs sampled)
-fast-deep-equal/es6 x 212,991 ops/sec ¬±0.34% (92 runs sampled)
-fast-equals x 230,957 ops/sec ¬±0.83% (85 runs sampled)
-nano-equal x 187,995 ops/sec ¬±0.53% (88 runs sampled)
-shallow-equal-fuzzy x 138,302 ops/sec ¬±0.49% (90 runs sampled)
-underscore.isEqual x 74,423 ops/sec ¬±0.38% (89 runs sampled)
-lodash.isEqual x 36,637 ops/sec ¬±0.72% (90 runs sampled)
-deep-equal x 2,310 ops/sec ¬±0.37% (90 runs sampled)
-deep-eql x 35,312 ops/sec ¬±0.67% (91 runs sampled)
-ramda.equals x 12,054 ops/sec ¬±0.40% (91 runs sampled)
-util.isDeepStrictEqual x 46,440 ops/sec ¬±0.43% (90 runs sampled)
-assert.deepStrictEqual x 456 ops/sec ¬±0.71% (88 runs sampled)
-
-The fastest is fast-deep-equal
-```
-
-To run benchmark (requires node.js 6+):
-
-```bash
-npm run benchmark
-```
-
-__Please note__: this benchmark runs against the available test cases. To choose the most performant library for your application, it is recommended to benchmark against your data and to NOT expect this benchmark to reflect the performance difference in your application.
-
-
-## Enterprise support
-
-fast-deep-equal package is a part of [Tidelift enterprise subscription](https://tidelift.com/subscription/pkg/npm-fast-deep-equal?utm_source=npm-fast-deep-equal&utm_medium=referral&utm_campaign=enterprise&utm_term=repo) - it provides a centralised commercial support to open-source software users, in addition to the support provided by software maintainers.
-
-
-## Security contact
-
-To report a security vulnerability, please use the
-[Tidelift security contact](https://tidelift.com/security).
-Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerability via GitHub issues.
-
-
-## License
-
-[MIT](https://github.com/epoberezkin/fast-deep-equal/blob/master/LICENSE)
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.d.ts
deleted file mode 100644
index c7eb9c796..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-declare const equal: (a: any, b: any) => boolean;
-export = equal;
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.js b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.js
deleted file mode 100644
index d980be257..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/index.js
+++ /dev/null
@@ -1,72 +0,0 @@
-'use strict';
-
-// do not edit .js files directly - edit src/index.jst
-
-
-  var envHasBigInt64Array = typeof BigInt64Array !== 'undefined';
-
-
-module.exports = function equal(a, b) {
-  if (a === b) return true;
-
-  if (a && b && typeof a == 'object' && typeof b == 'object') {
-    if (a.constructor !== b.constructor) return false;
-
-    var length, i, keys;
-    if (Array.isArray(a)) {
-      length = a.length;
-      if (length != b.length) return false;
-      for (i = length; i-- !== 0;)
-        if (!equal(a[i], b[i])) return false;
-      return true;
-    }
-
-
-    if ((a instanceof Map) && (b instanceof Map)) {
-      if (a.size !== b.size) return false;
-      for (i of a.entries())
-        if (!b.has(i[0])) return false;
-      for (i of a.entries())
-        if (!equal(i[1], b.get(i[0]))) return false;
-      return true;
-    }
-
-    if ((a instanceof Set) && (b instanceof Set)) {
-      if (a.size !== b.size) return false;
-      for (i of a.entries())
-        if (!b.has(i[0])) return false;
-      return true;
-    }
-
-    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
-      length = a.length;
-      if (length != b.length) return false;
-      for (i = length; i-- !== 0;)
-        if (a[i] !== b[i]) return false;
-      return true;
-    }
-
-
-    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
-    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
-    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
-
-    keys = Object.keys(a);
-    length = keys.length;
-    if (length !== Object.keys(b).length) return false;
-
-    for (i = length; i-- !== 0;)
-      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
-
-    for (i = length; i-- !== 0;) {
-      var key = keys[i];
-
-      if (!equal(a[key], b[key])) return false;
-    }
-
-    return true;
-  }
-
-  // true if both NaN, false otherwise
-  return a!==a && b!==b;
-};
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.d.ts
deleted file mode 100644
index c7eb9c796..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-declare const equal: (a: any, b: any) => boolean;
-export = equal;
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.js b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.js
deleted file mode 100644
index 98e2f9b71..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/es6/react.js
+++ /dev/null
@@ -1,79 +0,0 @@
-'use strict';
-
-// do not edit .js files directly - edit src/index.jst
-
-
-  var envHasBigInt64Array = typeof BigInt64Array !== 'undefined';
-
-
-module.exports = function equal(a, b) {
-  if (a === b) return true;
-
-  if (a && b && typeof a == 'object' && typeof b == 'object') {
-    if (a.constructor !== b.constructor) return false;
-
-    var length, i, keys;
-    if (Array.isArray(a)) {
-      length = a.length;
-      if (length != b.length) return false;
-      for (i = length; i-- !== 0;)
-        if (!equal(a[i], b[i])) return false;
-      return true;
-    }
-
-
-    if ((a instanceof Map) && (b instanceof Map)) {
-      if (a.size !== b.size) return false;
-      for (i of a.entries())
-        if (!b.has(i[0])) return false;
-      for (i of a.entries())
-        if (!equal(i[1], b.get(i[0]))) return false;
-      return true;
-    }
-
-    if ((a instanceof Set) && (b instanceof Set)) {
-      if (a.size !== b.size) return false;
-      for (i of a.entries())
-        if (!b.has(i[0])) return false;
-      return true;
-    }
-
-    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
-      length = a.length;
-      if (length != b.length) return false;
-      for (i = length; i-- !== 0;)
-        if (a[i] !== b[i]) return false;
-      return true;
-    }
-
-
-    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
-    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
-    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
-
-    keys = Object.keys(a);
-    length = keys.length;
-    if (length !== Object.keys(b).length) return false;
-
-    for (i = length; i-- !== 0;)
-      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
-
-    for (i = length; i-- !== 0;) {
-      var key = keys[i];
-
-      if (key === '_owner' && a.$$typeof) {
-        // React-specific: avoid traversing React elements' _owner.
-        //  _owner contains circular references
-        // and is not needed when comparing the actual elements (and not their owners)
-        continue;
-      }
-
-      if (!equal(a[key], b[key])) return false;
-    }
-
-    return true;
-  }
-
-  // true if both NaN, false otherwise
-  return a!==a && b!==b;
-};
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.d.ts
deleted file mode 100644
index 3c042caa7..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.d.ts
+++ /dev/null
@@ -1,4 +0,0 @@
-declare module 'fast-deep-equal' {
-    const equal: (a: any, b: any) => boolean;
-    export = equal;
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.js b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.js
deleted file mode 100644
index 30dd1ba78..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/index.js
+++ /dev/null
@@ -1,46 +0,0 @@
-'use strict';
-
-// do not edit .js files directly - edit src/index.jst
-
-
-
-module.exports = function equal(a, b) {
-  if (a === b) return true;
-
-  if (a && b && typeof a == 'object' && typeof b == 'object') {
-    if (a.constructor !== b.constructor) return false;
-
-    var length, i, keys;
-    if (Array.isArray(a)) {
-      length = a.length;
-      if (length != b.length) return false;
-      for (i = length; i-- !== 0;)
-        if (!equal(a[i], b[i])) return false;
-      return true;
-    }
-
-
-
-    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
-    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
-    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
-
-    keys = Object.keys(a);
-    length = keys.length;
-    if (length !== Object.keys(b).length) return false;
-
-    for (i = length; i-- !== 0;)
-      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
-
-    for (i = length; i-- !== 0;) {
-      var key = keys[i];
-
-      if (!equal(a[key], b[key])) return false;
-    }
-
-    return true;
-  }
-
-  // true if both NaN, false otherwise
-  return a!==a && b!==b;
-};
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/package.json b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/package.json
deleted file mode 100644
index 3cfe66c68..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/package.json
+++ /dev/null
@@ -1,61 +0,0 @@
-{
-  "name": "fast-deep-equal",
-  "version": "3.1.3",
-  "description": "Fast deep equal",
-  "main": "index.js",
-  "scripts": {
-    "eslint": "eslint *.js benchmark/*.js spec/*.js",
-    "build": "node build",
-    "benchmark": "npm i && npm run build && cd ./benchmark && npm i && node ./",
-    "test-spec": "mocha spec/*.spec.js -R spec",
-    "test-cov": "nyc npm run test-spec",
-    "test-ts": "tsc --target ES5 --noImplicitAny index.d.ts",
-    "test": "npm run build && npm run eslint && npm run test-ts && npm run test-cov",
-    "prepublish": "npm run build"
-  },
-  "repository": {
-    "type": "git",
-    "url": "git+https://github.com/epoberezkin/fast-deep-equal.git"
-  },
-  "keywords": [
-    "fast",
-    "equal",
-    "deep-equal"
-  ],
-  "author": "Evgeny Poberezkin",
-  "license": "MIT",
-  "bugs": {
-    "url": "https://github.com/epoberezkin/fast-deep-equal/issues"
-  },
-  "homepage": "https://github.com/epoberezkin/fast-deep-equal#readme",
-  "devDependencies": {
-    "coveralls": "^3.1.0",
-    "dot": "^1.1.2",
-    "eslint": "^7.2.0",
-    "mocha": "^7.2.0",
-    "nyc": "^15.1.0",
-    "pre-commit": "^1.2.2",
-    "react": "^16.12.0",
-    "react-test-renderer": "^16.12.0",
-    "sinon": "^9.0.2",
-    "typescript": "^3.9.5"
-  },
-  "nyc": {
-    "exclude": [
-      "**/spec/**",
-      "node_modules"
-    ],
-    "reporter": [
-      "lcov",
-      "text-summary"
-    ]
-  },
-  "files": [
-    "index.js",
-    "index.d.ts",
-    "react.js",
-    "react.d.ts",
-    "es6/"
-  ],
-  "types": "index.d.ts"
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.d.ts
deleted file mode 100644
index c7eb9c796..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.d.ts
+++ /dev/null
@@ -1,2 +0,0 @@
-declare const equal: (a: any, b: any) => boolean;
-export = equal;
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.js b/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.js
deleted file mode 100644
index 3489b9833..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-deep-equal/react.js
+++ /dev/null
@@ -1,53 +0,0 @@
-'use strict';
-
-// do not edit .js files directly - edit src/index.jst
-
-
-
-module.exports = function equal(a, b) {
-  if (a === b) return true;
-
-  if (a && b && typeof a == 'object' && typeof b == 'object') {
-    if (a.constructor !== b.constructor) return false;
-
-    var length, i, keys;
-    if (Array.isArray(a)) {
-      length = a.length;
-      if (length != b.length) return false;
-      for (i = length; i-- !== 0;)
-        if (!equal(a[i], b[i])) return false;
-      return true;
-    }
-
-
-
-    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
-    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
-    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
-
-    keys = Object.keys(a);
-    length = keys.length;
-    if (length !== Object.keys(b).length) return false;
-
-    for (i = length; i-- !== 0;)
-      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
-
-    for (i = length; i-- !== 0;) {
-      var key = keys[i];
-
-      if (key === '_owner' && a.$$typeof) {
-        // React-specific: avoid traversing React elements' _owner.
-        //  _owner contains circular references
-        // and is not needed when comparing the actual elements (and not their owners)
-        continue;
-      }
-
-      if (!equal(a[key], b[key])) return false;
-    }
-
-    return true;
-  }
-
-  // true if both NaN, false otherwise
-  return a!==a && b!==b;
-};
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.gitattributes b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.gitattributes
deleted file mode 100644
index a0e7df931..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.gitattributes
+++ /dev/null
@@ -1,2 +0,0 @@
-# Set default behavior to automatically convert line endings
-* text=auto eol=lf
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/.stale.yml b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/.stale.yml
deleted file mode 100644
index 2ee12691a..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/.stale.yml
+++ /dev/null
@@ -1,21 +0,0 @@
-# Number of days of inactivity before an issue becomes stale
-daysUntilStale: 15
-# Number of days of inactivity before a stale issue is closed
-daysUntilClose: 7
-# Issues with these labels will never be considered stale
-exemptLabels:
-  - "discussion"
-  - "feature request"
-  - "bug"
-  - "help wanted"
-  - "plugin suggestion"
-  - "good first issue"
-# Label to use when marking an issue as stale
-staleLabel: stale
-# Comment to post when marking an issue as stale. Set to `false` to disable
-markComment: >
-  This issue has been automatically marked as stale because it has not had
-  recent activity. It will be closed if no further activity occurs. Thank you
-  for your contributions.
-# Comment to post when closing a stale issue. Set to `false` to disable
-closeComment: false
\ No newline at end of file
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/dependabot.yml b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/dependabot.yml
deleted file mode 100644
index 35d66ca7a..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/dependabot.yml
+++ /dev/null
@@ -1,13 +0,0 @@
-version: 2
-updates:
-  - package-ecosystem: "github-actions"
-    directory: "/"
-    schedule:
-      interval: "monthly"
-    open-pull-requests-limit: 10
-
-  - package-ecosystem: "npm"
-    directory: "/"
-    schedule:
-      interval: "monthly"
-    open-pull-requests-limit: 10
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/tests_checker.yml b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/tests_checker.yml
deleted file mode 100644
index 769469b2a..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/tests_checker.yml
+++ /dev/null
@@ -1,8 +0,0 @@
-comment: |
-  Hello! Thank you for contributing!
-  It appears that you have changed the code, but the tests that verify your change are missing. Could you please add them?
-fileExtensions:
-  - '.ts'
-  - '.js'
-
-testDir: 'test'
\ No newline at end of file
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/ci.yml b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/ci.yml
deleted file mode 100644
index 588eca01c..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/ci.yml
+++ /dev/null
@@ -1,58 +0,0 @@
-name: CI
-
-on:
-  push:
-    branches:
-     - main
-     - master
-     - next
-     - 'v*'
-    paths-ignore:
-      - 'docs/**'
-      - '*.md'
-  pull_request:
-    paths-ignore:
-      - 'docs/**'
-      - '*.md'
-
-jobs:
-  test-regression-check-node10:
-    name: Test compatibility with Node.js 10
-    runs-on: ubuntu-latest
-    steps:
-      - uses: actions/checkout@v4
-        with:
-          persist-credentials: false
-
-      - uses: actions/setup-node@v4
-        with:
-          node-version: '10'
-          cache: 'npm'
-          cache-dependency-path: package.json
-          check-latest: true
-
-      - name: Install
-        run: |
-          npm install --ignore-scripts
-
-      - name: Copy project as fast-uri to node_node_modules
-        run: |
-          rm -rf ./node_modules/fast-uri/lib &&
-          rm -rf ./node_modules/fast-uri/index.js &&
-          cp -r ./lib ./node_modules/fast-uri/lib &&
-          cp ./index.js ./node_modules/fast-uri/index.js
-
-      - name: Run tests
-        run: |
-          npm run test:unit
-        env:
-          NODE_OPTIONS: no-network-family-autoselection
-
-  test:
-    needs:
-      - test-regression-check-node10
-    uses: fastify/workflows/.github/workflows/plugins-ci.yml@v5
-    with:
-      license-check: true
-      lint: true
-      node-versions: '["16", "18", "20", "22"]'
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/package-manager-ci.yml b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/package-manager-ci.yml
deleted file mode 100644
index 1ea2c6d8e..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/.github/workflows/package-manager-ci.yml
+++ /dev/null
@@ -1,20 +0,0 @@
-name: package-manager-ci
-
-on:
-  push:
-    branches:
-     - main
-     - master
-     - next
-     - 'v*'
-    paths-ignore:
-      - 'docs/**'
-      - '*.md'
-  pull_request:
-    paths-ignore:
-      - 'docs/**'
-      - '*.md'
-
-jobs:
-  test:
-    uses: fastify/workflows/.github/workflows/plugins-ci-package-manager.yml@v5
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/LICENSE b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/LICENSE
deleted file mode 100644
index a8d3465e3..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/LICENSE
+++ /dev/null
@@ -1,30 +0,0 @@
-Copyright (c) 2021 The Fastify Team
-Copyright (c) 2011-2021, Gary Court until https://github.com/garycourt/uri-js/commit/a1acf730b4bba3f1097c9f52e7d9d3aba8cdcaae
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without
-modification, are permitted provided that the following conditions are met:
-    * Redistributions of source code must retain the above copyright
-      notice, this list of conditions and the following disclaimer.
-    * Redistributions in binary form must reproduce the above copyright
-      notice, this list of conditions and the following disclaimer in the
-      documentation and/or other materials provided with the distribution.
-    * The names of any contributors may not be used to endorse or promote
-      products derived from this software without specific prior written
-      permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY
-DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
-ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-
-                                  *   *   *
-
-The complete list of contributors can be found at:
-- https://github.com/garycourt/uri-js/graphs/contributors
\ No newline at end of file
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/README.md b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/README.md
deleted file mode 100644
index ff429baa4..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/README.md
+++ /dev/null
@@ -1,130 +0,0 @@
-# fast-uri
-
-<div align="center">
-
-[![NPM version](https://img.shields.io/npm/v/fast-uri.svg?style=flat)](https://www.npmjs.com/package/fast-uri)
-[![CI](https://github.com/fastify/fast-uri/actions/workflows/ci.yml/badge.svg?branch=main)](https://github.com/fastify/fast-uri/actions/workflows/ci.yml)
-[![neostandard javascript style](https://img.shields.io/badge/code_style-neostandard-brightgreen?style=flat)](https://github.com/neostandard/neostandard)
-
-</div>
-
-Dependency-free RFC 3986 URI toolbox.
-
-## Usage
-
-## Options
-
-All of the above functions can accept an additional options argument that is an object that can contain one or more of the following properties:
-
-*	`scheme` (string)
-	Indicates the scheme that the URI should be treated as, overriding the URI's normal scheme parsing behavior.
-
-*	`reference` (string)
-	If set to `"suffix"`, it indicates that the URI is in the suffix format and the parser will use the option's `scheme` property to determine the URI's scheme.
-
-*	`tolerant` (boolean, false)
-	If set to `true`, the parser will relax URI resolving rules.
-
-*	`absolutePath` (boolean, false)
-	If set to `true`, the serializer will not resolve a relative `path` component.
-
-*	`unicodeSupport` (boolean, false)
-	If set to `true`, the parser will unescape non-ASCII characters in the parsed output as per [RFC 3987](http://www.ietf.org/rfc/rfc3987.txt).
-
-*	`domainHost` (boolean, false)
-	If set to `true`, the library will treat the `host` component as a domain name, and convert IDNs (International Domain Names) as per [RFC 5891](http://www.ietf.org/rfc/rfc5891.txt).
-
-### Parse
-
-```js
-const uri = require('fast-uri')
-uri.parse('uri://user:pass@example.com:123/one/two.three?q1=a1&q2=a2#body')
-// Output
-{
-  scheme: "uri",
-  userinfo: "user:pass",
-  host: "example.com",
-  port: 123,
-  path: "/one/two.three",
-  query: "q1=a1&q2=a2",
-  fragment: "body"
-}
-```
-
-### Serialize
-
-```js
-const uri = require('fast-uri')
-uri.serialize({scheme: "http", host: "example.com", fragment: "footer"})
-// Output
-"http://example.com/#footer"
-
-```
-
-### Resolve
-
-```js
-const uri = require('fast-uri')
-uri.resolve("uri://a/b/c/d?q", "../../g")
-// Output
-"uri://a/g"
-```
-
-### Equal
-
-```js
-const uri = require('fast-uri')
-uri.equal("example://a/b/c/%7Bfoo%7D", "eXAMPLE://a/./b/../b/%63/%7bfoo%7d")
-// Output
-true
-```
-
-## Scheme supports
-
-fast-uri supports inserting custom [scheme](http://en.wikipedia.org/wiki/URI_scheme)-dependent processing rules. Currently, fast-uri has built-in support for the following schemes:
-
-*	http \[[RFC 2616](http://www.ietf.org/rfc/rfc2616.txt)\]
-*	https \[[RFC 2818](http://www.ietf.org/rfc/rfc2818.txt)\]
-*	ws \[[RFC 6455](http://www.ietf.org/rfc/rfc6455.txt)\]
-*	wss \[[RFC 6455](http://www.ietf.org/rfc/rfc6455.txt)\]
-*	urn \[[RFC 2141](http://www.ietf.org/rfc/rfc2141.txt)\]
-*	urn:uuid \[[RFC 4122](http://www.ietf.org/rfc/rfc4122.txt)\]
-
-
-## Benchmarks
-
-```
-fast-uri: parse domain x 1,306,864 ops/sec ¬±0.31% (100 runs sampled)
-urijs: parse domain x 483,001 ops/sec ¬±0.09% (99 runs sampled)
-WHATWG URL: parse domain x 862,461 ops/sec ¬±0.18% (97 runs sampled)
-fast-uri: parse IPv4 x 2,381,452 ops/sec ¬±0.26% (96 runs sampled)
-urijs: parse IPv4 x 384,705 ops/sec ¬±0.34% (99 runs sampled)
-WHATWG URL: parse IPv4 NOT SUPPORTED
-fast-uri: parse IPv6 x 923,519 ops/sec ¬±0.09% (100 runs sampled)
-urijs: parse IPv6 x 289,070 ops/sec ¬±0.07% (95 runs sampled)
-WHATWG URL: parse IPv6 NOT SUPPORTED
-fast-uri: parse URN x 2,596,395 ops/sec ¬±0.42% (98 runs sampled)
-urijs: parse URN x 1,152,412 ops/sec ¬±0.09% (97 runs sampled)
-WHATWG URL: parse URN x 1,183,307 ops/sec ¬±0.38% (100 runs sampled)
-fast-uri: parse URN uuid x 1,666,861 ops/sec ¬±0.10% (98 runs sampled)
-urijs: parse URN uuid x 852,724 ops/sec ¬±0.17% (95 runs sampled)
-WHATWG URL: parse URN uuid NOT SUPPORTED
-fast-uri: serialize uri x 1,741,499 ops/sec ¬±0.57% (95 runs sampled)
-urijs: serialize uri x 389,014 ops/sec ¬±0.28% (93 runs sampled)
-fast-uri: serialize IPv6 x 441,095 ops/sec ¬±0.37% (97 runs sampled)
-urijs: serialize IPv6 x 255,443 ops/sec ¬±0.58% (94 runs sampled)
-fast-uri: serialize ws x 1,448,667 ops/sec ¬±0.25% (97 runs sampled)
-urijs: serialize ws x 352,884 ops/sec ¬±0.08% (96 runs sampled)
-fast-uri: resolve x 340,084 ops/sec ¬±0.98% (98 runs sampled)
-urijs: resolve x 225,759 ops/sec ¬±0.37% (95 runs sampled)
-```
-
-## TODO
-
-- [ ] Support MailTo
-- [ ] Be 100% iso compatible with uri-js
-- [ ] Add browser test stack
-
-## License
-
-Licensed under [BSD-3-Clause](./LICENSE).
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/benchmark.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/benchmark.js
deleted file mode 100644
index 5eed73e07..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/benchmark.js
+++ /dev/null
@@ -1,105 +0,0 @@
-'use strict'
-
-const benchmark = require('benchmark')
-const suite = new benchmark.Suite()
-const fasturi = require('./')
-const urijs = require('uri-js')
-
-const base = 'uri://a/b/c/d;p?q'
-
-const domain = 'https://example.com/foo#bar$fiz'
-const ipv4 = '//10.10.10.10'
-const ipv6 = '//[2001:db8::7]'
-const urn = 'urn:foo:a123,456'
-const urnuuid = 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
-
-// Initialization as there is a lot to parse at first
-// eg: regexes
-fasturi.parse(domain)
-urijs.parse(domain)
-
-suite.add('fast-uri: parse domain', function () {
-  fasturi.parse(domain)
-})
-suite.add('urijs: parse domain', function () {
-  urijs.parse(domain)
-})
-suite.add('WHATWG URL: parse domain', function () {
-  // eslint-disable-next-line
-  new URL(domain)
-})
-suite.add('fast-uri: parse IPv4', function () {
-  fasturi.parse(ipv4)
-})
-suite.add('urijs: parse IPv4', function () {
-  urijs.parse(ipv4)
-})
-suite.add('fast-uri: parse IPv6', function () {
-  fasturi.parse(ipv6)
-})
-suite.add('urijs: parse IPv6', function () {
-  urijs.parse(ipv6)
-})
-suite.add('fast-uri: parse URN', function () {
-  fasturi.parse(urn)
-})
-suite.add('urijs: parse URN', function () {
-  urijs.parse(urn)
-})
-suite.add('WHATWG URL: parse URN', function () {
-  // eslint-disable-next-line
-  new URL(urn)
-})
-suite.add('fast-uri: parse URN uuid', function () {
-  fasturi.parse(urnuuid)
-})
-suite.add('urijs: parse URN uuid', function () {
-  urijs.parse(urnuuid)
-})
-suite.add('fast-uri: serialize uri', function () {
-  fasturi.serialize({
-    scheme: 'uri',
-    userinfo: 'foo:bar',
-    host: 'example.com',
-    port: 1,
-    path: 'path',
-    query: 'query',
-    fragment: 'fragment'
-  })
-})
-suite.add('urijs: serialize uri', function () {
-  urijs.serialize({
-    scheme: 'uri',
-    userinfo: 'foo:bar',
-    host: 'example.com',
-    port: 1,
-    path: 'path',
-    query: 'query',
-    fragment: 'fragment'
-  })
-})
-suite.add('fast-uri: serialize IPv6', function () {
-  fasturi.serialize({ host: '2606:2800:220:1:248:1893:25c8:1946' })
-})
-suite.add('urijs: serialize IPv6', function () {
-  urijs.serialize({ host: '2606:2800:220:1:248:1893:25c8:1946' })
-})
-suite.add('fast-uri: serialize ws', function () {
-  fasturi.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: true })
-})
-suite.add('urijs: serialize ws', function () {
-  urijs.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: true })
-})
-suite.add('fast-uri: resolve', function () {
-  fasturi.resolve(base, '../../../g')
-})
-suite.add('urijs: resolve', function () {
-  urijs.resolve(base, '../../../g')
-})
-suite.on('cycle', cycle)
-
-suite.run()
-
-function cycle (e) {
-  console.log(e.target.toString())
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/eslint.config.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/eslint.config.js
deleted file mode 100644
index 89fd678fe..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/eslint.config.js
+++ /dev/null
@@ -1,6 +0,0 @@
-'use strict'
-
-module.exports = require('neostandard')({
-  ignores: require('neostandard').resolveIgnoresFromGitignore(),
-  ts: true
-})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/index.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/index.js
deleted file mode 100644
index ab6c477c5..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/index.js
+++ /dev/null
@@ -1,303 +0,0 @@
-'use strict'
-
-const { normalizeIPv6, normalizeIPv4, removeDotSegments, recomposeAuthority, normalizeComponentEncoding } = require('./lib/utils')
-const SCHEMES = require('./lib/schemes')
-
-function normalize (uri, options) {
-  if (typeof uri === 'string') {
-    uri = serialize(parse(uri, options), options)
-  } else if (typeof uri === 'object') {
-    uri = parse(serialize(uri, options), options)
-  }
-  return uri
-}
-
-function resolve (baseURI, relativeURI, options) {
-  const schemelessOptions = Object.assign({ scheme: 'null' }, options)
-  const resolved = resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true)
-  return serialize(resolved, { ...schemelessOptions, skipEscape: true })
-}
-
-function resolveComponents (base, relative, options, skipNormalization) {
-  const target = {}
-  if (!skipNormalization) {
-    base = parse(serialize(base, options), options) // normalize base components
-    relative = parse(serialize(relative, options), options) // normalize relative components
-  }
-  options = options || {}
-
-  if (!options.tolerant && relative.scheme) {
-    target.scheme = relative.scheme
-    // target.authority = relative.authority;
-    target.userinfo = relative.userinfo
-    target.host = relative.host
-    target.port = relative.port
-    target.path = removeDotSegments(relative.path || '')
-    target.query = relative.query
-  } else {
-    if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
-      // target.authority = relative.authority;
-      target.userinfo = relative.userinfo
-      target.host = relative.host
-      target.port = relative.port
-      target.path = removeDotSegments(relative.path || '')
-      target.query = relative.query
-    } else {
-      if (!relative.path) {
-        target.path = base.path
-        if (relative.query !== undefined) {
-          target.query = relative.query
-        } else {
-          target.query = base.query
-        }
-      } else {
-        if (relative.path.charAt(0) === '/') {
-          target.path = removeDotSegments(relative.path)
-        } else {
-          if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
-            target.path = '/' + relative.path
-          } else if (!base.path) {
-            target.path = relative.path
-          } else {
-            target.path = base.path.slice(0, base.path.lastIndexOf('/') + 1) + relative.path
-          }
-          target.path = removeDotSegments(target.path)
-        }
-        target.query = relative.query
-      }
-      // target.authority = base.authority;
-      target.userinfo = base.userinfo
-      target.host = base.host
-      target.port = base.port
-    }
-    target.scheme = base.scheme
-  }
-
-  target.fragment = relative.fragment
-
-  return target
-}
-
-function equal (uriA, uriB, options) {
-  if (typeof uriA === 'string') {
-    uriA = unescape(uriA)
-    uriA = serialize(normalizeComponentEncoding(parse(uriA, options), true), { ...options, skipEscape: true })
-  } else if (typeof uriA === 'object') {
-    uriA = serialize(normalizeComponentEncoding(uriA, true), { ...options, skipEscape: true })
-  }
-
-  if (typeof uriB === 'string') {
-    uriB = unescape(uriB)
-    uriB = serialize(normalizeComponentEncoding(parse(uriB, options), true), { ...options, skipEscape: true })
-  } else if (typeof uriB === 'object') {
-    uriB = serialize(normalizeComponentEncoding(uriB, true), { ...options, skipEscape: true })
-  }
-
-  return uriA.toLowerCase() === uriB.toLowerCase()
-}
-
-function serialize (cmpts, opts) {
-  const components = {
-    host: cmpts.host,
-    scheme: cmpts.scheme,
-    userinfo: cmpts.userinfo,
-    port: cmpts.port,
-    path: cmpts.path,
-    query: cmpts.query,
-    nid: cmpts.nid,
-    nss: cmpts.nss,
-    uuid: cmpts.uuid,
-    fragment: cmpts.fragment,
-    reference: cmpts.reference,
-    resourceName: cmpts.resourceName,
-    secure: cmpts.secure,
-    error: ''
-  }
-  const options = Object.assign({}, opts)
-  const uriTokens = []
-
-  // find scheme handler
-  const schemeHandler = SCHEMES[(options.scheme || components.scheme || '').toLowerCase()]
-
-  // perform scheme specific serialization
-  if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options)
-
-  if (components.path !== undefined) {
-    if (!options.skipEscape) {
-      components.path = escape(components.path)
-
-      if (components.scheme !== undefined) {
-        components.path = components.path.split('%3A').join(':')
-      }
-    } else {
-      components.path = unescape(components.path)
-    }
-  }
-
-  if (options.reference !== 'suffix' && components.scheme) {
-    uriTokens.push(components.scheme, ':')
-  }
-
-  const authority = recomposeAuthority(components)
-  if (authority !== undefined) {
-    if (options.reference !== 'suffix') {
-      uriTokens.push('//')
-    }
-
-    uriTokens.push(authority)
-
-    if (components.path && components.path.charAt(0) !== '/') {
-      uriTokens.push('/')
-    }
-  }
-  if (components.path !== undefined) {
-    let s = components.path
-
-    if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
-      s = removeDotSegments(s)
-    }
-
-    if (authority === undefined) {
-      s = s.replace(/^\/\//u, '/%2F') // don't allow the path to start with "//"
-    }
-
-    uriTokens.push(s)
-  }
-
-  if (components.query !== undefined) {
-    uriTokens.push('?', components.query)
-  }
-
-  if (components.fragment !== undefined) {
-    uriTokens.push('#', components.fragment)
-  }
-  return uriTokens.join('')
-}
-
-const hexLookUp = Array.from({ length: 127 }, (_v, k) => /[^!"$&'()*+,\-.;=_`a-z{}~]/u.test(String.fromCharCode(k)))
-
-function nonSimpleDomain (value) {
-  let code = 0
-  for (let i = 0, len = value.length; i < len; ++i) {
-    code = value.charCodeAt(i)
-    if (code > 126 || hexLookUp[code]) {
-      return true
-    }
-  }
-  return false
-}
-
-const URI_PARSE = /^(?:([^#/:?]+):)?(?:\/\/((?:([^#/?@]*)@)?(\[[^#/?\]]+\]|[^#/:?]*)(?::(\d*))?))?([^#?]*)(?:\?([^#]*))?(?:#((?:.|[\n\r])*))?/u
-
-function parse (uri, opts) {
-  const options = Object.assign({}, opts)
-  const parsed = {
-    scheme: undefined,
-    userinfo: undefined,
-    host: '',
-    port: undefined,
-    path: '',
-    query: undefined,
-    fragment: undefined
-  }
-  const gotEncoding = uri.indexOf('%') !== -1
-  let isIP = false
-  if (options.reference === 'suffix') uri = (options.scheme ? options.scheme + ':' : '') + '//' + uri
-
-  const matches = uri.match(URI_PARSE)
-
-  if (matches) {
-    // store each component
-    parsed.scheme = matches[1]
-    parsed.userinfo = matches[3]
-    parsed.host = matches[4]
-    parsed.port = parseInt(matches[5], 10)
-    parsed.path = matches[6] || ''
-    parsed.query = matches[7]
-    parsed.fragment = matches[8]
-
-    // fix port number
-    if (isNaN(parsed.port)) {
-      parsed.port = matches[5]
-    }
-    if (parsed.host) {
-      const ipv4result = normalizeIPv4(parsed.host)
-      if (ipv4result.isIPV4 === false) {
-        const ipv6result = normalizeIPv6(ipv4result.host)
-        parsed.host = ipv6result.host.toLowerCase()
-        isIP = ipv6result.isIPV6
-      } else {
-        parsed.host = ipv4result.host
-        isIP = true
-      }
-    }
-    if (parsed.scheme === undefined && parsed.userinfo === undefined && parsed.host === undefined && parsed.port === undefined && parsed.query === undefined && !parsed.path) {
-      parsed.reference = 'same-document'
-    } else if (parsed.scheme === undefined) {
-      parsed.reference = 'relative'
-    } else if (parsed.fragment === undefined) {
-      parsed.reference = 'absolute'
-    } else {
-      parsed.reference = 'uri'
-    }
-
-    // check for reference errors
-    if (options.reference && options.reference !== 'suffix' && options.reference !== parsed.reference) {
-      parsed.error = parsed.error || 'URI is not a ' + options.reference + ' reference.'
-    }
-
-    // find scheme handler
-    const schemeHandler = SCHEMES[(options.scheme || parsed.scheme || '').toLowerCase()]
-
-    // check if scheme can't handle IRIs
-    if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
-      // if host component is a domain name
-      if (parsed.host && (options.domainHost || (schemeHandler && schemeHandler.domainHost)) && isIP === false && nonSimpleDomain(parsed.host)) {
-        // convert Unicode IDN -> ASCII IDN
-        try {
-          parsed.host = URL.domainToASCII(parsed.host.toLowerCase())
-        } catch (e) {
-          parsed.error = parsed.error || "Host's domain name can not be converted to ASCII: " + e
-        }
-      }
-      // convert IRI -> URI
-    }
-
-    if (!schemeHandler || (schemeHandler && !schemeHandler.skipNormalize)) {
-      if (gotEncoding && parsed.scheme !== undefined) {
-        parsed.scheme = unescape(parsed.scheme)
-      }
-      if (gotEncoding && parsed.host !== undefined) {
-        parsed.host = unescape(parsed.host)
-      }
-      if (parsed.path) {
-        parsed.path = escape(unescape(parsed.path))
-      }
-      if (parsed.fragment) {
-        parsed.fragment = encodeURI(decodeURIComponent(parsed.fragment))
-      }
-    }
-
-    // perform scheme specific parsing
-    if (schemeHandler && schemeHandler.parse) {
-      schemeHandler.parse(parsed, options)
-    }
-  } else {
-    parsed.error = parsed.error || 'URI can not be parsed.'
-  }
-  return parsed
-}
-
-const fastUri = {
-  SCHEMES,
-  normalize,
-  resolve,
-  resolveComponents,
-  equal,
-  serialize,
-  parse
-}
-
-module.exports = fastUri
-module.exports.default = fastUri
-module.exports.fastUri = fastUri
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/package.json b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/package.json
deleted file mode 100644
index 7fc10990f..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/package.json
+++ /dev/null
@@ -1,68 +0,0 @@
-{
-  "name": "fast-uri",
-  "description": "Dependency-free RFC 3986 URI toolbox",
-  "version": "3.0.6",
-  "main": "index.js",
-  "type": "commonjs",
-  "types": "types/index.d.ts",
-  "license": "BSD-3-Clause",
-  "author": "Vincent Le Goff <vince.legoff@gmail.com> (https://github.com/zekth)",
-  "contributors": [
-    {
-      "name": "Matteo Collina",
-      "email": "hello@matteocollina.com"
-    },
-    {
-      "name": "G√ºrg√ºn Dayƒ±oƒülu",
-      "email": "hey@gurgun.day",
-      "url": "https://heyhey.to/G"
-    },
-    {
-      "name": "Aras Abbasi",
-      "email": "aras.abbasi@gmail.com"
-    },
-    {
-      "name": "Frazer Smith",
-      "email": "frazer.dev@icloud.com",
-      "url": "https://github.com/fdawgs"
-    }
-  ],
-  "repository": {
-    "type": "git",
-    "url": "git+https://github.com/fastify/fast-uri.git"
-  },
-  "bugs": {
-    "url": "https://github.com/fastify/fast-uri/issues"
-  },
-  "homepage": "https://github.com/fastify/fast-uri",
-  "funding": [
-    {
-      "type": "github",
-      "url": "https://github.com/sponsors/fastify"
-    },
-    {
-      "type": "opencollective",
-      "url": "https://opencollective.com/fastify"
-    }
-  ],
-  "scripts": {
-    "bench": "node benchmark.js",
-    "lint": "eslint",
-    "lint:fix": "eslint --fix",
-    "test": "npm run test:unit && npm run test:typescript",
-    "test:unit": "tape test/**/*.js",
-    "test:unit:dev": "npm run test:unit -- --coverage-report=html",
-    "test:typescript": "tsd"
-  },
-  "devDependencies": {
-    "@fastify/pre-commit": "^2.1.0",
-    "ajv": "^8.16.0",
-    "benchmark": "^2.1.4",
-    "coveralls": "^3.1.1",
-    "eslint": "^9.17.0",
-    "neostandard": "^0.12.0",
-    "tape": "^5.8.1",
-    "tsd": "^0.31.0",
-    "uri-js": "^4.4.1"
-  }
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/.gitkeep b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/.gitkeep
deleted file mode 100644
index e69de29bb..000000000
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/ajv.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/ajv.test.js
deleted file mode 100644
index e78c4d7f8..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/ajv.test.js
+++ /dev/null
@@ -1,39 +0,0 @@
-const AJV = require('ajv')
-const fastUri = require('../')
-const ajv = new AJV({
-  uriResolver: fastUri // comment this line to see it works with uri-js
-})
-const test = require('tape')
-
-test('ajv', t => {
-  t.plan(1)
-  const schema = {
-    $ref: '#/definitions/Record%3Cstring%2CPerson%3E',
-    definitions: {
-      Person: {
-        type: 'object',
-        properties: {
-          firstName: {
-            type: 'string'
-          }
-        }
-      },
-      'Record<string,Person>': {
-        type: 'object',
-        additionalProperties: {
-          $ref: '#/definitions/Person'
-        }
-      }
-    }
-  }
-
-  const data = {
-    joe: {
-      firstName: 'Joe'
-    }
-
-  }
-
-  const validate = ajv.compile(schema)
-  t.ok(validate(data))
-})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/compatibility.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/compatibility.test.js
deleted file mode 100644
index 89886d17d..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/compatibility.test.js
+++ /dev/null
@@ -1,131 +0,0 @@
-'use strict'
-
-const test = require('tape')
-const fastifyURI = require('../')
-const urijs = require('uri-js')
-
-test('compatibility Parse', (t) => {
-  const toParse = [
-    '//www.g.com/error\n/bleh/bleh',
-    'https://fastify.org',
-    '/definitions/Record%3Cstring%2CPerson%3E',
-    '//10.10.10.10',
-    // '//10.10.000.10', <-- not a valid URI per URI spec: https://datatracker.ietf.org/doc/html/rfc5954#section-4.1
-    '//[2001:db8::7%en0]',
-    '//[2001:dbZ::1]:80',
-    '//[2001:db8::1]:80',
-    '//[2001:db8::001]:80',
-    'uri://user:pass@example.com:123/one/two.three?q1=a1&q2=a2#body',
-    'http://user:pass@example.com:123/one/space in.url?q1=a1&q2=a2#body',
-    'http://User:Pass@example.com:123/one/space in.url?q1=a1&q2=a2#body',
-    'http://A%3AB@example.com:123/one/space',
-    '//[::ffff:129.144.52.38]',
-    'uri://10.10.10.10.example.com/en/process',
-    '//[2606:2800:220:1:248:1893:25c8:1946]/test',
-    'ws://example.com/chat',
-    'ws://example.com/foo?bar=baz',
-    'wss://example.com/?bar=baz',
-    'wss://example.com/chat',
-    'wss://example.com/foo?bar=baz',
-    'wss://example.com/?bar=baz',
-    'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6',
-    'urn:uuid:notauuid-7dec-11d0-a765-00a0c91e6bf6',
-    'urn:example:%D0%B0123,z456',
-    '//[2606:2800:220:1:248:1893:25c8:1946:43209]',
-    'http://foo.bar',
-    'http://',
-    '#/$defs/stringMap',
-    '#/$defs/string%20Map',
-    '#/$defs/string Map',
-    '//?json=%7B%22foo%22%3A%22bar%22%7D'
-    //  'mailto:chris@example.com'-203845,
-    //  'mailto:infobot@example.com?subject=current-issue',
-    //  'mailto:infobot@example.com?body=send%20current-issue',
-    //  'mailto:infobot@example.com?body=send%20current-issue%0D%0Asend%20index',
-    //  'mailto:list@example.org?In-Reply-To=%3C3469A91.D10AF4C@example.com%3E',
-    //  'mailto:majordomo@example.com?body=subscribe%20bamboo-l',
-    //  'mailto:joe@example.com?cc=bob@example.com&body=hello',
-    //  'mailto:gorby%25kremvax@example.com',
-    //  'mailto:unlikely%3Faddress@example.com?blat=foop',
-    //  'mailto:Mike%26family@example.org',
-    //  'mailto:%22not%40me%22@example.org',
-    //  'mailto:%22oh%5C%5Cno%22@example.org',
-    //  'mailto:%22%5C%5C%5C%22it\'s%5C%20ugly%5C%5C%5C%22%22@example.org',
-    //  'mailto:user@example.org?subject=caf%C3%A9',
-    //  'mailto:user@example.org?subject=%3D%3Futf-8%3FQ%3Fcaf%3DC3%3DA9%3F%3D',
-    //  'mailto:user@example.org?subject=%3D%3Fiso-8859-1%3FQ%3Fcaf%3DE9%3F%3D',
-    //  'mailto:user@example.org?subject=caf%C3%A9&body=caf%C3%A9',
-    //  'mailto:user@%E7%B4%8D%E8%B1%86.example.org?subject=Test&body=NATTO'
-  ]
-  toParse.forEach((x) => {
-    t.same(fastifyURI.parse(x), urijs.parse(x), 'Compatibility parse: ' + x)
-  })
-  t.end()
-})
-
-test('compatibility serialize', (t) => {
-  const toSerialize = [
-    { host: '10.10.10.10.example.com' },
-    { host: '2001:db8::7' },
-    { host: '::ffff:129.144.52.38' },
-    { host: '2606:2800:220:1:248:1893:25c8:1946' },
-    { host: '10.10.10.10.example.com' },
-    { host: '10.10.10.10' },
-    { path: '?query' },
-    { path: 'foo:bar' },
-    { path: '//path' },
-    {
-      scheme: 'uri',
-      host: 'example.com',
-      port: '9000'
-    },
-    {
-      scheme: 'uri',
-      userinfo: 'foo:bar',
-      host: 'example.com',
-      port: 1,
-      path: 'path',
-      query: 'query',
-      fragment: 'fragment'
-    },
-    {
-      scheme: '',
-      userinfo: '',
-      host: '',
-      port: 0,
-      path: '',
-      query: '',
-      fragment: ''
-    },
-    {
-      scheme: undefined,
-      userinfo: undefined,
-      host: undefined,
-      port: undefined,
-      path: undefined,
-      query: undefined,
-      fragment: undefined
-    },
-    { host: 'fe80::a%en1' },
-    { host: 'fe80::a%25en1' },
-    {
-      scheme: 'ws',
-      host: 'example.com',
-      resourceName: '/foo?bar',
-      secure: true
-    },
-    {
-      scheme: 'scheme',
-      path: 'with:colon'
-    }
-  ]
-  toSerialize.forEach((x) => {
-    const r = JSON.stringify(x)
-    t.same(
-      fastifyURI.serialize(x),
-      urijs.serialize(x),
-      'Compatibility serialize: ' + JSON.stringify(r)
-    )
-  })
-  t.end()
-})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/equal.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/equal.test.js
deleted file mode 100644
index 2773268b2..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/equal.test.js
+++ /dev/null
@@ -1,103 +0,0 @@
-'use strict'
-
-const test = require('tape')
-const URI = require('../')
-
-const fn = URI.equal
-const runTest = (t, suite) => {
-  suite.forEach(s => {
-    const operator = s.result ? '==' : '!='
-    t.equal(fn(s.pair[0], s.pair[1]), s.result, `${s.pair[0]} ${operator} ${s.pair[1]}`)
-    t.equal(fn(s.pair[1], s.pair[0]), s.result, `${s.pair[1]} ${operator} ${s.pair[0]}`)
-  })
-}
-
-test('URI Equals', (t) => {
-  const suite = [
-    { pair: ['example://a/b/c/%7Bfoo%7D', 'eXAMPLE://a/./b/../b/%63/%7bfoo%7d'], result: true }, // test from RFC 3986
-    { pair: ['http://example.org/~user', 'http://example.org/%7euser'], result: true } // test from RFC 3987
-  ]
-  runTest(t, suite)
-  t.end()
-})
-
-//   test('IRI Equals', (t) => {
-//     // example from RFC 3987
-//     t.equal(URI.equal('example://a/b/c/%7Bfoo%7D/ros\xE9', 'eXAMPLE://a/./b/../b/%63/%7bfoo%7d/ros%C3%A9', IRI_OPTION), true)
-//     t.end()
-//   })
-
-test('HTTP Equals', (t) => {
-  const suite = [
-    // test from RFC 2616
-    { pair: ['http://abc.com:80/~smith/home.html', 'http://abc.com/~smith/home.html'], result: true },
-    { pair: [{ scheme: 'http', host: 'abc.com', port: 80, path: '/~smith/home.html' }, 'http://abc.com/~smith/home.html'], result: true },
-    { pair: ['http://ABC.com/%7Esmith/home.html', 'http://abc.com/~smith/home.html'], result: true },
-    { pair: ['http://ABC.com:/%7esmith/home.html', 'http://abc.com/~smith/home.html'], result: true },
-    { pair: ['HTTP://ABC.COM', 'http://abc.com/'], result: true },
-    // test from RFC 3986
-    { pair: ['http://example.com:/', 'http://example.com:80/'], result: true }
-  ]
-  runTest(t, suite)
-  t.end()
-})
-
-test('HTTPS Equals', (t) => {
-  const suite = [
-    { pair: ['https://example.com', 'https://example.com:443/'], result: true },
-    { pair: ['https://example.com:/', 'https://example.com:443/'], result: true }
-  ]
-  runTest(t, suite)
-  t.end()
-})
-
-test('URN Equals', (t) => {
-  const suite = [
-    // test from RFC 2141
-    { pair: ['urn:foo:a123,456', 'urn:foo:a123,456'], result: true },
-    { pair: ['urn:foo:a123,456', 'URN:foo:a123,456'], result: true },
-    { pair: ['urn:foo:a123,456', 'urn:FOO:a123,456'], result: true }
-  ]
-
-  // Disabling for now as the whole equal logic might need
-  // to be refactored
-  // t.equal(URI.equal('urn:foo:a123,456', 'urn:foo:A123,456'), false)
-  // t.equal(URI.equal('urn:foo:a123%2C456', 'URN:FOO:a123%2c456'), true)
-
-  runTest(t, suite)
-  t.end()
-})
-
-test('UUID Equals', (t) => {
-  const suite = [
-    { pair: ['URN:UUID:F81D4FAE-7DEC-11D0-A765-00A0C91E6BF6', 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'], result: true }
-  ]
-
-  runTest(t, suite)
-  t.end()
-})
-
-// test('Mailto Equals', (t) => {
-//   // tests from RFC 6068
-//   t.equal(URI.equal('mailto:addr1@an.example,addr2@an.example', 'mailto:?to=addr1@an.example,addr2@an.example'), true)
-//   t.equal(URI.equal('mailto:?to=addr1@an.example,addr2@an.example', 'mailto:addr1@an.example?to=addr2@an.example'), true)
-//   t.end()
-// })
-
-test('WS Equal', (t) => {
-  const suite = [
-    { pair: ['WS://ABC.COM:80/chat#one', 'ws://abc.com/chat'], result: true }
-  ]
-
-  runTest(t, suite)
-  t.end()
-})
-
-test('WSS Equal', (t) => {
-  const suite = [
-    { pair: ['WSS://ABC.COM:443/chat#one', 'wss://abc.com/chat'], result: true }
-  ]
-
-  runTest(t, suite)
-  t.end()
-})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/parse.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/parse.test.js
deleted file mode 100644
index ed29cc0ff..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/parse.test.js
+++ /dev/null
@@ -1,318 +0,0 @@
-'use strict'
-
-const test = require('tape')
-const URI = require('../')
-
-test('URI parse', (t) => {
-  let components
-
-  // scheme
-  components = URI.parse('uri:')
-  t.equal(components.error, undefined, 'scheme errors')
-  t.equal(components.scheme, 'uri', 'scheme')
-  // t.equal(components.authority, undefined, "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // userinfo
-  components = URI.parse('//@')
-  t.equal(components.error, undefined, 'userinfo errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  // t.equal(components.authority, "@", "authority");
-  t.equal(components.userinfo, '', 'userinfo')
-  t.equal(components.host, '', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // host
-  components = URI.parse('//')
-  t.equal(components.error, undefined, 'host errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  // t.equal(components.authority, "", "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // port
-  components = URI.parse('//:')
-  t.equal(components.error, undefined, 'port errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  // t.equal(components.authority, ":", "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '', 'host')
-  t.equal(components.port, '', 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // path
-  components = URI.parse('')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  // t.equal(components.authority, undefined, "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // query
-  components = URI.parse('?')
-  t.equal(components.error, undefined, 'query errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  // t.equal(components.authority, undefined, "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, '', 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // fragment
-  components = URI.parse('#')
-  t.equal(components.error, undefined, 'fragment errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  // t.equal(components.authority, undefined, "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '', 'fragment')
-
-  // fragment with character tabulation
-  components = URI.parse('#\t')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  // t.equal(components.authority, undefined, "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '%09', 'fragment')
-
-  // fragment with line feed
-  components = URI.parse('#\n')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  // t.equal(components.authority, undefined, "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '%0A', 'fragment')
-
-  // fragment with line tabulation
-  components = URI.parse('#\v')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  // t.equal(components.authority, undefined, "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '%0B', 'fragment')
-
-  // fragment with form feed
-  components = URI.parse('#\f')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  // t.equal(components.authority, undefined, "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '%0C', 'fragment')
-
-  // fragment with carriage return
-  components = URI.parse('#\r')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  // t.equal(components.authority, undefined, "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '%0D', 'fragment')
-
-  // all
-  components = URI.parse('uri://user:pass@example.com:123/one/two.three?q1=a1&q2=a2#body')
-  t.equal(components.error, undefined, 'all errors')
-  t.equal(components.scheme, 'uri', 'scheme')
-  // t.equal(components.authority, "user:pass@example.com:123", "authority");
-  t.equal(components.userinfo, 'user:pass', 'userinfo')
-  t.equal(components.host, 'example.com', 'host')
-  t.equal(components.port, 123, 'port')
-  t.equal(components.path, '/one/two.three', 'path')
-  t.equal(components.query, 'q1=a1&q2=a2', 'query')
-  t.equal(components.fragment, 'body', 'fragment')
-
-  // IPv4address
-  components = URI.parse('//10.10.10.10')
-  t.equal(components.error, undefined, 'IPv4address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '10.10.10.10', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // IPv4address with unformated 0 stay as-is
-  components = URI.parse('//10.10.000.10') // not valid as per https://datatracker.ietf.org/doc/html/rfc5954#section-4.1
-  t.equal(components.error, undefined, 'IPv4address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '10.10.000.10', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-  components = URI.parse('//01.01.01.01') // not valid in URIs: https://datatracker.ietf.org/doc/html/rfc3986#section-7.4
-  t.equal(components.error, undefined, 'IPv4address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '01.01.01.01', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // IPv6address
-  components = URI.parse('//[2001:db8::7]')
-  t.equal(components.error, undefined, 'IPv4address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '2001:db8::7', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // invalid IPv6
-  components = URI.parse('//[2001:dbZ::7]')
-  t.equal(components.host, '[2001:dbz::7]')
-
-  // mixed IPv4address & IPv6address
-  components = URI.parse('//[::ffff:129.144.52.38]')
-  t.equal(components.error, undefined, 'IPv4address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '::ffff:129.144.52.38', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // mixed IPv4address & reg-name, example from terion-name (https://github.com/garycourt/uri-js/issues/4)
-  components = URI.parse('uri://10.10.10.10.example.com/en/process')
-  t.equal(components.error, undefined, 'mixed errors')
-  t.equal(components.scheme, 'uri', 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '10.10.10.10.example.com', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '/en/process', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // IPv6address, example from bkw (https://github.com/garycourt/uri-js/pull/16)
-  components = URI.parse('//[2606:2800:220:1:248:1893:25c8:1946]/test')
-  t.equal(components.error, undefined, 'IPv6address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '2606:2800:220:1:248:1893:25c8:1946', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '/test', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // IPv6address, example from RFC 5952
-  components = URI.parse('//[2001:db8::1]:80')
-  t.equal(components.error, undefined, 'IPv6address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '2001:db8::1', 'host')
-  t.equal(components.port, 80, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // IPv6address with zone identifier, RFC 6874
-  components = URI.parse('//[fe80::a%25en1]')
-  t.equal(components.error, undefined, 'IPv4address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, 'fe80::a%en1', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // IPv6address with an unescaped interface specifier, example from pekkanikander (https://github.com/garycourt/uri-js/pull/22)
-  components = URI.parse('//[2001:db8::7%en0]')
-  t.equal(components.error, undefined, 'IPv6address interface errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '2001:db8::7%en0', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // UUID V1
-  components = URI.parse('urn:uuid:b571b0bc-4713-11ec-81d3-0242ac130003')
-  t.equal(components.error, undefined, 'errors')
-  t.equal(components.scheme, 'urn', 'scheme')
-  // t.equal(components.authority, undefined, "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, undefined, 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-  t.equal(components.nid, 'uuid', 'nid')
-  t.equal(components.nss, undefined, 'nss')
-  t.equal(components.uuid, 'b571b0bc-4713-11ec-81d3-0242ac130003', 'uuid')
-
-  // UUID v4
-  components = URI.parse('urn:uuid:97a32222-89b7-420e-8507-4360723e2c2a')
-  t.equal(components.uuid, '97a32222-89b7-420e-8507-4360723e2c2a', 'uuid')
-
-  components = URI.parse('urn:uuid:notauuid-7dec-11d0-a765-00a0c91e6bf6')
-  t.notSame(components.error, undefined, 'errors')
-
-  components = URI.parse('urn:foo:a123,456')
-  t.equal(components.error, undefined, 'errors')
-  t.equal(components.scheme, 'urn', 'scheme')
-  // t.equal(components.authority, undefined, "authority");
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, undefined, 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-  t.equal(components.nid, 'foo', 'nid')
-  t.equal(components.nss, 'a123,456', 'nss')
-
-  components = URI.parse('//[2606:2800:220:1:248:1893:25c8:1946:43209]')
-  t.equal(components.host, '[2606:2800:220:1:248:1893:25c8:1946:43209]')
-
-  components = URI.parse('urn:foo:|\\24fpl')
-  t.equal(components.error, 'URN can not be parsed.')
-  t.end()
-})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/resolve.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/resolve.test.js
deleted file mode 100644
index 69ac7b2cf..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/resolve.test.js
+++ /dev/null
@@ -1,75 +0,0 @@
-'use strict'
-
-const test = require('tape')
-const URI = require('../')
-
-test('URI Resolving', (t) => {
-  // normal examples from RFC 3986
-  const base = 'uri://a/b/c/d;p?q'
-  t.equal(URI.resolve(base, 'g:h'), 'g:h', 'g:h')
-  t.equal(URI.resolve(base, 'g:h'), 'g:h', 'g:h')
-  t.equal(URI.resolve(base, 'g'), 'uri://a/b/c/g', 'g')
-  t.equal(URI.resolve(base, './g'), 'uri://a/b/c/g', './g')
-  t.equal(URI.resolve(base, 'g/'), 'uri://a/b/c/g/', 'g/')
-  t.equal(URI.resolve(base, '/g'), 'uri://a/g', '/g')
-  t.equal(URI.resolve(base, '//g'), 'uri://g', '//g')
-  t.equal(URI.resolve(base, '?y'), 'uri://a/b/c/d;p?y', '?y')
-  t.equal(URI.resolve(base, 'g?y'), 'uri://a/b/c/g?y', 'g?y')
-  t.equal(URI.resolve(base, '#s'), 'uri://a/b/c/d;p?q#s', '#s')
-  t.equal(URI.resolve(base, 'g#s'), 'uri://a/b/c/g#s', 'g#s')
-  t.equal(URI.resolve(base, 'g?y#s'), 'uri://a/b/c/g?y#s', 'g?y#s')
-  t.equal(URI.resolve(base, ';x'), 'uri://a/b/c/;x', ';x')
-  t.equal(URI.resolve(base, 'g;x'), 'uri://a/b/c/g;x', 'g;x')
-  t.equal(URI.resolve(base, 'g;x?y#s'), 'uri://a/b/c/g;x?y#s', 'g;x?y#s')
-  t.equal(URI.resolve(base, ''), 'uri://a/b/c/d;p?q', '')
-  t.equal(URI.resolve(base, '.'), 'uri://a/b/c/', '.')
-  t.equal(URI.resolve(base, './'), 'uri://a/b/c/', './')
-  t.equal(URI.resolve(base, '..'), 'uri://a/b/', '..')
-  t.equal(URI.resolve(base, '../'), 'uri://a/b/', '../')
-  t.equal(URI.resolve(base, '../g'), 'uri://a/b/g', '../g')
-  t.equal(URI.resolve(base, '../..'), 'uri://a/', '../..')
-  t.equal(URI.resolve(base, '../../'), 'uri://a/', '../../')
-  t.equal(URI.resolve(base, '../../g'), 'uri://a/g', '../../g')
-
-  // abnormal examples from RFC 3986
-  t.equal(URI.resolve(base, '../../../g'), 'uri://a/g', '../../../g')
-  t.equal(URI.resolve(base, '../../../../g'), 'uri://a/g', '../../../../g')
-
-  t.equal(URI.resolve(base, '/./g'), 'uri://a/g', '/./g')
-  t.equal(URI.resolve(base, '/../g'), 'uri://a/g', '/../g')
-  t.equal(URI.resolve(base, 'g.'), 'uri://a/b/c/g.', 'g.')
-  t.equal(URI.resolve(base, '.g'), 'uri://a/b/c/.g', '.g')
-  t.equal(URI.resolve(base, 'g..'), 'uri://a/b/c/g..', 'g..')
-  t.equal(URI.resolve(base, '..g'), 'uri://a/b/c/..g', '..g')
-
-  t.equal(URI.resolve(base, './../g'), 'uri://a/b/g', './../g')
-  t.equal(URI.resolve(base, './g/.'), 'uri://a/b/c/g/', './g/.')
-  t.equal(URI.resolve(base, 'g/./h'), 'uri://a/b/c/g/h', 'g/./h')
-  t.equal(URI.resolve(base, 'g/../h'), 'uri://a/b/c/h', 'g/../h')
-  t.equal(URI.resolve(base, 'g;x=1/./y'), 'uri://a/b/c/g;x=1/y', 'g;x=1/./y')
-  t.equal(URI.resolve(base, 'g;x=1/../y'), 'uri://a/b/c/y', 'g;x=1/../y')
-
-  t.equal(URI.resolve(base, 'g?y/./x'), 'uri://a/b/c/g?y/./x', 'g?y/./x')
-  t.equal(URI.resolve(base, 'g?y/../x'), 'uri://a/b/c/g?y/../x', 'g?y/../x')
-  t.equal(URI.resolve(base, 'g#s/./x'), 'uri://a/b/c/g#s/./x', 'g#s/./x')
-  t.equal(URI.resolve(base, 'g#s/../x'), 'uri://a/b/c/g#s/../x', 'g#s/../x')
-
-  t.equal(URI.resolve(base, 'uri:g'), 'uri:g', 'uri:g')
-  t.equal(URI.resolve(base, 'uri:g', { tolerant: true }), 'uri://a/b/c/g', 'uri:g')
-
-  // examples by PAEz
-  // example was provided to avoid infinite loop within regex
-  // this is not the case anymore
-  // t.equal(URI.resolve('//www.g.com/', '/adf\ngf'), '//www.g.com/adf%0Agf', '/adf\\ngf')
-  // t.equal(URI.resolve('//www.g.com/error\n/bleh/bleh', '..'), '//www.g.com/error%0A/', '//www.g.com/error\\n/bleh/bleh')
-  t.end()
-})
-
-test('URN Resolving', (t) => {
-  // example from epoberezkin
-  t.equal(URI.resolve('', 'urn:some:ip:prop'), 'urn:some:ip:prop', 'urn:some:ip:prop')
-  t.equal(URI.resolve('#', 'urn:some:ip:prop'), 'urn:some:ip:prop', 'urn:some:ip:prop')
-  t.equal(URI.resolve('urn:some:ip:prop', 'urn:some:ip:prop'), 'urn:some:ip:prop', 'urn:some:ip:prop')
-  t.equal(URI.resolve('urn:some:other:prop', 'urn:some:ip:prop'), 'urn:some:ip:prop', 'urn:some:ip:prop')
-  t.end()
-})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/serialize.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/serialize.test.js
deleted file mode 100644
index 8d9782550..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/serialize.test.js
+++ /dev/null
@@ -1,143 +0,0 @@
-'use strict'
-
-const test = require('tape')
-const URI = require('../')
-
-test('URI Serialize', (t) => {
-  let components = {
-    scheme: undefined,
-    userinfo: undefined,
-    host: undefined,
-    port: undefined,
-    path: undefined,
-    query: undefined,
-    fragment: undefined
-  }
-  t.equal(URI.serialize(components), '', 'Undefined Components')
-
-  components = {
-    scheme: '',
-    userinfo: '',
-    host: '',
-    port: 0,
-    path: '',
-    query: '',
-    fragment: ''
-  }
-  t.equal(URI.serialize(components), '//@:0?#', 'Empty Components')
-
-  components = {
-    scheme: 'uri',
-    userinfo: 'foo:bar',
-    host: 'example.com',
-    port: 1,
-    path: 'path',
-    query: 'query',
-    fragment: 'fragment'
-  }
-  t.equal(URI.serialize(components), 'uri://foo:bar@example.com:1/path?query#fragment', 'All Components')
-
-  components = {
-    scheme: 'uri',
-    host: 'example.com',
-    port: '9000'
-  }
-  t.equal(URI.serialize(components), 'uri://example.com:9000', 'String port')
-
-  t.equal(URI.serialize({ path: '//path' }), '/%2Fpath', 'Double slash path')
-  t.equal(URI.serialize({ path: 'foo:bar' }), 'foo%3Abar', 'Colon path')
-  t.equal(URI.serialize({ path: '?query' }), '%3Fquery', 'Query path')
-
-  t.equal(URI.serialize({ host: '10.10.10.10' }), '//10.10.10.10', 'IPv4address')
-
-  // mixed IPv4address & reg-name, example from terion-name (https://github.com/garycourt/uri-js/issues/4)
-  t.equal(URI.serialize({ host: '10.10.10.10.example.com' }), '//10.10.10.10.example.com', 'Mixed IPv4address & reg-name')
-
-  // IPv6address
-  t.equal(URI.serialize({ host: '2001:db8::7' }), '//[2001:db8::7]', 'IPv6 Host')
-  t.equal(URI.serialize({ host: '::ffff:129.144.52.38' }), '//[::ffff:129.144.52.38]', 'IPv6 Mixed Host')
-  t.equal(URI.serialize({ host: '2606:2800:220:1:248:1893:25c8:1946' }), '//[2606:2800:220:1:248:1893:25c8:1946]', 'IPv6 Full Host')
-
-  // IPv6address with zone identifier, RFC 6874
-  t.equal(URI.serialize({ host: 'fe80::a%en1' }), '//[fe80::a%25en1]', 'IPv6 Zone Unescaped Host')
-  t.equal(URI.serialize({ host: 'fe80::a%25en1' }), '//[fe80::a%25en1]', 'IPv6 Zone Escaped Host')
-
-  t.end()
-})
-
-test('WS serialize', (t) => {
-  t.equal(URI.serialize({ scheme: 'ws' }), 'ws:')
-  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com' }), 'ws://example.com')
-  t.equal(URI.serialize({ scheme: 'ws', resourceName: '/' }), 'ws:')
-  t.equal(URI.serialize({ scheme: 'ws', resourceName: '/foo' }), 'ws:/foo')
-  t.equal(URI.serialize({ scheme: 'ws', resourceName: '/foo?bar' }), 'ws:/foo?bar')
-  t.equal(URI.serialize({ scheme: 'ws', secure: false }), 'ws:')
-  t.equal(URI.serialize({ scheme: 'ws', secure: true }), 'wss:')
-  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo' }), 'ws://example.com/foo')
-  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar' }), 'ws://example.com/foo?bar')
-  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', secure: false }), 'ws://example.com')
-  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', secure: true }), 'wss://example.com')
-  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: false }), 'ws://example.com/foo?bar')
-  t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: true }), 'wss://example.com/foo?bar')
-  t.end()
-})
-
-test('WSS serialize', (t) => {
-  t.equal(URI.serialize({ scheme: 'wss' }), 'wss:')
-  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com' }), 'wss://example.com')
-  t.equal(URI.serialize({ scheme: 'wss', resourceName: '/' }), 'wss:')
-  t.equal(URI.serialize({ scheme: 'wss', resourceName: '/foo' }), 'wss:/foo')
-  t.equal(URI.serialize({ scheme: 'wss', resourceName: '/foo?bar' }), 'wss:/foo?bar')
-  t.equal(URI.serialize({ scheme: 'wss', secure: false }), 'ws:')
-  t.equal(URI.serialize({ scheme: 'wss', secure: true }), 'wss:')
-  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo' }), 'wss://example.com/foo')
-  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar' }), 'wss://example.com/foo?bar')
-  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', secure: false }), 'ws://example.com')
-  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', secure: true }), 'wss://example.com')
-  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar', secure: false }), 'ws://example.com/foo?bar')
-  t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar', secure: true }), 'wss://example.com/foo?bar')
-
-  t.end()
-})
-
-test('URN serialize', (t) => {
-// example from RFC 2141
-  const components = {
-    scheme: 'urn',
-    nid: 'foo',
-    nss: 'a123,456'
-  }
-  t.equal(URI.serialize(components), 'urn:foo:a123,456')
-  // example from RFC 4122
-  let uuidcomponents = {
-    scheme: 'urn',
-    nid: 'uuid',
-    uuid: 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
-  }
-  t.equal(URI.serialize(uuidcomponents), 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6')
-
-  uuidcomponents = {
-    scheme: 'urn',
-    nid: 'uuid',
-    uuid: 'notauuid-7dec-11d0-a765-00a0c91e6bf6'
-  }
-  t.equal(URI.serialize(uuidcomponents), 'urn:uuid:notauuid-7dec-11d0-a765-00a0c91e6bf6')
-  t.end()
-})
-test('URN NID Override', (t) => {
-  let components = URI.parse('urn:foo:f81d4fae-7dec-11d0-a765-00a0c91e6bf6', { nid: 'uuid' })
-  t.equal(components.error, undefined, 'errors')
-  t.equal(components.scheme, 'urn', 'scheme')
-  t.equal(components.path, undefined, 'path')
-  t.equal(components.nid, 'foo', 'nid')
-  t.equal(components.nss, undefined, 'nss')
-  t.equal(components.uuid, 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6', 'uuid')
-
-  components = {
-    scheme: 'urn',
-    nid: 'foo',
-    uuid: 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
-  }
-  t.equal(URI.serialize(components, { nid: 'uuid' }), 'urn:foo:f81d4fae-7dec-11d0-a765-00a0c91e6bf6')
-  t.end()
-})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/uri-js.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/uri-js.test.js
deleted file mode 100644
index 67ac748bb..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/uri-js.test.js
+++ /dev/null
@@ -1,912 +0,0 @@
-'use strict'
-
-const test = require('tape')
-const URI = require('../index')
-
-/**
- * URI.js
- *
- * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/normalizing/resolving/serializing library for JavaScript.
- * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
- * @see http://github.com/garycourt/uri-js
- */
-
-/**
- * Copyright 2011 Gary Court. All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without modification, are
- * permitted provided that the following conditions are met:
- *
- *    1. Redistributions of source code must retain the above copyright notice, this list of
- *       conditions and the following disclaimer.
- *
- *    2. Redistributions in binary form must reproduce the above copyright notice, this list
- *       of conditions and the following disclaimer in the documentation and/or other materials
- *       provided with the distribution.
- *
- * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
- * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
- * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
- *
- * The views and conclusions contained in the software and documentation are those of the
- * authors and should not be interpreted as representing official policies, either expressed
- * or implied, of Gary Court.
- */
-
-test('Acquire URI', (t) => {
-  t.ok(URI)
-  t.end()
-})
-
-test('URI Parsing', (t) => {
-  let components
-
-  // scheme
-  components = URI.parse('uri:')
-  t.equal(components.error, undefined, 'scheme errors')
-  t.equal(components.scheme, 'uri', 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // userinfo
-  components = URI.parse('//@')
-  t.equal(components.error, undefined, 'userinfo errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, '', 'userinfo')
-  t.equal(components.host, '', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // host
-  components = URI.parse('//')
-  t.equal(components.error, undefined, 'host errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // port
-  components = URI.parse('//:')
-  t.equal(components.error, undefined, 'port errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '', 'host')
-  t.equal(components.port, '', 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // path
-  components = URI.parse('')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // query
-  components = URI.parse('?')
-  t.equal(components.error, undefined, 'query errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, '', 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // fragment
-  components = URI.parse('#')
-  t.equal(components.error, undefined, 'fragment errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '', 'fragment')
-
-  // fragment with character tabulation
-  components = URI.parse('#\t')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '%09', 'fragment')
-
-  // fragment with line feed
-  components = URI.parse('#\n')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '%0A', 'fragment')
-
-  // fragment with line tabulation
-  components = URI.parse('#\v')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '%0B', 'fragment')
-
-  // fragment with form feed
-  components = URI.parse('#\f')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '%0C', 'fragment')
-
-  // fragment with carriage return
-  components = URI.parse('#\r')
-  t.equal(components.error, undefined, 'path errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, undefined, 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, '%0D', 'fragment')
-
-  // all
-  components = URI.parse('uri://user:pass@example.com:123/one/two.three?q1=a1&q2=a2#body')
-  t.equal(components.error, undefined, 'all errors')
-  t.equal(components.scheme, 'uri', 'scheme')
-  t.equal(components.userinfo, 'user:pass', 'userinfo')
-  t.equal(components.host, 'example.com', 'host')
-  t.equal(components.port, 123, 'port')
-  t.equal(components.path, '/one/two.three', 'path')
-  t.equal(components.query, 'q1=a1&q2=a2', 'query')
-  t.equal(components.fragment, 'body', 'fragment')
-
-  // IPv4address
-  components = URI.parse('//10.10.10.10')
-  t.equal(components.error, undefined, 'IPv4address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '10.10.10.10', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // IPv6address
-  components = URI.parse('//[2001:db8::7]')
-  t.equal(components.error, undefined, 'IPv4address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '2001:db8::7', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // mixed IPv4address & IPv6address
-  components = URI.parse('//[::ffff:129.144.52.38]')
-  t.equal(components.error, undefined, 'IPv4address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '::ffff:129.144.52.38', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // mixed IPv4address & reg-name, example from terion-name (https://github.com/garycourt/uri-js/issues/4)
-  components = URI.parse('uri://10.10.10.10.example.com/en/process')
-  t.equal(components.error, undefined, 'mixed errors')
-  t.equal(components.scheme, 'uri', 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '10.10.10.10.example.com', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '/en/process', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // IPv6address, example from bkw (https://github.com/garycourt/uri-js/pull/16)
-  components = URI.parse('//[2606:2800:220:1:248:1893:25c8:1946]/test')
-  t.equal(components.error, undefined, 'IPv6address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '2606:2800:220:1:248:1893:25c8:1946', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '/test', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // IPv6address, example from RFC 5952
-  components = URI.parse('//[2001:db8::1]:80')
-  t.equal(components.error, undefined, 'IPv6address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '2001:db8::1', 'host')
-  t.equal(components.port, 80, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // IPv6address with zone identifier, RFC 6874
-  components = URI.parse('//[fe80::a%25en1]')
-  t.equal(components.error, undefined, 'IPv4address errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, 'fe80::a%en1', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  // IPv6address with an unescaped interface specifier, example from pekkanikander (https://github.com/garycourt/uri-js/pull/22)
-  components = URI.parse('//[2001:db8::7%en0]')
-  t.equal(components.error, undefined, 'IPv6address interface errors')
-  t.equal(components.scheme, undefined, 'scheme')
-  t.equal(components.userinfo, undefined, 'userinfo')
-  t.equal(components.host, '2001:db8::7%en0', 'host')
-  t.equal(components.port, undefined, 'port')
-  t.equal(components.path, '', 'path')
-  t.equal(components.query, undefined, 'query')
-  t.equal(components.fragment, undefined, 'fragment')
-
-  t.end()
-})
-
-test('URI Serialization', (t) => {
-  let components = {
-    scheme: undefined,
-    userinfo: undefined,
-    host: undefined,
-    port: undefined,
-    path: undefined,
-    query: undefined,
-    fragment: undefined
-  }
-  t.equal(URI.serialize(components), '', 'Undefined Components')
-
-  components = {
-    scheme: '',
-    userinfo: '',
-    host: '',
-    port: 0,
-    path: '',
-    query: '',
-    fragment: ''
-  }
-  t.equal(URI.serialize(components), '//@:0?#', 'Empty Components')
-
-  components = {
-    scheme: 'uri',
-    userinfo: 'foo:bar',
-    host: 'example.com',
-    port: 1,
-    path: 'path',
-    query: 'query',
-    fragment: 'fragment'
-  }
-  t.equal(URI.serialize(components), 'uri://foo:bar@example.com:1/path?query#fragment', 'All Components')
-
-  components = {
-    scheme: 'uri',
-    host: 'example.com',
-    port: '9000'
-  }
-  t.equal(URI.serialize(components), 'uri://example.com:9000', 'String port')
-
-  t.equal(URI.serialize({ path: '//path' }), '/%2Fpath', 'Double slash path')
-  t.equal(URI.serialize({ path: 'foo:bar' }), 'foo%3Abar', 'Colon path')
-  t.equal(URI.serialize({ path: '?query' }), '%3Fquery', 'Query path')
-
-  // mixed IPv4address & reg-name, example from terion-name (https://github.com/garycourt/uri-js/issues/4)
-  t.equal(URI.serialize({ host: '10.10.10.10.example.com' }), '//10.10.10.10.example.com', 'Mixed IPv4address & reg-name')
-
-  // IPv6address
-  t.equal(URI.serialize({ host: '2001:db8::7' }), '//[2001:db8::7]', 'IPv6 Host')
-  t.equal(URI.serialize({ host: '::ffff:129.144.52.38' }), '//[::ffff:129.144.52.38]', 'IPv6 Mixed Host')
-  t.equal(URI.serialize({ host: '2606:2800:220:1:248:1893:25c8:1946' }), '//[2606:2800:220:1:248:1893:25c8:1946]', 'IPv6 Full Host')
-
-  // IPv6address with zone identifier, RFC 6874
-  t.equal(URI.serialize({ host: 'fe80::a%en1' }), '//[fe80::a%25en1]', 'IPv6 Zone Unescaped Host')
-  t.equal(URI.serialize({ host: 'fe80::a%25en1' }), '//[fe80::a%25en1]', 'IPv6 Zone Escaped Host')
-
-  t.end()
-})
-
-test('URI Resolving', { skip: true }, (t) => {
-  // normal examples from RFC 3986
-  const base = 'uri://a/b/c/d;p?q'
-  t.equal(URI.resolve(base, 'g:h'), 'g:h', 'g:h')
-  t.equal(URI.resolve(base, 'g'), 'uri://a/b/c/g', 'g')
-  t.equal(URI.resolve(base, './g'), 'uri://a/b/c/g', './g')
-  t.equal(URI.resolve(base, 'g/'), 'uri://a/b/c/g/', 'g/')
-  t.equal(URI.resolve(base, '/g'), 'uri://a/g', '/g')
-  t.equal(URI.resolve(base, '//g'), 'uri://g', '//g')
-  t.equal(URI.resolve(base, '?y'), 'uri://a/b/c/d;p?y', '?y')
-  t.equal(URI.resolve(base, 'g?y'), 'uri://a/b/c/g?y', 'g?y')
-  t.equal(URI.resolve(base, '#s'), 'uri://a/b/c/d;p?q#s', '#s')
-  t.equal(URI.resolve(base, 'g#s'), 'uri://a/b/c/g#s', 'g#s')
-  t.equal(URI.resolve(base, 'g?y#s'), 'uri://a/b/c/g?y#s', 'g?y#s')
-  t.equal(URI.resolve(base, ';x'), 'uri://a/b/c/;x', ';x')
-  t.equal(URI.resolve(base, 'g;x'), 'uri://a/b/c/g;x', 'g;x')
-  t.equal(URI.resolve(base, 'g;x?y#s'), 'uri://a/b/c/g;x?y#s', 'g;x?y#s')
-  t.equal(URI.resolve(base, ''), 'uri://a/b/c/d;p?q', '')
-  t.equal(URI.resolve(base, '.'), 'uri://a/b/c/', '.')
-  t.equal(URI.resolve(base, './'), 'uri://a/b/c/', './')
-  t.equal(URI.resolve(base, '..'), 'uri://a/b/', '..')
-  t.equal(URI.resolve(base, '../'), 'uri://a/b/', '../')
-  t.equal(URI.resolve(base, '../g'), 'uri://a/b/g', '../g')
-  t.equal(URI.resolve(base, '../..'), 'uri://a/', '../..')
-  t.equal(URI.resolve(base, '../../'), 'uri://a/', '../../')
-  t.equal(URI.resolve(base, '../../g'), 'uri://a/g', '../../g')
-
-  // abnormal examples from RFC 3986
-  t.equal(URI.resolve(base, '../../../g'), 'uri://a/g', '../../../g')
-  t.equal(URI.resolve(base, '../../../../g'), 'uri://a/g', '../../../../g')
-
-  t.equal(URI.resolve(base, '/./g'), 'uri://a/g', '/./g')
-  t.equal(URI.resolve(base, '/../g'), 'uri://a/g', '/../g')
-  t.equal(URI.resolve(base, 'g.'), 'uri://a/b/c/g.', 'g.')
-  t.equal(URI.resolve(base, '.g'), 'uri://a/b/c/.g', '.g')
-  t.equal(URI.resolve(base, 'g..'), 'uri://a/b/c/g..', 'g..')
-  t.equal(URI.resolve(base, '..g'), 'uri://a/b/c/..g', '..g')
-
-  t.equal(URI.resolve(base, './../g'), 'uri://a/b/g', './../g')
-  t.equal(URI.resolve(base, './g/.'), 'uri://a/b/c/g/', './g/.')
-  t.equal(URI.resolve(base, 'g/./h'), 'uri://a/b/c/g/h', 'g/./h')
-  t.equal(URI.resolve(base, 'g/../h'), 'uri://a/b/c/h', 'g/../h')
-  t.equal(URI.resolve(base, 'g;x=1/./y'), 'uri://a/b/c/g;x=1/y', 'g;x=1/./y')
-  t.equal(URI.resolve(base, 'g;x=1/../y'), 'uri://a/b/c/y', 'g;x=1/../y')
-
-  t.equal(URI.resolve(base, 'g?y/./x'), 'uri://a/b/c/g?y/./x', 'g?y/./x')
-  t.equal(URI.resolve(base, 'g?y/../x'), 'uri://a/b/c/g?y/../x', 'g?y/../x')
-  t.equal(URI.resolve(base, 'g#s/./x'), 'uri://a/b/c/g#s/./x', 'g#s/./x')
-  t.equal(URI.resolve(base, 'g#s/../x'), 'uri://a/b/c/g#s/../x', 'g#s/../x')
-
-  t.equal(URI.resolve(base, 'uri:g'), 'uri:g', 'uri:g')
-  t.equal(URI.resolve(base, 'uri:g', { tolerant: true }), 'uri://a/b/c/g', 'uri:g')
-
-  // examples by PAEz
-  t.equal(URI.resolve('//www.g.com/', '/adf\ngf'), '//www.g.com/adf%0Agf', '/adf\\ngf')
-  t.equal(URI.resolve('//www.g.com/error\n/bleh/bleh', '..'), '//www.g.com/error%0A/', '//www.g.com/error\\n/bleh/bleh')
-
-  t.end()
-})
-
-test('URI Normalizing', { skip: true }, (t) => {
-  // test from RFC 3987
-  t.equal(URI.normalize('uri://www.example.org/red%09ros\xE9#red'), 'uri://www.example.org/red%09ros%C3%A9#red')
-
-  // IPv4address
-  t.equal(URI.normalize('//192.068.001.000'), '//192.68.1.0')
-
-  // IPv6address, example from RFC 3513
-  t.equal(URI.normalize('http://[1080::8:800:200C:417A]/'), 'http://[1080::8:800:200c:417a]/')
-
-  // IPv6address, examples from RFC 5952
-  t.equal(URI.normalize('//[2001:0db8::0001]/'), '//[2001:db8::1]/')
-  t.equal(URI.normalize('//[2001:db8::1:0000:1]/'), '//[2001:db8::1:0:1]/')
-  t.equal(URI.normalize('//[2001:db8:0:0:0:0:2:1]/'), '//[2001:db8::2:1]/')
-  t.equal(URI.normalize('//[2001:db8:0:1:1:1:1:1]/'), '//[2001:db8:0:1:1:1:1:1]/')
-  t.equal(URI.normalize('//[2001:0:0:1:0:0:0:1]/'), '//[2001:0:0:1::1]/')
-  t.equal(URI.normalize('//[2001:db8:0:0:1:0:0:1]/'), '//[2001:db8::1:0:0:1]/')
-  t.equal(URI.normalize('//[2001:DB8::1]/'), '//[2001:db8::1]/')
-  t.equal(URI.normalize('//[0:0:0:0:0:ffff:192.0.2.1]/'), '//[::ffff:192.0.2.1]/')
-
-  // Mixed IPv4 and IPv6 address
-  t.equal(URI.normalize('//[1:2:3:4:5:6:192.0.2.1]/'), '//[1:2:3:4:5:6:192.0.2.1]/')
-  t.equal(URI.normalize('//[1:2:3:4:5:6:192.068.001.000]/'), '//[1:2:3:4:5:6:192.68.1.0]/')
-
-  t.end()
-})
-
-test('URI Equals', (t) => {
-  // test from RFC 3986
-  t.equal(URI.equal('example://a/b/c/%7Bfoo%7D', 'eXAMPLE://a/./b/../b/%63/%7bfoo%7d'), true)
-
-  // test from RFC 3987
-  t.equal(URI.equal('http://example.org/~user', 'http://example.org/%7euser'), true)
-
-  t.end()
-})
-
-test('Escape Component', { skip: true }, (t) => {
-  let chr
-  for (let d = 0; d <= 129; ++d) {
-    chr = String.fromCharCode(d)
-    if (!chr.match(/[$&+,;=]/)) {
-      t.equal(URI.escapeComponent(chr), encodeURIComponent(chr))
-    } else {
-      t.equal(URI.escapeComponent(chr), chr)
-    }
-  }
-  t.equal(URI.escapeComponent('\u00c0'), encodeURIComponent('\u00c0'))
-  t.equal(URI.escapeComponent('\u07ff'), encodeURIComponent('\u07ff'))
-  t.equal(URI.escapeComponent('\u0800'), encodeURIComponent('\u0800'))
-  t.equal(URI.escapeComponent('\u30a2'), encodeURIComponent('\u30a2'))
-  t.end()
-})
-
-test('Unescape Component', { skip: true }, (t) => {
-  let chr
-  for (let d = 0; d <= 129; ++d) {
-    chr = String.fromCharCode(d)
-    t.equal(URI.unescapeComponent(encodeURIComponent(chr)), chr)
-  }
-  t.equal(URI.unescapeComponent(encodeURIComponent('\u00c0')), '\u00c0')
-  t.equal(URI.unescapeComponent(encodeURIComponent('\u07ff')), '\u07ff')
-  t.equal(URI.unescapeComponent(encodeURIComponent('\u0800')), '\u0800')
-  t.equal(URI.unescapeComponent(encodeURIComponent('\u30a2')), '\u30a2')
-  t.end()
-})
-
-const IRI_OPTION = { iri: true, unicodeSupport: true }
-
-test('IRI Parsing', { skip: true }, (t) => {
-  const components = URI.parse('uri://us\xA0er:pa\uD7FFss@example.com:123/o\uF900ne/t\uFDCFwo.t\uFDF0hree?q1=a1\uF8FF\uE000&q2=a2#bo\uFFEFdy', IRI_OPTION)
-  t.equal(components.error, undefined, 'all errors')
-  t.equal(components.scheme, 'uri', 'scheme')
-  t.equal(components.userinfo, 'us\xA0er:pa\uD7FFss', 'userinfo')
-  t.equal(components.host, 'example.com', 'host')
-  t.equal(components.port, 123, 'port')
-  t.equal(components.path, '/o\uF900ne/t\uFDCFwo.t\uFDF0hree', 'path')
-  t.equal(components.query, 'q1=a1\uF8FF\uE000&q2=a2', 'query')
-  t.equal(components.fragment, 'bo\uFFEFdy', 'fragment')
-  t.end()
-})
-
-test('IRI Serialization', { skip: true }, (t) => {
-  const components = {
-    scheme: 'uri',
-    userinfo: 'us\xA0er:pa\uD7FFss',
-    host: 'example.com',
-    port: 123,
-    path: '/o\uF900ne/t\uFDCFwo.t\uFDF0hree',
-    query: 'q1=a1\uF8FF\uE000&q2=a2',
-    fragment: 'bo\uFFEFdy\uE001'
-  }
-  t.equal(URI.serialize(components, IRI_OPTION), 'uri://us\xA0er:pa\uD7FFss@example.com:123/o\uF900ne/t\uFDCFwo.t\uFDF0hree?q1=a1\uF8FF\uE000&q2=a2#bo\uFFEFdy%EE%80%81')
-  t.end()
-})
-
-test('IRI Normalizing', { skip: true }, (t) => {
-  t.equal(URI.normalize('uri://www.example.org/red%09ros\xE9#red', IRI_OPTION), 'uri://www.example.org/red%09ros\xE9#red')
-  t.end()
-})
-
-test('IRI Equals', { skip: true }, (t) => {
-  // example from RFC 3987
-  t.equal(URI.equal('example://a/b/c/%7Bfoo%7D/ros\xE9', 'eXAMPLE://a/./b/../b/%63/%7bfoo%7d/ros%C3%A9', IRI_OPTION), true)
-  t.end()
-})
-
-test('Convert IRI to URI', { skip: true }, (t) => {
-  // example from RFC 3987
-  t.equal(URI.serialize(URI.parse('uri://www.example.org/red%09ros\xE9#red', IRI_OPTION)), 'uri://www.example.org/red%09ros%C3%A9#red')
-
-  // Internationalized Domain Name conversion via punycode example from RFC 3987
-  t.equal(URI.serialize(URI.parse('uri://r\xE9sum\xE9.example.org', { iri: true, domainHost: true }), { domainHost: true }), 'uri://xn--rsum-bpad.example.org')
-  t.end()
-})
-
-test('Convert URI to IRI', { skip: true }, (t) => {
-  // examples from RFC 3987
-  t.equal(URI.serialize(URI.parse('uri://www.example.org/D%C3%BCrst'), IRI_OPTION), 'uri://www.example.org/D\xFCrst')
-  t.equal(URI.serialize(URI.parse('uri://www.example.org/D%FCrst'), IRI_OPTION), 'uri://www.example.org/D%FCrst')
-  t.equal(URI.serialize(URI.parse('uri://xn--99zt52a.example.org/%e2%80%ae'), IRI_OPTION), 'uri://xn--99zt52a.example.org/%E2%80%AE') // or uri://\u7D0D\u8C46.example.org/%E2%80%AE
-
-  // Internationalized Domain Name conversion via punycode example from RFC 3987
-  t.equal(URI.serialize(URI.parse('uri://xn--rsum-bpad.example.org', { domainHost: true }), { iri: true, domainHost: true }), 'uri://r\xE9sum\xE9.example.org')
-  t.end()
-})
-
-if (URI.SCHEMES.http) {
-  test('HTTP Equals', (t) => {
-    // test from RFC 2616
-    t.equal(URI.equal('http://abc.com:80/~smith/home.html', 'http://abc.com/~smith/home.html'), true)
-    t.equal(URI.equal('http://ABC.com/%7Esmith/home.html', 'http://abc.com/~smith/home.html'), true)
-    t.equal(URI.equal('http://ABC.com:/%7esmith/home.html', 'http://abc.com/~smith/home.html'), true)
-    t.equal(URI.equal('HTTP://ABC.COM', 'http://abc.com/'), true)
-    // test from RFC 3986
-    t.equal(URI.equal('http://example.com:/', 'http://example.com:80/'), true)
-    t.end()
-  })
-}
-
-if (URI.SCHEMES.https) {
-  test('HTTPS Equals', (t) => {
-    t.equal(URI.equal('https://example.com', 'https://example.com:443/'), true)
-    t.equal(URI.equal('https://example.com:/', 'https://example.com:443/'), true)
-    t.end()
-  })
-}
-
-if (URI.SCHEMES.urn) {
-  test('URN Parsing', (t) => {
-    // example from RFC 2141
-    const components = URI.parse('urn:foo:a123,456')
-    t.equal(components.error, undefined, 'errors')
-    t.equal(components.scheme, 'urn', 'scheme')
-    t.equal(components.userinfo, undefined, 'userinfo')
-    t.equal(components.host, undefined, 'host')
-    t.equal(components.port, undefined, 'port')
-    t.equal(components.path, undefined, 'path')
-    t.equal(components.query, undefined, 'query')
-    t.equal(components.fragment, undefined, 'fragment')
-    t.equal(components.nid, 'foo', 'nid')
-    t.equal(components.nss, 'a123,456', 'nss')
-    t.end()
-  })
-
-  test('URN Serialization', (t) => {
-    // example from RFC 2141
-    const components = {
-      scheme: 'urn',
-      nid: 'foo',
-      nss: 'a123,456'
-    }
-    t.equal(URI.serialize(components), 'urn:foo:a123,456')
-    t.end()
-  })
-
-  test('URN Equals', { skip: true }, (t) => {
-    // test from RFC 2141
-    t.equal(URI.equal('urn:foo:a123,456', 'urn:foo:a123,456'), true)
-    t.equal(URI.equal('urn:foo:a123,456', 'URN:foo:a123,456'), true)
-    t.equal(URI.equal('urn:foo:a123,456', 'urn:FOO:a123,456'), true)
-    t.equal(URI.equal('urn:foo:a123,456', 'urn:foo:A123,456'), false)
-    t.equal(URI.equal('urn:foo:a123%2C456', 'URN:FOO:a123%2c456'), true)
-    t.end()
-  })
-
-  test('URN Resolving', (t) => {
-    // example from epoberezkin
-    t.equal(URI.resolve('', 'urn:some:ip:prop'), 'urn:some:ip:prop')
-    t.equal(URI.resolve('#', 'urn:some:ip:prop'), 'urn:some:ip:prop')
-    t.equal(URI.resolve('urn:some:ip:prop', 'urn:some:ip:prop'), 'urn:some:ip:prop')
-    t.equal(URI.resolve('urn:some:other:prop', 'urn:some:ip:prop'), 'urn:some:ip:prop')
-    t.end()
-  })
-
-  test('UUID Parsing', (t) => {
-    // example from RFC 4122
-    let components = URI.parse('urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6')
-    t.equal(components.error, undefined, 'errors')
-    t.equal(components.scheme, 'urn', 'scheme')
-    t.equal(components.userinfo, undefined, 'userinfo')
-    t.equal(components.host, undefined, 'host')
-    t.equal(components.port, undefined, 'port')
-    t.equal(components.path, undefined, 'path')
-    t.equal(components.query, undefined, 'query')
-    t.equal(components.fragment, undefined, 'fragment')
-    t.equal(components.nid, 'uuid', 'nid')
-    t.equal(components.nss, undefined, 'nss')
-    t.equal(components.uuid, 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6', 'uuid')
-
-    components = URI.parse('urn:uuid:notauuid-7dec-11d0-a765-00a0c91e6bf6')
-    t.notEqual(components.error, undefined, 'errors')
-    t.end()
-  })
-
-  test('UUID Serialization', (t) => {
-    // example from RFC 4122
-    let components = {
-      scheme: 'urn',
-      nid: 'uuid',
-      uuid: 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
-    }
-    t.equal(URI.serialize(components), 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6')
-
-    components = {
-      scheme: 'urn',
-      nid: 'uuid',
-      uuid: 'notauuid-7dec-11d0-a765-00a0c91e6bf6'
-    }
-    t.equal(URI.serialize(components), 'urn:uuid:notauuid-7dec-11d0-a765-00a0c91e6bf6')
-    t.end()
-  })
-
-  test('UUID Equals', (t) => {
-    t.equal(URI.equal('URN:UUID:F81D4FAE-7DEC-11D0-A765-00A0C91E6BF6', 'urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6'), true)
-    t.end()
-  })
-
-  test('URN NID Override', (t) => {
-    let components = URI.parse('urn:foo:f81d4fae-7dec-11d0-a765-00a0c91e6bf6', { nid: 'uuid' })
-    t.equal(components.error, undefined, 'errors')
-    t.equal(components.scheme, 'urn', 'scheme')
-    t.equal(components.path, undefined, 'path')
-    t.equal(components.nid, 'foo', 'nid')
-    t.equal(components.nss, undefined, 'nss')
-    t.equal(components.uuid, 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6', 'uuid')
-
-    components = {
-      scheme: 'urn',
-      nid: 'foo',
-      uuid: 'f81d4fae-7dec-11d0-a765-00a0c91e6bf6'
-    }
-    t.equal(URI.serialize(components, { nid: 'uuid' }), 'urn:foo:f81d4fae-7dec-11d0-a765-00a0c91e6bf6')
-    t.end()
-  })
-}
-
-if (URI.SCHEMES.mailto) {
-  test('Mailto Parse', (t) => {
-    let components
-
-    // tests from RFC 6068
-
-    components = URI.parse('mailto:chris@example.com')
-    t.equal(components.error, undefined, 'error')
-    t.equal(components.scheme, 'mailto', 'scheme')
-    t.equal(components.userinfo, undefined, 'userinfo')
-    t.equal(components.host, undefined, 'host')
-    t.equal(components.port, undefined, 'port')
-    t.equal(components.path, undefined, 'path')
-    t.equal(components.query, undefined, 'query')
-    t.equal(components.fragment, undefined, 'fragment')
-    t.deepEqual(components.to, ['chris@example.com'], 'to')
-    t.equal(components.subject, undefined, 'subject')
-    t.equal(components.body, undefined, 'body')
-    t.equal(components.headers, undefined, 'headers')
-
-    components = URI.parse('mailto:infobot@example.com?subject=current-issue')
-    t.deepEqual(components.to, ['infobot@example.com'], 'to')
-    t.equal(components.subject, 'current-issue', 'subject')
-
-    components = URI.parse('mailto:infobot@example.com?body=send%20current-issue')
-    t.deepEqual(components.to, ['infobot@example.com'], 'to')
-    t.equal(components.body, 'send current-issue', 'body')
-
-    components = URI.parse('mailto:infobot@example.com?body=send%20current-issue%0D%0Asend%20index')
-    t.deepEqual(components.to, ['infobot@example.com'], 'to')
-    t.equal(components.body, 'send current-issue\x0D\x0Asend index', 'body')
-
-    components = URI.parse('mailto:list@example.org?In-Reply-To=%3C3469A91.D10AF4C@example.com%3E')
-    t.deepEqual(components.to, ['list@example.org'], 'to')
-    t.deepEqual(components.headers, { 'In-Reply-To': '<3469A91.D10AF4C@example.com>' }, 'headers')
-
-    components = URI.parse('mailto:majordomo@example.com?body=subscribe%20bamboo-l')
-    t.deepEqual(components.to, ['majordomo@example.com'], 'to')
-    t.equal(components.body, 'subscribe bamboo-l', 'body')
-
-    components = URI.parse('mailto:joe@example.com?cc=bob@example.com&body=hello')
-    t.deepEqual(components.to, ['joe@example.com'], 'to')
-    t.equal(components.body, 'hello', 'body')
-    t.deepEqual(components.headers, { cc: 'bob@example.com' }, 'headers')
-
-    components = URI.parse('mailto:joe@example.com?cc=bob@example.com?body=hello')
-    if (URI.VALIDATE_SUPPORT) t.ok(components.error, 'invalid header fields')
-
-    components = URI.parse('mailto:gorby%25kremvax@example.com')
-    t.deepEqual(components.to, ['gorby%kremvax@example.com'], 'to gorby%kremvax@example.com')
-
-    components = URI.parse('mailto:unlikely%3Faddress@example.com?blat=foop')
-    t.deepEqual(components.to, ['unlikely?address@example.com'], 'to unlikely?address@example.com')
-    t.deepEqual(components.headers, { blat: 'foop' }, 'headers')
-
-    components = URI.parse('mailto:Mike%26family@example.org')
-    t.deepEqual(components.to, ['Mike&family@example.org'], 'to Mike&family@example.org')
-
-    components = URI.parse('mailto:%22not%40me%22@example.org')
-    t.deepEqual(components.to, ['"not@me"@example.org'], 'to ' + '"not@me"@example.org')
-
-    components = URI.parse('mailto:%22oh%5C%5Cno%22@example.org')
-    t.deepEqual(components.to, ['"oh\\\\no"@example.org'], 'to ' + '"oh\\\\no"@example.org')
-
-    components = URI.parse("mailto:%22%5C%5C%5C%22it's%5C%20ugly%5C%5C%5C%22%22@example.org")
-    t.deepEqual(components.to, ['"\\\\\\"it\'s\\ ugly\\\\\\""@example.org'], 'to ' + '"\\\\\\"it\'s\\ ugly\\\\\\""@example.org')
-
-    components = URI.parse('mailto:user@example.org?subject=caf%C3%A9')
-    t.deepEqual(components.to, ['user@example.org'], 'to')
-    t.equal(components.subject, 'caf\xE9', 'subject')
-
-    components = URI.parse('mailto:user@example.org?subject=%3D%3Futf-8%3FQ%3Fcaf%3DC3%3DA9%3F%3D')
-    t.deepEqual(components.to, ['user@example.org'], 'to')
-    t.equal(components.subject, '=?utf-8?Q?caf=C3=A9?=', 'subject') // TODO: Verify this
-
-    components = URI.parse('mailto:user@example.org?subject=%3D%3Fiso-8859-1%3FQ%3Fcaf%3DE9%3F%3D')
-    t.deepEqual(components.to, ['user@example.org'], 'to')
-    t.equal(components.subject, '=?iso-8859-1?Q?caf=E9?=', 'subject') // TODO: Verify this
-
-    components = URI.parse('mailto:user@example.org?subject=caf%C3%A9&body=caf%C3%A9')
-    t.deepEqual(components.to, ['user@example.org'], 'to')
-    t.equal(components.subject, 'caf\xE9', 'subject')
-    t.equal(components.body, 'caf\xE9', 'body')
-
-    if (URI.IRI_SUPPORT) {
-      components = URI.parse('mailto:user@%E7%B4%8D%E8%B1%86.example.org?subject=Test&body=NATTO')
-      t.deepEqual(components.to, ['user@xn--99zt52a.example.org'], 'to')
-      t.equal(components.subject, 'Test', 'subject')
-      t.equal(components.body, 'NATTO', 'body')
-    }
-
-    t.end()
-  })
-
-  test('Mailto Serialize', (t) => {
-    // tests from RFC 6068
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['chris@example.com'] }), 'mailto:chris@example.com')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['infobot@example.com'], body: 'current-issue' }), 'mailto:infobot@example.com?body=current-issue')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['infobot@example.com'], body: 'send current-issue' }), 'mailto:infobot@example.com?body=send%20current-issue')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['infobot@example.com'], body: 'send current-issue\x0D\x0Asend index' }), 'mailto:infobot@example.com?body=send%20current-issue%0D%0Asend%20index')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['list@example.org'], headers: { 'In-Reply-To': '<3469A91.D10AF4C@example.com>' } }), 'mailto:list@example.org?In-Reply-To=%3C3469A91.D10AF4C@example.com%3E')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['majordomo@example.com'], body: 'subscribe bamboo-l' }), 'mailto:majordomo@example.com?body=subscribe%20bamboo-l')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['joe@example.com'], headers: { cc: 'bob@example.com', body: 'hello' } }), 'mailto:joe@example.com?cc=bob@example.com&body=hello')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['gorby%25kremvax@example.com'] }), 'mailto:gorby%25kremvax@example.com')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['unlikely%3Faddress@example.com'], headers: { blat: 'foop' } }), 'mailto:unlikely%3Faddress@example.com?blat=foop')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['Mike&family@example.org'] }), 'mailto:Mike%26family@example.org')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['"not@me"@example.org'] }), 'mailto:%22not%40me%22@example.org')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['"oh\\\\no"@example.org'] }), 'mailto:%22oh%5C%5Cno%22@example.org')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['"\\\\\\"it\'s\\ ugly\\\\\\""@example.org'] }), "mailto:%22%5C%5C%5C%22it's%5C%20ugly%5C%5C%5C%22%22@example.org")
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['user@example.org'], subject: 'caf\xE9' }), 'mailto:user@example.org?subject=caf%C3%A9')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['user@example.org'], subject: '=?utf-8?Q?caf=C3=A9?=' }), 'mailto:user@example.org?subject=%3D%3Futf-8%3FQ%3Fcaf%3DC3%3DA9%3F%3D')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['user@example.org'], subject: '=?iso-8859-1?Q?caf=E9?=' }), 'mailto:user@example.org?subject=%3D%3Fiso-8859-1%3FQ%3Fcaf%3DE9%3F%3D')
-    t.equal(URI.serialize({ scheme: 'mailto', to: ['user@example.org'], subject: 'caf\xE9', body: 'caf\xE9' }), 'mailto:user@example.org?subject=caf%C3%A9&body=caf%C3%A9')
-    if (URI.IRI_SUPPORT) {
-      t.equal(URI.serialize({ scheme: 'mailto', to: ['us\xE9r@\u7d0d\u8c46.example.org'], subject: 'Test', body: 'NATTO' }), 'mailto:us%C3%A9r@xn--99zt52a.example.org?subject=Test&body=NATTO')
-    }
-    t.end()
-  })
-
-  test('Mailto Equals', (t) => {
-    // tests from RFC 6068
-    t.equal(URI.equal('mailto:addr1@an.example,addr2@an.example', 'mailto:?to=addr1@an.example,addr2@an.example'), true)
-    t.equal(URI.equal('mailto:?to=addr1@an.example,addr2@an.example', 'mailto:addr1@an.example?to=addr2@an.example'), true)
-    t.end()
-  })
-}
-
-if (URI.SCHEMES.ws) {
-  test('WS Parse', (t) => {
-    let components
-
-    // example from RFC 6455, Sec 4.1
-    components = URI.parse('ws://example.com/chat')
-    t.equal(components.error, undefined, 'error')
-    t.equal(components.scheme, 'ws', 'scheme')
-    t.equal(components.userinfo, undefined, 'userinfo')
-    t.equal(components.host, 'example.com', 'host')
-    t.equal(components.port, undefined, 'port')
-    t.equal(components.path, undefined, 'path')
-    t.equal(components.query, undefined, 'query')
-    t.equal(components.fragment, undefined, 'fragment')
-    t.equal(components.resourceName, '/chat', 'resourceName')
-    t.equal(components.secure, false, 'secure')
-
-    components = URI.parse('ws://example.com/foo?bar=baz')
-    t.equal(components.error, undefined, 'error')
-    t.equal(components.scheme, 'ws', 'scheme')
-    t.equal(components.userinfo, undefined, 'userinfo')
-    t.equal(components.host, 'example.com', 'host')
-    t.equal(components.port, undefined, 'port')
-    t.equal(components.path, undefined, 'path')
-    t.equal(components.query, undefined, 'query')
-    t.equal(components.fragment, undefined, 'fragment')
-    t.equal(components.resourceName, '/foo?bar=baz', 'resourceName')
-    t.equal(components.secure, false, 'secure')
-
-    components = URI.parse('ws://example.com/?bar=baz')
-    t.equal(components.resourceName, '/?bar=baz', 'resourceName')
-
-    t.end()
-  })
-
-  test('WS Serialize', (t) => {
-    t.equal(URI.serialize({ scheme: 'ws' }), 'ws:')
-    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com' }), 'ws://example.com')
-    t.equal(URI.serialize({ scheme: 'ws', resourceName: '/' }), 'ws:')
-    t.equal(URI.serialize({ scheme: 'ws', resourceName: '/foo' }), 'ws:/foo')
-    t.equal(URI.serialize({ scheme: 'ws', resourceName: '/foo?bar' }), 'ws:/foo?bar')
-    t.equal(URI.serialize({ scheme: 'ws', secure: false }), 'ws:')
-    t.equal(URI.serialize({ scheme: 'ws', secure: true }), 'wss:')
-    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo' }), 'ws://example.com/foo')
-    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar' }), 'ws://example.com/foo?bar')
-    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', secure: false }), 'ws://example.com')
-    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', secure: true }), 'wss://example.com')
-    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: false }), 'ws://example.com/foo?bar')
-    t.equal(URI.serialize({ scheme: 'ws', host: 'example.com', resourceName: '/foo?bar', secure: true }), 'wss://example.com/foo?bar')
-    t.end()
-  })
-
-  test('WS Equal', (t) => {
-    t.equal(URI.equal('WS://ABC.COM:80/chat#one', 'ws://abc.com/chat'), true)
-    t.end()
-  })
-
-  test('WS Normalize', (t) => {
-    t.equal(URI.normalize('ws://example.com:80/foo#hash'), 'ws://example.com/foo')
-    t.end()
-  })
-}
-
-if (URI.SCHEMES.wss) {
-  test('WSS Parse', (t) => {
-    let components
-
-    // example from RFC 6455, Sec 4.1
-    components = URI.parse('wss://example.com/chat')
-    t.equal(components.error, undefined, 'error')
-    t.equal(components.scheme, 'wss', 'scheme')
-    t.equal(components.userinfo, undefined, 'userinfo')
-    t.equal(components.host, 'example.com', 'host')
-    t.equal(components.port, undefined, 'port')
-    t.equal(components.path, undefined, 'path')
-    t.equal(components.query, undefined, 'query')
-    t.equal(components.fragment, undefined, 'fragment')
-    t.equal(components.resourceName, '/chat', 'resourceName')
-    t.equal(components.secure, true, 'secure')
-
-    components = URI.parse('wss://example.com/foo?bar=baz')
-    t.equal(components.error, undefined, 'error')
-    t.equal(components.scheme, 'wss', 'scheme')
-    t.equal(components.userinfo, undefined, 'userinfo')
-    t.equal(components.host, 'example.com', 'host')
-    t.equal(components.port, undefined, 'port')
-    t.equal(components.path, undefined, 'path')
-    t.equal(components.query, undefined, 'query')
-    t.equal(components.fragment, undefined, 'fragment')
-    t.equal(components.resourceName, '/foo?bar=baz', 'resourceName')
-    t.equal(components.secure, true, 'secure')
-
-    components = URI.parse('wss://example.com/?bar=baz')
-    t.equal(components.resourceName, '/?bar=baz', 'resourceName')
-
-    t.end()
-  })
-
-  test('WSS Serialize', (t) => {
-    t.equal(URI.serialize({ scheme: 'wss' }), 'wss:')
-    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com' }), 'wss://example.com')
-    t.equal(URI.serialize({ scheme: 'wss', resourceName: '/' }), 'wss:')
-    t.equal(URI.serialize({ scheme: 'wss', resourceName: '/foo' }), 'wss:/foo')
-    t.equal(URI.serialize({ scheme: 'wss', resourceName: '/foo?bar' }), 'wss:/foo?bar')
-    t.equal(URI.serialize({ scheme: 'wss', secure: false }), 'ws:')
-    t.equal(URI.serialize({ scheme: 'wss', secure: true }), 'wss:')
-    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo' }), 'wss://example.com/foo')
-    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar' }), 'wss://example.com/foo?bar')
-    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', secure: false }), 'ws://example.com')
-    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', secure: true }), 'wss://example.com')
-    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar', secure: false }), 'ws://example.com/foo?bar')
-    t.equal(URI.serialize({ scheme: 'wss', host: 'example.com', resourceName: '/foo?bar', secure: true }), 'wss://example.com/foo?bar')
-    t.end()
-  })
-
-  test('WSS Equal', (t) => {
-    t.equal(URI.equal('WSS://ABC.COM:443/chat#one', 'wss://abc.com/chat'), true)
-    t.end()
-  })
-
-  test('WSS Normalize', (t) => {
-    t.equal(URI.normalize('wss://example.com:443/foo#hash'), 'wss://example.com/foo')
-    t.end()
-  })
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/util.test.js b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/util.test.js
deleted file mode 100644
index 66d515fab..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/test/util.test.js
+++ /dev/null
@@ -1,23 +0,0 @@
-'use strict'
-
-const test = require('tape')
-const {
-  stringArrayToHexStripped
-} = require('../lib/utils')
-
-test('stringArrayToHexStripped', (t) => {
-  const testCases = [
-    [[['0', '0', '0', '0']], ''],
-    [[['0', '0', '0', '0'], false], ''],
-    [[['0', '0', '0', '0'], true], '0'],
-    [[['0', '1', '0', '0'], false], '100'],
-    [[['1', '0', '0', '0'], false], '1000'],
-    [[['1', '0', '0', '0'], true], '1000']
-  ]
-
-  t.plan(testCases.length)
-
-  testCases.forEach(([input, expected]) => {
-    t.same(stringArrayToHexStripped(input[0], input[1]), expected)
-  })
-})
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.d.ts
deleted file mode 100644
index ad0b45d6d..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.d.ts
+++ /dev/null
@@ -1,53 +0,0 @@
-type FastUri = typeof fastUri
-
-declare namespace fastUri {
-  export interface URIComponent {
-    scheme?: string;
-    userinfo?: string;
-    host?: string;
-    port?: number | string;
-    path?: string;
-    query?: string;
-    fragment?: string;
-    reference?: string;
-    error?: string;
-  }
-  export interface Options {
-    scheme?: string;
-    reference?: string;
-    unicodeSupport?: boolean;
-    domainHost?: boolean;
-    absolutePath?: boolean;
-    tolerant?: boolean;
-  }
-
-  /**
-   * @deprecated Use Options instead
-   */
-  export type options = Options
-  /**
-   * @deprecated Use URIComponent instead
-   */
-  export type URIComponents = URIComponent
-
-  export function normalize (uri: string, opts?: Options): string
-  export function normalize (uri: URIComponent, opts?: Options): URIComponent
-  export function normalize (uri: any, opts?: Options): any
-
-  export function resolve (baseURI: string, relativeURI: string, options?: Options): string
-
-  export function resolveComponent (base: URIComponent, relative: URIComponent, options?: Options, skipNormalization?: boolean): URIComponent
-
-  export function parse (uri: string, opts?: Options): URIComponent
-
-  export function serialize (component: URIComponent, opts?: Options): string
-
-  export function equal (uriA: string, uriB: string): boolean
-
-  export function resolve (base: string, path: string): string
-
-  export const fastUri: FastUri
-  export { fastUri as default }
-}
-
-export = fastUri
diff --git a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.test-d.ts b/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.test-d.ts
deleted file mode 100644
index 02670ced8..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/fast-uri/types/index.test-d.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-import uri, { URIComponents, URIComponent, Options, options } from '..'
-import { expectDeprecated, expectType } from 'tsd'
-
-const parsed = uri.parse('foo')
-expectType<URIComponents>(parsed)
-const parsed2 = uri.parse('foo', {
-  domainHost: true,
-  scheme: 'https',
-  unicodeSupport: false
-})
-expectType<URIComponents>(parsed2)
-
-expectType<URIComponent>({} as URIComponents)
-expectDeprecated({} as URIComponents)
-
-expectType<Options>({} as options)
-expectDeprecated({} as options)
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.eslintrc.yml b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.eslintrc.yml
deleted file mode 100644
index 618559ab6..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.eslintrc.yml
+++ /dev/null
@@ -1,27 +0,0 @@
-extends: eslint:recommended
-env:
-  node: true
-  browser: true
-rules:
-  block-scoped-var: 2
-  complexity: [2, 15]
-  curly: [2, multi-or-nest, consistent]
-  dot-location: [2, property]
-  dot-notation: 2
-  indent: [2, 2, SwitchCase: 1]
-  linebreak-style: [2, unix]
-  new-cap: 2
-  no-console: [2, allow: [warn, error]]
-  no-else-return: 2
-  no-eq-null: 2
-  no-fallthrough: 2
-  no-invalid-this: 2
-  no-return-assign: 2
-  no-shadow: 1
-  no-trailing-spaces: 2
-  no-use-before-define: [2, nofunc]
-  quotes: [2, single, avoid-escape]
-  semi: [2, always]
-  strict: [2, global]
-  valid-jsdoc: [2, requireReturn: false]
-  no-control-regex: 0
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/FUNDING.yml b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/FUNDING.yml
deleted file mode 100644
index 44f80f417..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/FUNDING.yml
+++ /dev/null
@@ -1,2 +0,0 @@
-github: epoberezkin
-tidelift: "npm/json-schema-traverse"
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/build.yml b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/build.yml
deleted file mode 100644
index f8ef5ba80..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/build.yml
+++ /dev/null
@@ -1,28 +0,0 @@
-name: build
-
-on:
-  push:
-    branches: [master]
-  pull_request:
-    branches: ["*"]
-
-jobs:
-  build:
-    runs-on: ubuntu-latest
-
-    strategy:
-      matrix:
-        node-version: [10.x, 12.x, 14.x]
-
-    steps:
-      - uses: actions/checkout@v2
-      - name: Use Node.js ${{ matrix.node-version }}
-        uses: actions/setup-node@v1
-        with:
-          node-version: ${{ matrix.node-version }}
-      - run: npm install
-      - run: npm test
-      - name: Coveralls
-        uses: coverallsapp/github-action@master
-        with:
-          github-token: ${{ secrets.GITHUB_TOKEN }}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/publish.yml b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/publish.yml
deleted file mode 100644
index 924825b12..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/.github/workflows/publish.yml
+++ /dev/null
@@ -1,27 +0,0 @@
-name: publish
-
-on:
-  release:
-    types: [published]
-
-jobs:
-  publish-npm:
-    runs-on: ubuntu-latest
-    steps:
-      - uses: actions/checkout@v2
-      - uses: actions/setup-node@v1
-        with:
-          node-version: 14
-          registry-url: https://registry.npmjs.org/
-      - run: npm install
-      - run: npm test
-      - name: Publish beta version to npm
-        if: "github.event.release.prerelease"
-        run: npm publish --tag beta
-        env:
-          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
-      - name: Publish to npm
-        if: "!github.event.release.prerelease"
-        run: npm publish
-        env:
-          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/LICENSE b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/LICENSE
deleted file mode 100644
index 7f1543566..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/LICENSE
+++ /dev/null
@@ -1,21 +0,0 @@
-MIT License
-
-Copyright (c) 2017 Evgeny Poberezkin
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in all
-copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
-SOFTWARE.
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/README.md b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/README.md
deleted file mode 100644
index f3e60073a..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/README.md
+++ /dev/null
@@ -1,95 +0,0 @@
-# json-schema-traverse
-Traverse JSON Schema passing each schema object to callback
-
-[![build](https://github.com/epoberezkin/json-schema-traverse/workflows/build/badge.svg)](https://github.com/epoberezkin/json-schema-traverse/actions?query=workflow%3Abuild)
-[![npm](https://img.shields.io/npm/v/json-schema-traverse)](https://www.npmjs.com/package/json-schema-traverse)
-[![coverage](https://coveralls.io/repos/github/epoberezkin/json-schema-traverse/badge.svg?branch=master)](https://coveralls.io/github/epoberezkin/json-schema-traverse?branch=master)
-
-
-## Install
-
-```
-npm install json-schema-traverse
-```
-
-
-## Usage
-
-```javascript
-const traverse = require('json-schema-traverse');
-const schema = {
-  properties: {
-    foo: {type: 'string'},
-    bar: {type: 'integer'}
-  }
-};
-
-traverse(schema, {cb});
-// cb is called 3 times with:
-// 1. root schema
-// 2. {type: 'string'}
-// 3. {type: 'integer'}
-
-// Or:
-
-traverse(schema, {cb: {pre, post}});
-// pre is called 3 times with:
-// 1. root schema
-// 2. {type: 'string'}
-// 3. {type: 'integer'}
-//
-// post is called 3 times with:
-// 1. {type: 'string'}
-// 2. {type: 'integer'}
-// 3. root schema
-
-```
-
-Callback function `cb` is called for each schema object (not including draft-06 boolean schemas), including the root schema, in pre-order traversal. Schema references ($ref) are not resolved, they are passed as is.  Alternatively, you can pass a `{pre, post}` object as `cb`, and then `pre` will be called before traversing child elements, and `post` will be called after all child elements have been traversed.
-
-Callback is passed these parameters:
-
-- _schema_: the current schema object
-- _JSON pointer_: from the root schema to the current schema object
-- _root schema_: the schema passed to `traverse` object
-- _parent JSON pointer_: from the root schema to the parent schema object (see below)
-- _parent keyword_: the keyword inside which this schema appears (e.g. `properties`, `anyOf`, etc.)
-- _parent schema_: not necessarily parent object/array; in the example above the parent schema for `{type: 'string'}` is the root schema
-- _index/property_: index or property name in the array/object containing multiple schemas; in the example above for `{type: 'string'}` the property name is `'foo'`
-
-
-## Traverse objects in all unknown keywords
-
-```javascript
-const traverse = require('json-schema-traverse');
-const schema = {
-  mySchema: {
-    minimum: 1,
-    maximum: 2
-  }
-};
-
-traverse(schema, {allKeys: true, cb});
-// cb is called 2 times with:
-// 1. root schema
-// 2. mySchema
-```
-
-Without option `allKeys: true` callback will be called only with root schema.
-
-
-## Enterprise support
-
-json-schema-traverse package is a part of [Tidelift enterprise subscription](https://tidelift.com/subscription/pkg/npm-json-schema-traverse?utm_source=npm-json-schema-traverse&utm_medium=referral&utm_campaign=enterprise&utm_term=repo) - it provides a centralised commercial support to open-source software users, in addition to the support provided by software maintainers.
-
-
-## Security contact
-
-To report a security vulnerability, please use the
-[Tidelift security contact](https://tidelift.com/security).
-Tidelift will coordinate the fix and disclosure. Please do NOT report security vulnerability via GitHub issues.
-
-
-## License
-
-[MIT](https://github.com/epoberezkin/json-schema-traverse/blob/master/LICENSE)
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.d.ts b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.d.ts
deleted file mode 100644
index 0772daedb..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.d.ts
+++ /dev/null
@@ -1,40 +0,0 @@
-declare function traverse(
-  schema: traverse.SchemaObject,
-  opts: traverse.Options,
-  cb?: traverse.Callback
-): void;
-
-declare function traverse(
-  schema: traverse.SchemaObject,
-  cb: traverse.Callback
-): void;
-
-declare namespace traverse {
-  interface SchemaObject {
-    $id?: string;
-    $schema?: string;
-    [x: string]: any;
-  }
-
-  type Callback = (
-    schema: SchemaObject,
-    jsonPtr: string,
-    rootSchema: SchemaObject,
-    parentJsonPtr?: string,
-    parentKeyword?: string,
-    parentSchema?: SchemaObject,
-    keyIndex?: string | number
-  ) => void;
-
-  interface Options {
-    allKeys?: boolean;
-    cb?:
-      | Callback
-      | {
-          pre?: Callback;
-          post?: Callback;
-        };
-  }
-}
-
-export = traverse;
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.js b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.js
deleted file mode 100644
index e521bfa85..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/index.js
+++ /dev/null
@@ -1,93 +0,0 @@
-'use strict';
-
-var traverse = module.exports = function (schema, opts, cb) {
-  // Legacy support for v0.3.1 and earlier.
-  if (typeof opts == 'function') {
-    cb = opts;
-    opts = {};
-  }
-
-  cb = opts.cb || cb;
-  var pre = (typeof cb == 'function') ? cb : cb.pre || function() {};
-  var post = cb.post || function() {};
-
-  _traverse(opts, pre, post, schema, '', schema);
-};
-
-
-traverse.keywords = {
-  additionalItems: true,
-  items: true,
-  contains: true,
-  additionalProperties: true,
-  propertyNames: true,
-  not: true,
-  if: true,
-  then: true,
-  else: true
-};
-
-traverse.arrayKeywords = {
-  items: true,
-  allOf: true,
-  anyOf: true,
-  oneOf: true
-};
-
-traverse.propsKeywords = {
-  $defs: true,
-  definitions: true,
-  properties: true,
-  patternProperties: true,
-  dependencies: true
-};
-
-traverse.skipKeywords = {
-  default: true,
-  enum: true,
-  const: true,
-  required: true,
-  maximum: true,
-  minimum: true,
-  exclusiveMaximum: true,
-  exclusiveMinimum: true,
-  multipleOf: true,
-  maxLength: true,
-  minLength: true,
-  pattern: true,
-  format: true,
-  maxItems: true,
-  minItems: true,
-  uniqueItems: true,
-  maxProperties: true,
-  minProperties: true
-};
-
-
-function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
-  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
-    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
-    for (var key in schema) {
-      var sch = schema[key];
-      if (Array.isArray(sch)) {
-        if (key in traverse.arrayKeywords) {
-          for (var i=0; i<sch.length; i++)
-            _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
-        }
-      } else if (key in traverse.propsKeywords) {
-        if (sch && typeof sch == 'object') {
-          for (var prop in sch)
-            _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
-        }
-      } else if (key in traverse.keywords || (opts.allKeys && !(key in traverse.skipKeywords))) {
-        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
-      }
-    }
-    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
-  }
-}
-
-
-function escapeJsonPtr(str) {
-  return str.replace(/~/g, '~0').replace(/\//g, '~1');
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/package.json b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/package.json
deleted file mode 100644
index e32dfbaee..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/package.json
+++ /dev/null
@@ -1,43 +0,0 @@
-{
-  "name": "json-schema-traverse",
-  "version": "1.0.0",
-  "description": "Traverse JSON Schema passing each schema object to callback",
-  "main": "index.js",
-  "types": "index.d.ts",
-  "scripts": {
-    "eslint": "eslint index.js spec",
-    "test-spec": "mocha spec -R spec",
-    "test": "npm run eslint && nyc npm run test-spec"
-  },
-  "repository": {
-    "type": "git",
-    "url": "git+https://github.com/epoberezkin/json-schema-traverse.git"
-  },
-  "keywords": [
-    "JSON-Schema",
-    "traverse",
-    "iterate"
-  ],
-  "author": "Evgeny Poberezkin",
-  "license": "MIT",
-  "bugs": {
-    "url": "https://github.com/epoberezkin/json-schema-traverse/issues"
-  },
-  "homepage": "https://github.com/epoberezkin/json-schema-traverse#readme",
-  "devDependencies": {
-    "eslint": "^7.3.1",
-    "mocha": "^8.0.1",
-    "nyc": "^15.0.0",
-    "pre-commit": "^1.2.2"
-  },
-  "nyc": {
-    "exclude": [
-      "**/spec/**",
-      "node_modules"
-    ],
-    "reporter": [
-      "lcov",
-      "text-summary"
-    ]
-  }
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/.eslintrc.yml b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/.eslintrc.yml
deleted file mode 100644
index 3344da7eb..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/.eslintrc.yml
+++ /dev/null
@@ -1,6 +0,0 @@
-parserOptions:
-  ecmaVersion: 6
-globals:
-  beforeEach: false
-  describe: false
-  it: false
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/fixtures/schema.js b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/fixtures/schema.js
deleted file mode 100644
index c51430cdc..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/fixtures/schema.js
+++ /dev/null
@@ -1,125 +0,0 @@
-'use strict';
-
-var schema = {
-  additionalItems: subschema('additionalItems'),
-  items: subschema('items'),
-  contains: subschema('contains'),
-  additionalProperties: subschema('additionalProperties'),
-  propertyNames: subschema('propertyNames'),
-  not: subschema('not'),
-  allOf: [
-    subschema('allOf_0'),
-    subschema('allOf_1'),
-    {
-      items: [
-        subschema('items_0'),
-        subschema('items_1'),
-      ]
-    }
-  ],
-  anyOf: [
-    subschema('anyOf_0'),
-    subschema('anyOf_1'),
-  ],
-  oneOf: [
-    subschema('oneOf_0'),
-    subschema('oneOf_1'),
-  ],
-  definitions: {
-    foo: subschema('definitions_foo'),
-    bar: subschema('definitions_bar'),
-  },
-  properties: {
-    foo: subschema('properties_foo'),
-    bar: subschema('properties_bar'),
-  },
-  patternProperties: {
-    foo: subschema('patternProperties_foo'),
-    bar: subschema('patternProperties_bar'),
-  },
-  dependencies: {
-    foo: subschema('dependencies_foo'),
-    bar: subschema('dependencies_bar'),
-  },
-  required: ['foo', 'bar']
-};
-
-
-function subschema(keyword) {
-  var sch = {
-    properties: {},
-    additionalProperties: false,
-    additionalItems: false,
-    anyOf: [
-      {format: 'email'},
-      {format: 'hostname'}
-    ]
-  };
-  sch.properties['foo_' + keyword] = {title: 'foo'};
-  sch.properties['bar_' + keyword] = {title: 'bar'};
-  return sch;
-}
-
-
-module.exports = {
-  schema: schema,
-
-  // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
-  expectedCalls: [[schema, '', schema, undefined, undefined, undefined, undefined]]
-    .concat(expectedCalls('additionalItems'))
-    .concat(expectedCalls('items'))
-    .concat(expectedCalls('contains'))
-    .concat(expectedCalls('additionalProperties'))
-    .concat(expectedCalls('propertyNames'))
-    .concat(expectedCalls('not'))
-    .concat(expectedCallsChild('allOf', 0))
-    .concat(expectedCallsChild('allOf', 1))
-    .concat([
-      [schema.allOf[2], '/allOf/2', schema, '', 'allOf', schema, 2],
-      [schema.allOf[2].items[0], '/allOf/2/items/0', schema, '/allOf/2', 'items', schema.allOf[2], 0],
-      [schema.allOf[2].items[0].properties.foo_items_0, '/allOf/2/items/0/properties/foo_items_0', schema, '/allOf/2/items/0', 'properties', schema.allOf[2].items[0], 'foo_items_0'],
-      [schema.allOf[2].items[0].properties.bar_items_0, '/allOf/2/items/0/properties/bar_items_0', schema, '/allOf/2/items/0', 'properties', schema.allOf[2].items[0], 'bar_items_0'],
-      [schema.allOf[2].items[0].anyOf[0], '/allOf/2/items/0/anyOf/0', schema, '/allOf/2/items/0', 'anyOf', schema.allOf[2].items[0], 0],
-      [schema.allOf[2].items[0].anyOf[1], '/allOf/2/items/0/anyOf/1', schema, '/allOf/2/items/0', 'anyOf', schema.allOf[2].items[0], 1],
-
-      [schema.allOf[2].items[1], '/allOf/2/items/1', schema, '/allOf/2', 'items', schema.allOf[2], 1],
-      [schema.allOf[2].items[1].properties.foo_items_1, '/allOf/2/items/1/properties/foo_items_1', schema, '/allOf/2/items/1', 'properties', schema.allOf[2].items[1], 'foo_items_1'],
-      [schema.allOf[2].items[1].properties.bar_items_1, '/allOf/2/items/1/properties/bar_items_1', schema, '/allOf/2/items/1', 'properties', schema.allOf[2].items[1], 'bar_items_1'],
-      [schema.allOf[2].items[1].anyOf[0], '/allOf/2/items/1/anyOf/0', schema, '/allOf/2/items/1', 'anyOf', schema.allOf[2].items[1], 0],
-      [schema.allOf[2].items[1].anyOf[1], '/allOf/2/items/1/anyOf/1', schema, '/allOf/2/items/1', 'anyOf', schema.allOf[2].items[1], 1]
-    ])
-    .concat(expectedCallsChild('anyOf', 0))
-    .concat(expectedCallsChild('anyOf', 1))
-    .concat(expectedCallsChild('oneOf', 0))
-    .concat(expectedCallsChild('oneOf', 1))
-    .concat(expectedCallsChild('definitions', 'foo'))
-    .concat(expectedCallsChild('definitions', 'bar'))
-    .concat(expectedCallsChild('properties', 'foo'))
-    .concat(expectedCallsChild('properties', 'bar'))
-    .concat(expectedCallsChild('patternProperties', 'foo'))
-    .concat(expectedCallsChild('patternProperties', 'bar'))
-    .concat(expectedCallsChild('dependencies', 'foo'))
-    .concat(expectedCallsChild('dependencies', 'bar'))
-};
-
-
-function expectedCalls(keyword) {
-  return [
-    [schema[keyword], `/${keyword}`, schema, '', keyword, schema, undefined],
-    [schema[keyword].properties[`foo_${keyword}`], `/${keyword}/properties/foo_${keyword}`, schema, `/${keyword}`, 'properties', schema[keyword], `foo_${keyword}`],
-    [schema[keyword].properties[`bar_${keyword}`], `/${keyword}/properties/bar_${keyword}`, schema, `/${keyword}`, 'properties', schema[keyword], `bar_${keyword}`],
-    [schema[keyword].anyOf[0], `/${keyword}/anyOf/0`, schema, `/${keyword}`, 'anyOf', schema[keyword], 0],
-    [schema[keyword].anyOf[1], `/${keyword}/anyOf/1`, schema, `/${keyword}`, 'anyOf', schema[keyword], 1]
-  ];
-}
-
-
-function expectedCallsChild(keyword, i) {
-  return [
-    [schema[keyword][i], `/${keyword}/${i}`, schema, '', keyword, schema, i],
-    [schema[keyword][i].properties[`foo_${keyword}_${i}`], `/${keyword}/${i}/properties/foo_${keyword}_${i}`, schema, `/${keyword}/${i}`, 'properties', schema[keyword][i], `foo_${keyword}_${i}`],
-    [schema[keyword][i].properties[`bar_${keyword}_${i}`], `/${keyword}/${i}/properties/bar_${keyword}_${i}`, schema, `/${keyword}/${i}`, 'properties', schema[keyword][i], `bar_${keyword}_${i}`],
-    [schema[keyword][i].anyOf[0], `/${keyword}/${i}/anyOf/0`, schema, `/${keyword}/${i}`, 'anyOf', schema[keyword][i], 0],
-    [schema[keyword][i].anyOf[1], `/${keyword}/${i}/anyOf/1`, schema, `/${keyword}/${i}`, 'anyOf', schema[keyword][i], 1]
-  ];
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/index.spec.js b/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/index.spec.js
deleted file mode 100644
index c76b64fc8..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/json-schema-traverse/spec/index.spec.js
+++ /dev/null
@@ -1,171 +0,0 @@
-'use strict';
-
-var traverse = require('../index');
-var assert = require('assert');
-
-describe('json-schema-traverse', function() {
-  var calls;
-
-  beforeEach(function() {
-    calls = [];
-  });
-
-  it('should traverse all keywords containing schemas recursively', function() {
-    var schema = require('./fixtures/schema').schema;
-    var expectedCalls = require('./fixtures/schema').expectedCalls;
-
-    traverse(schema, {cb: callback});
-    assert.deepStrictEqual(calls, expectedCalls);
-  });
-
-  describe('Legacy v0.3.1 API', function() {
-    it('should traverse all keywords containing schemas recursively', function() {
-      var schema = require('./fixtures/schema').schema;
-      var expectedCalls = require('./fixtures/schema').expectedCalls;
-
-      traverse(schema, callback);
-      assert.deepStrictEqual(calls, expectedCalls);
-    });
-
-    it('should work when an options object is provided', function() {
-      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
-      var schema = require('./fixtures/schema').schema;
-      var expectedCalls = require('./fixtures/schema').expectedCalls;
-
-      traverse(schema, {}, callback);
-      assert.deepStrictEqual(calls, expectedCalls);
-    });
-  });
-
-
-  describe('allKeys option', function() {
-    var schema = {
-      someObject: {
-        minimum: 1,
-        maximum: 2
-      }
-    };
-
-    it('should traverse objects with allKeys: true option', function() {
-      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
-      var expectedCalls = [
-        [schema, '', schema, undefined, undefined, undefined, undefined],
-        [schema.someObject, '/someObject', schema, '', 'someObject', schema, undefined]
-      ];
-
-      traverse(schema, {allKeys: true, cb: callback});
-      assert.deepStrictEqual(calls, expectedCalls);
-    });
-
-
-    it('should NOT traverse objects with allKeys: false option', function() {
-      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
-      var expectedCalls = [
-        [schema, '', schema, undefined, undefined, undefined, undefined]
-      ];
-
-      traverse(schema, {allKeys: false, cb: callback});
-      assert.deepStrictEqual(calls, expectedCalls);
-    });
-
-
-    it('should NOT traverse objects without allKeys option', function() {
-      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
-      var expectedCalls = [
-        [schema, '', schema, undefined, undefined, undefined, undefined]
-      ];
-
-      traverse(schema, {cb: callback});
-      assert.deepStrictEqual(calls, expectedCalls);
-    });
-
-
-    it('should NOT travers objects in standard keywords which value is not a schema', function() {
-      var schema2 = {
-        const: {foo: 'bar'},
-        enum: ['a', 'b'],
-        required: ['foo'],
-        another: {
-
-        },
-        patternProperties: {}, // will not traverse - no properties
-        dependencies: true, // will not traverse - invalid
-        properties: {
-          smaller: {
-            type: 'number'
-          },
-          larger: {
-            type: 'number',
-            minimum: {$data: '1/smaller'}
-          }
-        }
-      };
-
-      // schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex
-      var expectedCalls = [
-        [schema2, '', schema2, undefined, undefined, undefined, undefined],
-        [schema2.another, '/another', schema2, '', 'another', schema2, undefined],
-        [schema2.properties.smaller, '/properties/smaller', schema2, '', 'properties', schema2, 'smaller'],
-        [schema2.properties.larger, '/properties/larger', schema2, '', 'properties', schema2, 'larger'],
-      ];
-
-      traverse(schema2, {allKeys: true, cb: callback});
-      assert.deepStrictEqual(calls, expectedCalls);
-    });
-  });
-
-  describe('pre and post', function() {
-    var schema = {
-      type: 'object',
-      properties: {
-        name: {type: 'string'},
-        age: {type: 'number'}
-      }
-    };
-
-    it('should traverse schema in pre-order', function() {
-      traverse(schema, {cb: {pre}});
-      var expectedCalls = [
-        ['pre', schema, '', schema, undefined, undefined, undefined, undefined],
-        ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
-        ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
-      ];
-      assert.deepStrictEqual(calls, expectedCalls);
-    });
-
-    it('should traverse schema in post-order', function() {
-      traverse(schema, {cb: {post}});
-      var expectedCalls = [
-        ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
-        ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
-        ['post', schema, '', schema, undefined, undefined, undefined, undefined],
-      ];
-      assert.deepStrictEqual(calls, expectedCalls);
-    });
-
-    it('should traverse schema in pre- and post-order at the same time', function() {
-      traverse(schema, {cb: {pre, post}});
-      var expectedCalls = [
-        ['pre', schema, '', schema, undefined, undefined, undefined, undefined],
-        ['pre', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
-        ['post', schema.properties.name, '/properties/name', schema, '', 'properties', schema, 'name'],
-        ['pre', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
-        ['post', schema.properties.age, '/properties/age', schema, '', 'properties', schema, 'age'],
-        ['post', schema, '', schema, undefined, undefined, undefined, undefined],
-      ];
-      assert.deepStrictEqual(calls, expectedCalls);
-    });
-  });
-
-  function callback() {
-    calls.push(Array.prototype.slice.call(arguments));
-  }
-
-  function pre() {
-    calls.push(['pre'].concat(Array.prototype.slice.call(arguments)));
-  }
-
-  function post() {
-    calls.push(['post'].concat(Array.prototype.slice.call(arguments)));
-  }
-});
diff --git a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/index.js b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/index.js
deleted file mode 100644
index cb5595fde..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/index.js
+++ /dev/null
@@ -1,34 +0,0 @@
-'use strict';
-
-var Module = require('module');
-var path = require('path');
-
-module.exports = function requireFromString(code, filename, opts) {
-	if (typeof filename === 'object') {
-		opts = filename;
-		filename = undefined;
-	}
-
-	opts = opts || {};
-	filename = filename || '';
-
-	opts.appendPaths = opts.appendPaths || [];
-	opts.prependPaths = opts.prependPaths || [];
-
-	if (typeof code !== 'string') {
-		throw new Error('code must be a string, not ' + typeof code);
-	}
-
-	var paths = Module._nodeModulePaths(path.dirname(filename));
-
-	var parent = module.parent;
-	var m = new Module(filename, parent);
-	m.filename = filename;
-	m.paths = [].concat(opts.prependPaths).concat(paths).concat(opts.appendPaths);
-	m._compile(code, filename);
-
-	var exports = m.exports;
-	parent && parent.children && parent.children.splice(parent.children.indexOf(m), 1);
-
-	return exports;
-};
diff --git a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/license b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/license
deleted file mode 100644
index 1aeb74fd2..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/license
+++ /dev/null
@@ -1,21 +0,0 @@
-The MIT License (MIT)
-
-Copyright (c) Vsevolod Strukchinsky <floatdrop@gmail.com> (github.com/floatdrop)
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in
-all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-THE SOFTWARE.
diff --git a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/package.json b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/package.json
deleted file mode 100644
index 800d46efc..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/package.json
+++ /dev/null
@@ -1,28 +0,0 @@
-{
-  "name": "require-from-string",
-  "version": "2.0.2",
-  "description": "Require module from string",
-  "license": "MIT",
-  "repository": "floatdrop/require-from-string",
-  "author": {
-    "name": "Vsevolod Strukchinsky",
-    "email": "floatdrop@gmail.com",
-    "url": "github.com/floatdrop"
-  },
-  "engines": {
-    "node": ">=0.10.0"
-  },
-  "scripts": {
-    "test": "mocha"
-  },
-  "files": [
-    "index.js"
-  ],
-  "keywords": [
-    ""
-  ],
-  "dependencies": {},
-  "devDependencies": {
-    "mocha": "*"
-  }
-}
diff --git a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/readme.md b/docs/healthcare-vc-examples/tests/node_modules/require-from-string/readme.md
deleted file mode 100644
index 88b3236f8..000000000
--- a/docs/healthcare-vc-examples/tests/node_modules/require-from-string/readme.md
+++ /dev/null
@@ -1,56 +0,0 @@
-# require-from-string [![Build Status](https://travis-ci.org/floatdrop/require-from-string.svg?branch=master)](https://travis-ci.org/floatdrop/require-from-string)
-
-Load module from string in Node.
-
-## Install
-
-```
-$ npm install --save require-from-string
-```
-
-
-## Usage
-
-```js
-var requireFromString = require('require-from-string');
-
-requireFromString('module.exports = 1');
-//=> 1
-```
-
-
-## API
-
-### requireFromString(code, [filename], [options])
-
-#### code
-
-*Required*  
-Type: `string`
-
-Module code.
-
-#### filename
-Type: `string`  
-Default: `''`
-
-Optional filename.
-
-
-#### options
-Type: `object`
-
-##### appendPaths
-Type: `Array`
-
-List of `paths`, that will be appended to module `paths`. Useful, when you want
-to be able require modules from these paths.
-
-##### prependPaths
-Type: `Array`
-
-Same as `appendPaths`, but paths will be prepended.
-
-## License
-
-MIT ¬© [Vsevolod Strukchinsky](http://github.com/floatdrop)

From e19a2baf8ba4c9dae0c091f6c2740263934ab088 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dr=2E=20Meg=20Monta=C3=B1ez-Davenport?=
 <future.systems.lab@proton.me>
Date: Sun, 17 Aug 2025 17:15:59 -0400
Subject: [PATCH 08/11] chore: ensure node_modules ignored
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Dr. Meg Monta√±ez-Davenport <future.systems.lab@proton.me>
---
 .gitignore | 2 ++
 1 file changed, 2 insertions(+)

diff --git a/.gitignore b/.gitignore
index 6373ef957..681380d31 100644
--- a/.gitignore
+++ b/.gitignore
@@ -190,3 +190,5 @@ _build/
 client/node_modules
 node_modules/
 **/node_modules/
+
+**/node_modules/

From e453e49a4cd01a773ed5306bc41ee685cb83d064 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dr=2E=20Meg=20Monta=C3=B1ez-Davenport?=
 <future.systems.lab@proton.me>
Date: Sun, 17 Aug 2025 17:21:51 -0400
Subject: [PATCH 09/11] docs: clarify repo fit and intended usage for
 healthcare VC examples
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Dr. Meg Monta√±ez-Davenport <future.systems.lab@proton.me>
---
 docs/healthcare-vc-examples/README.md | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/docs/healthcare-vc-examples/README.md b/docs/healthcare-vc-examples/README.md
index 3e26b2f30..4bccef5ae 100644
--- a/docs/healthcare-vc-examples/README.md
+++ b/docs/healthcare-vc-examples/README.md
@@ -9,3 +9,6 @@ Design principles:
 - PHI minimization
 - Selective disclosure friendly attributes
 - Revocation and key rotation awareness
+
+## Repository fit and usage
+These non-PHI healthcare credential examples are intended as reference artifacts for Aries VCR adopters. They demonstrate minimal, privacy-preserving schemas that can be issued by healthcare-related verifiers and later presented to relying parties through standard Aries components. They are not personal wallet personas; they are reusable templates showing how to model attendance and practitioner attestation in a way that avoids PHI while supporting revocation and selective disclosure.

From e78ced4623918b3bd5bec39c07be9207ad88f8a5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dr=2E=20Meg=20Monta=C3=B1ez-Davenport?=
 <future.systems.lab@proton.me>
Date: Thu, 21 Aug 2025 21:40:30 -0400
Subject: [PATCH 10/11] Fix .gitignore: remove redundant node_modules; keep
 client/ and **/node_modules/
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Dr. Meg Monta√±ez-Davenport <future.systems.lab@proton.me>
---
 .gitignore | 4 +---
 1 file changed, 1 insertion(+), 3 deletions(-)

diff --git a/.gitignore b/.gitignore
index 681380d31..0f31ac292 100644
--- a/.gitignore
+++ b/.gitignore
@@ -187,8 +187,6 @@ $RECYCLE.BIN/
 _build/
 
 # Aries VCR Client
-client/node_modules
-node_modules/
-**/node_modules/
 
+client/
 **/node_modules/

From 043ccf066e0737c5e804472cd6f5780692c7ee78 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Dr=2E=20Meg=20Monta=C3=B1ez-Davenport?=
 <future.systems.lab@proton.me>
Date: Sat, 23 Aug 2025 08:16:15 -0400
Subject: [PATCH 11/11] bash Copy Edit 'Move Testing block to
 docs/healthcare-vc-examples/README.md per review
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Dr. Meg Monta√±ez-Davenport <future.systems.lab@proton.me>
---
 README.md                             | 6 ------
 docs/healthcare-vc-examples/README.md | 7 +++++++
 2 files changed, 7 insertions(+), 6 deletions(-)

diff --git a/README.md b/README.md
index b038b108e..957003100 100644
--- a/README.md
+++ b/README.md
@@ -82,10 +82,4 @@ We also welcome issues submitted about problems you encounter in using Aries VCR
 
 [Apache License Version 2.0](https://github.com/bcgov/aries-vcr/blob/main/LICENSE)
 
-### Testing
-
-```bash
-npm install
-npm run test
-```
 
diff --git a/docs/healthcare-vc-examples/README.md b/docs/healthcare-vc-examples/README.md
index 4bccef5ae..61bc6f953 100644
--- a/docs/healthcare-vc-examples/README.md
+++ b/docs/healthcare-vc-examples/README.md
@@ -12,3 +12,10 @@ Design principles:
 
 ## Repository fit and usage
 These non-PHI healthcare credential examples are intended as reference artifacts for Aries VCR adopters. They demonstrate minimal, privacy-preserving schemas that can be issued by healthcare-related verifiers and later presented to relying parties through standard Aries components. They are not personal wallet personas; they are reusable templates showing how to model attendance and practitioner attestation in a way that avoids PHI while supporting revocation and selective disclosure.
+
+### Testing
+
+```bash
+npm install
+npm run test
+```
